import os
import logging
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_storage import _load_owners
from .vip_constants import TESTS_ROOT
from utils.loader import discover_tests, attach_images
from utils.keyboards import main_menu
from utils.i18n import t

logger = logging.getLogger("test_bot.vip")

async def office_my_tests_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤, –¥–µ current_user —î owner —É tests/_owners.json.
    –ö–Ω–æ–ø–∫–∏: –®–∞–±–ª–æ–Ω / –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ / ‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏ / ‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É.
    """
    user_id = update.effective_user.id
    owners = _load_owners()

    my_items: List[Dict[str, Any]] = []
    for rel, meta in owners.items():
        if isinstance(meta, dict) and meta.get("owner_id") == user_id:
            name = os.path.splitext(os.path.basename(rel))[0]
            abs_path = os.path.join(TESTS_ROOT, rel)
            abs_dir = os.path.dirname(abs_path)
            my_items.append({
                "name": name,
                "rel": rel,
                "abs_path": abs_path,
                "abs_dir": abs_dir,
            })

    my_items.sort(key=lambda x: x["name"].lower())
    context.user_data["vip_mytests"] = my_items

    if not my_items:
        text = (
            "üóÇ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –ø–æ–≤–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤.\n\n"
            "‚Ä¢ ¬´–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π¬ª ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª <test>.json —É –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ.\n"
            "‚Ä¢ ¬´–®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç—É¬ª ‚Äî –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ –Ω–∞ 4 –ø–∏—Ç–∞–Ω–Ω—è."
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π", callback_data="vip_upload_full")],
            [InlineKeyboardButton("üìé –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç—É", callback_data="vip_template")],
        ])
        await update.message.reply_text(text, reply_markup=kb)
        return

    listing = "\n".join(f"‚Ä¢ {it['name']}  ‚Äî  /{it['rel']}" for it in my_items)
    rows = [
        [InlineKeyboardButton("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤–Ω–∏–π", callback_data="vip_upload_full")],
        [InlineKeyboardButton("üìé –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç—É", callback_data="vip_template")],
    ]
    for idx, it in enumerate(my_items):
        rows.append([
            InlineKeyboardButton(f"‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏: {it['name']}", callback_data=f"vip_edit|{idx}"),
            InlineKeyboardButton(f"üóë {it['name']}", callback_data=f"vip_delete|{idx}"),
        ])
        rows.append([
            InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É", callback_data=f"vip_go|{idx}")
        ])

    await update.message.reply_text(
        "üóÇ –í–∞—à—ñ —Ç–µ—Å—Ç–∏ (VIP):\n" + listing + "\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=InlineKeyboardMarkup(rows)
    )

async def office_shared_tests_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤, –¥–µ current_user –º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø —è–∫ –¥–æ–≤—ñ—Ä–µ–Ω–∏–π.
    –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó: ‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏ / ‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É.
    (–ö–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ–≤—ñ—Ä–µ–Ω–∏–º–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –¥–ª—è –Ω–µ-–≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —É vip_edit_menu.)
    """
    user_id = update.effective_user.id
    username = (update.effective_user.username or "").strip()
    uname_lower = username.lower() if username else None

    owners = _load_owners()

    shared_items: List[Dict[str, Any]] = []
    for rel, meta in owners.items():
        if not isinstance(meta, dict):
            continue
        # —á–∏ —î user –¥–æ–≤—ñ—Ä–µ–Ω–∏–º?
        is_trusted = False
        try:
            ids = meta.get("trusted") or []
            unames = meta.get("trusted_usernames") or []
            if user_id and user_id in ids:
                is_trusted = True
            elif uname_lower and any(u.lower() == uname_lower for u in unames):
                is_trusted = True
        except Exception:
            is_trusted = False

        if not is_trusted:
            continue

        name = os.path.splitext(os.path.basename(rel))[0]
        abs_path = os.path.join(TESTS_ROOT, rel)
        abs_dir = os.path.dirname(abs_path)
        shared_items.append({
            "name": name,
            "rel": rel,
            "abs_path": abs_path,
            "abs_dir": abs_dir,
        })

    shared_items.sort(key=lambda x: x["name"].lower())
    context.user_data["vip_mytests"] = shared_items  # –ø–µ—Ä–µ—é–∑–∞—î–º–æ —Ç–æ–π —Å–∞–º–∏–π –º–∞—Å–∏–≤/—ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è vip_edit/vip_delete/vip_go

    if not shared_items:
        await update.message.reply_text("ü§ù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤ –¥–æ —á—É–∂–∏—Ö —Ç–µ—Å—Ç—ñ–≤.")
        return

    listing = "\n".join(f"‚Ä¢ {it['name']}  ‚Äî  /{it['rel']}" for it in shared_items)
    rows = []
    for idx, it in enumerate(shared_items):
        rows.append([
            InlineKeyboardButton(f"‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏: {it['name']}", callback_data=f"vip_edit|{idx}"),
            InlineKeyboardButton(f"üóë {it['name']}", callback_data=f"vip_delete|{idx}"),
        ])
        rows.append([
            InlineKeyboardButton("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É", callback_data=f"vip_go|{idx}")
        ])

    await update.message.reply_text(
        "ü§ù –°–ø—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ (–¥–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ –≤–ª–∞—Å–Ω–∏–∫–∞–º–∏):\n" + listing + "\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=InlineKeyboardMarkup(rows)
    )

async def vip_go_to_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–µ—Å—Ç—É' –∑ –µ–∫—Ä–∞–Ω–∞ –ú–æ—ó/–°–ø—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏.
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ—Å—Ç —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —Ä–µ–∂–∏–º—ñ–≤.
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    test_name = item["name"]
    test_dir = item["abs_dir"]

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥ —ñ –±–µ—Ä–µ–º–æ –∑–∞–ø–∏—Å –ø—Ä–æ —Ç–µ—Å—Ç
    try:
        context.bot_data["tests_catalog"] = discover_tests("tests")
        entry = (context.bot_data.get("tests_catalog") or {}).get(test_name)
    except Exception as e:
        logger.exception("discover_tests failed: %s", e)
        entry = None

    questions = []
    if entry:
        # –ü—ñ–¥–≤'—è–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —î
        try:
            questions = attach_images(entry["questions"], entry.get("images_dir"))
        except Exception as e:
            logger.warning("attach_images failed: %s", e)
            questions = entry["questions"] or []
    else:
        # –§–æ–ª–±–µ–∫: —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ JSON –Ω–∞–ø—Ä—è–º—É
        json_path = os.path.join(test_dir, f"{test_name}.json")
        try:
            import json
            with open(json_path, "r", encoding="utf-8") as f:
                questions = json.load(f)
        except Exception as e:
            logger.error("Failed to load test JSON directly: %s", e)
            await query.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ—Å—Ç.")
            return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É
    context.user_data["current_test"] = test_name
    context.user_data["current_test_dir"] = test_dir
    context.user_data["questions"] = questions
    context.user_data["total_questions"] = len(questions)

    # —Å–∫–∏–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ —Ñ–ª–∞–≥–∏ –ø–æ—à—É–∫—É/–æ—Ñ—ñ—Å—É
    context.user_data.pop("awaiting_search", None)
    context.user_data.pop("search_mode", None)
    context.user_data["in_office"] = False

    if "stats" not in context.user_data:
        context.user_data["stats"] = {
            "total_answered": 0,
            "correct_answers": 0,
            "best_streak": 0
        }

    lang = context.bot_data.get("lang", "uk")
    await query.message.reply_text(
        t(lang, "test_selected", test=test_name, count=len(questions)),
        reply_markup=main_menu()
    )
