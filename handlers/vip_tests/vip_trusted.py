# handlers/vip_tests/vip_trusted.py
import re
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_storage import (
    _load_owners, _save_owners,
    get_meta_for_rel, save_meta_for_rel,
    list_trusted_display,
    add_trusted_username, remove_trusted_by_key,
    list_pending_display, accept_pending_by_key, decline_pending_by_key,
    get_requests_count_for_rel,
)

log = logging.getLogger("test_bot.vip_trusted")

# –ª–æ–∫–∞–ª—å–Ω–∏–π –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ç–æ—Ä username ‚Äî —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ vip_storage.usernamestr
def _normalize_username(s: str) -> str | None:
    if not s:
        return None
    s = s.strip()
    if s.startswith("@"):
        s = s[1:]
    s = s.replace("@", "").strip()
    if not s:
        return None
    # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–ª–∞—Å–∏—á–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-username
    if re.fullmatch(r"[A-Za-z0-9_]{3,32}", s):
        return s
    return None

def _trusted_panel_kb(idx: int, rel: str | None = None) -> InlineKeyboardMarkup:
    """
    –ü–∞–Ω–µ–ª—å ¬´–î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ¬ª –∑ –∫–Ω–æ–ø–∫–∞–º–∏:
    - –î–æ–¥–∞—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö
    - –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö
    - –ó–∞–ø–∏—Ç–∏ (N)
    - –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    """
    rows = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö", callback_data=f"vip_trusted_add|{idx}")],
        [InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö", callback_data=f"vip_trusted_remove|{idx}")]
    ]
    if rel:
        cnt = get_requests_count_for_rel(rel)
        rows.append([InlineKeyboardButton(f"üì• –ó–∞–ø–∏—Ç–∏ ({cnt})", callback_data=f"vip_trusted_requests|{idx}")])
    rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", callback_data=f"vip_edit|{idx}")])
    return InlineKeyboardMarkup(rows)

async def vip_trusted_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    rel = item["rel"]
    owners = _load_owners()
    meta = owners.get(rel) or {}
    trusted_ids = meta.get("trusted") or []
    trusted_unames = meta.get("trusted_usernames") or []
    if not isinstance(trusted_ids, list):
        trusted_ids = []
    if not isinstance(trusted_unames, list):
        trusted_unames = []

    # –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–Ω–µ–ª—ñ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö
    context.user_data["vip_trusted_idx"] = idx
    context.user_data["vip_trusted_rel"] = rel

    listing = list_trusted_display(trusted_ids, trusted_unames)
    if listing:
        text = f"üë• –î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è ¬´{item['name']}¬ª:\n{listing}\n\n"
    else:
        text = f"üë• –î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è ¬´{item['name']}¬ª: (–ø–æ—Ä–æ–∂–Ω—å–æ)\n\n"

    text += "–©–æ–± –¥–æ–¥–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö¬ª –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ @username / —á–∏—Å–ª–æ–≤–∏–π ID —É —á–∞—Ç."
    await query.message.reply_text(text, reply_markup=_trusted_panel_kb(idx, rel))

async def vip_trusted_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return
    context.user_data["vip_trusted_idx"] = idx
    context.user_data["awaiting_vip_trusted_username"] = True
    await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å @username –∞–±–æ —á–∏—Å–ª–æ–≤–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É –¥–æ–≤—ñ—Ä–µ–Ω—ñ:")

def _looks_like_user_identifier(s: str) -> bool:
    if not s:
        return False
    s = s.strip()
    if s.startswith("@"):
        core = s[1:]
        return bool(re.fullmatch(r"[A-Za-z0-9_]{3,32}", core))
    return bool(re.fullmatch(r"\d{5,}", s))

def _resolve_target_idx_for_text(context: ContextTypes.DEFAULT_TYPE) -> int | None:
    idx = context.user_data.get("vip_trusted_idx")
    if isinstance(idx, int):
        return idx
    if context.user_data.get("in_office"):
        items = context.user_data.get("vip_mytests") or []
        if len(items) == 1:
            return 0
    return None

async def _do_add_trusted_by_idx(idx: int, val: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await update.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.")
        return

    item = items[idx]
    rel = item["rel"]

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ ‚Äî —Ü–µ ID —á–∏ @username
    if val.startswith("@"):
        uname = _normalize_username(val)
        if not uname:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π username.")
            return
        added = add_trusted_username(rel, uname)
        if added:
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö: @{uname}")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è @{uname} –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö.")
    else:
        # —á–∏—Å–ª–æ–≤–∏–π ID
        try:
            uid = int(val)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID.")
            return
        owners = _load_owners()
        meta = owners.get(rel) or {}
        ids = meta.get("trusted") or []
        if uid in ids:
            await update.message.reply_text("‚ÑπÔ∏è –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —É —Å–ø–∏—Å–∫—É –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö.")
        else:
            ids.append(uid)
            meta["trusted"] = ids
            owners[rel] = meta
            _save_owners(owners)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö: ID:{uid}")

    # –ì–æ—Ç–æ–≤–æ
    context.user_data.pop("awaiting_vip_trusted_username", None)

    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
    meta = get_meta_for_rel(rel)
    listing = list_trusted_display(meta.get("trusted", []), meta.get("trusted_usernames", []))
    kb = _trusted_panel_kb(idx, rel)
    await update.message.reply_text(
        f"üë• –î–æ–≤—ñ—Ä–µ–Ω—ñ –¥–ª—è ¬´{item['name']}¬ª:\n{listing or '(–ø–æ—Ä–æ–∂–Ω—å–æ)'}",
        reply_markup=kb
    )

async def vip_trusted_handle_username_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –î–æ–¥–∞—î @username/ID –¥–æ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö:
      - —è–∫—â–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ –ø–∞–Ω–µ–ª—å –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ ¬´‚ûï¬ª;
      - —è–∫—â–æ –≤ –æ—Ñ—ñ—Å—ñ —ñ —Ä—ñ–≤–Ω–æ –æ–¥–∏–Ω —Ç–µ—Å—Ç ‚Äî –¥–æ–¥–∞—î–º–æ –≤ –Ω—å–æ–≥–æ;
      - —è–∫—â–æ —Ç–µ—Å—Ç—ñ–≤ –∫—ñ–ª—å–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–∏–±—Ä–∞—Ç–∏ —Ç–µ—Å—Ç —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ—é.
    """
    text = (update.message.text or "").strip()
    if not _looks_like_user_identifier(text):
        return

    awaiting = bool(context.user_data.get("awaiting_vip_trusted_username"))
    idx = _resolve_target_idx_for_text(context)

    log.info("[TRUSTED] incoming='%s' awaiting=%s idx=%s in_office=%s tests_count=%s",
             text, awaiting, idx, context.user_data.get("in_office"),
             len(context.user_data.get("vip_mytests") or []))

    val = text if text.startswith("@") else text

    if awaiting or idx is not None:
        await _do_add_trusted_by_idx(idx if idx is not None else context.user_data.get("vip_trusted_idx", 0), val, update, context)
        return

    # –Ø–∫—â–æ –º–∏ —Ç—É—Ç ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É ¬´–ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç¬ª, —Ç–µ—Å—Ç—ñ–≤ –∫—ñ–ª—å–∫–∞ ‚Üí –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∏–±—ñ—Ä
    items = context.user_data.get("vip_mytests") or []
    if not items:
        return  # –ø–æ–∑–∞ –æ—Ñ—ñ—Å–æ–º ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ

    rows = []
    for i, it in enumerate(items):
        rows.append([InlineKeyboardButton(it["name"], callback_data=f"vip_trusted_pick|{i}|{val}")])
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç, –¥–æ —è–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∏ –¥–æ–≤—ñ—Ä–µ–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", reply_markup=InlineKeyboardMarkup(rows))

async def vip_trusted_pick_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –≤—ñ–¥ –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è @username/ID."""
    query = update.callback_query
    await query.answer()
    parts = query.data.split("|", 2)
    if len(parts) != 3:
        return
    _, idx_str, val = parts
    try:
        idx = int(idx_str)
    except ValueError:
        return
    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # —Å—Ñ–æ—Ä–º—É—î–º–æ "update-like" API (–±–æ _do_add_trusted_by_idx –æ—á—ñ–∫—É—î update.message)
    class _MsgProxy:
        def __init__(self, msg):
            self.chat_id = msg.chat_id
        async def reply_text(self, *args, **kwargs):
            await query.message.reply_text(*args, **kwargs)

    proxy_update = type("ProxyUpdate", (), {"message": _MsgProxy(query.message)})()
    await _do_add_trusted_by_idx(idx, val, proxy_update, context)

async def vip_trusted_remove_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ñ–¥–∫—Ä–∏–≤–∞—î —Å–ø–∏—Å–æ–∫ –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    –¢–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –û–ë'–Ñ–î–ù–ê–ù–Ü –∫–Ω–æ–ø–∫–∏: ¬´ID:xxx + @name¬ª,
    —â–æ –≤–∏–¥–∞–ª—è—é—Ç—å —ñ ID, —ñ @username –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
    –û–¥–∏–Ω–æ—á–Ω—ñ –∑–∞–ø–∏—Å–∏ (–ª–∏—à–µ ID –∞–±–æ –ª–∏—à–µ @) –ø–æ–∫–∞–∑—É—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ.
    """
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    rel = item["rel"]
    meta = get_meta_for_rel(rel)
    trusted_ids = list(meta.get("trusted", [])) or []
    trusted_unames = list(meta.get("trusted_usernames", [])) or []

    rows: list[list[InlineKeyboardButton]] = []

    # 1) –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–∞—Ä–∏—Ç–∏ –ø–æ —ñ–Ω–¥–µ–∫—Å—É ‚Äî —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–ø–∞–¥–∫—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è pending,
    #    –∫–æ–ª–∏ —ñ ID, —ñ username –¥–æ–¥–∞—é—Ç—å—Å—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ —Ç–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
    pair_count = min(len(trusted_ids), len(trusted_unames))
    used_id_idx = set()
    used_un_idx = set()
    for i in range(pair_count):
        uid = trusted_ids[i]
        uname = trusted_unames[i]
        rows.append([
            InlineKeyboardButton(
                f"‚úñ ID:{uid} + @{uname}",
                callback_data=f"vip_trusted_remove_do|{idx}|both:{uid}:{uname}"
            )
        ])
        used_id_idx.add(i)
        used_un_idx.add(i)

    # 2) –ó–∞–ª–∏—à–∫–æ–≤—ñ ¬´—Ç—ñ–ª—å–∫–∏ ID¬ª
    for j, uid in enumerate(trusted_ids):
        if j in used_id_idx:
            continue
        rows.append([
            InlineKeyboardButton(
                f"‚úñ ID:{uid}",
                callback_data=f"vip_trusted_remove_do|{idx}|id:{uid}"
            )
        ])

    # 3) –ó–∞–ª–∏—à–∫–æ–≤—ñ ¬´—Ç—ñ–ª—å–∫–∏ @username¬ª
    for k, uname in enumerate(trusted_unames):
        if k in used_un_idx:
            continue
        rows.append([
            InlineKeyboardButton(
                f"‚úñ @{uname}",
                callback_data=f"vip_trusted_remove_do|{idx}|uname:{uname}"
            )
        ])

    rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"vip_trusted|{idx}")])
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö:", reply_markup=InlineKeyboardMarkup(rows))

async def vip_trusted_remove_do(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è:
    - id:<uid> ‚Äî –≤–∏–¥–∞–ª—è—î –ª–∏—à–µ ID
    - uname:<name> ‚Äî –≤–∏–¥–∞–ª—è—î –ª–∏—à–µ username
    - both:<uid>:<name> ‚Äî –≤–∏–¥–∞–ª—è—î —ñ ID, —ñ username –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    """
    query = update.callback_query
    await query.answer()
    parts = (query.data.split("|", 2) if "|" in query.data else [])
    if len(parts) < 3:
        return
    _, idx_str, payload = parts
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    rel = item["rel"]

    # –†–æ–∑–±—ñ—Ä payload
    kind, key = None, None
    if payload.startswith("both:"):
        # both:<uid>:<uname>
        rest = payload[5:]
        try:
            uid_str, uname = rest.split(":", 1)
        except ValueError:
            await query.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return

        # –í–∏–¥–∞–ª—è—î–º–æ –æ–±–∏–¥–≤–∞
        ok1 = remove_trusted_by_key(rel, "id", uid_str)
        ok2 = remove_trusted_by_key(rel, "uname", uname)
        if ok1 or ok2:
            await query.message.reply_text("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö (ID —Ç–∞ @username).")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –í–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.")
        await vip_trusted_open(update, context)
        return

    if payload.startswith("id:"):
        kind, key = "id", payload[3:]
    elif payload.startswith("uname:"):
        kind, key = "uname", payload[6:]

    if not kind or key is None:
        await query.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return

    done = remove_trusted_by_key(rel, kind, key)
    if done:
        await query.message.reply_text("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–≤—ñ—Ä–µ–Ω–∏—Ö.")
    else:
        await query.message.reply_text("‚ÑπÔ∏è –í–∫–∞–∑–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.")

    await vip_trusted_open(update, context)

# ================== –ë–õ–û–ö ¬´–ó–ê–ü–ò–¢–ò¬ª ==================

def _requests_kb(idx: int, rel: str, pending_len: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –µ–∫—Ä–∞–Ω–∞ –∑–∞–ø–∏—Ç—ñ–≤:
    - –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –æ–∫—Ä–µ–º–æ: ‚úÖ/‚úñ
    - –≤–Ω–∏–∑—É: ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—Å—ñ¬ª, ¬´–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –≤—Å—ñ¬ª, ¬´–ù–∞–∑–∞–¥¬ª
    """
    meta = get_meta_for_rel(rel)
    pend = list(meta.get("pending", []))
    rows = []
    for i, req in enumerate(pend):
        uname = req.get("username") or "-"
        uid = req.get("user_id") or "-"
        # –í–ê–ñ–õ–ò–í–û: —à–æ—Ä—Ç-–Ω–µ–π–º–∏ –ø—ñ–¥ bot.py:
        rows.append([
            InlineKeyboardButton(f"‚úÖ @{uname}", callback_data=f"vip_tr_req_accept|{idx}|{i}"),
            InlineKeyboardButton(f"‚úñ ID:{uid}", callback_data=f"vip_tr_req_decline|{idx}|{i}"),
        ])
    rows.append([InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—Å—ñ", callback_data=f"vip_tr_req_accept_all|{idx}")])
    rows.append([InlineKeyboardButton("‚úñ –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –≤—Å—ñ", callback_data=f"vip_tr_req_decline_all|{idx}")])
    rows.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"vip_trusted|{idx}")])
    return InlineKeyboardMarkup(rows)

async def vip_trusted_requests_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–∫—Ä–∏—Ç–∏ –µ–∫—Ä–∞–Ω –∑—ñ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Ç—ñ–≤."""
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    rel = item["rel"]
    meta = get_meta_for_rel(rel)
    pend = list(meta.get("pending", []))

    if not pend:
        await query.message.reply_text("üì≠ –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î.", reply_markup=_trusted_panel_kb(idx, rel))
        return

    header = f"üì• –ó–∞–ø–∏—Ç–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ ¬´{item['name']}¬ª:\n\n" + list_pending_display(pend)
    await query.message.reply_text(header, reply_markup=_requests_kb(idx, rel, len(pend)))

async def vip_trusted_requests_accept_one(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    parts = query.data.split("|")
    if len(parts) != 3:
        return
    _, idx_str, req_idx = parts
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    rel = items[idx]["rel"]

    if accept_pending_by_key(rel, req_idx):
        await query.message.reply_text("‚úÖ –ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ (–Ω–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å).")

    await vip_trusted_requests_open(update, context)

async def vip_trusted_requests_decline_one(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    parts = query.data.split("|")
    if len(parts) != 3:
        return
    _, idx_str, req_idx = parts
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    rel = items[idx]["rel"]

    if decline_pending_by_key(rel, req_idx):
        await query.message.reply_text("‚úñ –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ (–Ω–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å).")

    await vip_trusted_requests_open(update, context)

async def vip_trusted_requests_accept_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    rel = items[idx]["rel"]

    meta = get_meta_for_rel(rel)
    pend = list(meta.get("pending", []))
    accepted = 0
    for _ in range(len(pend)):
        if accept_pending_by_key(rel, "0"):
            accepted += 1
    await query.message.reply_text(f"‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: {accepted}")
    await vip_trusted_requests_open(update, context)

async def vip_trusted_requests_decline_all(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    rel = items[idx]["rel"]

    meta = get_meta_for_rel(rel)
    pend = list(meta.get("pending", []))
    declined = 0
    for _ in range(len(pend)):
        if decline_pending_by_key(rel, "0"):
            declined += 1
    await query.message.reply_text(f"‚úñ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∑–∞–ø–∏—Ç—ñ–≤: {declined}")
    await vip_trusted_requests_open(update, context)
