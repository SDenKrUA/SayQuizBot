import os
import asyncio
import logging
from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import tests_menu, main_menu, browse_menu, add_cancel_kb
from utils.i18n import t
from utils.loader import attach_images, discover_tests_hierarchy, build_listing_for_path, discover_tests
from handlers.statistics_db import get_user_favorites_by_test

logger = logging.getLogger("test_bot")

ILLEGAL_WIN_CHARS = set('<>:"/\\|?*')

# ---- helpers: sanitizers ----

def _sanitize_folder_name(name: str) -> str:
    name = (name or "").strip()
    if not name:
        return ""
    if any(ch in ILLEGAL_WIN_CHARS for ch in name):
        return ""
    # –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —ñ–∫–æ–Ω–∫–∏/–∫–Ω–æ–ø–∫–∏ —è–∫ –Ω–∞–∑–≤–∏
    if name.startswith("üìÅ ") or name.startswith("‚ûï "):
        return ""
    if name in _RESERVED_INPUTS:
        return ""
    return name

def _sanitize_test_name(name: str) -> str:
    name = (name or "").strip()
    if not name:
        return ""
    if any(ch in ILLEGAL_WIN_CHARS for ch in name):
        return ""
    # –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —ñ–∫–æ–Ω–∫–∏/–∫–Ω–æ–ø–∫–∏ —è–∫ –Ω–∞–∑–≤–∏
    if name.startswith("üìÅ ") or name.startswith("‚ûï "):
        return ""
    if name in _RESERVED_INPUTS:
        return ""
    return name

def _is_reserved_input(text: str) -> bool:
    if not text:
        return True
    # –ë—É–¥—å-—è–∫–∞ ¬´–ø–∞–ø–∫–∞¬ª –∞–±–æ ¬´–∫–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è¬ª
    if text.startswith("üìÅ ") or text.startswith("‚ûï "):
        return True
    return text in _RESERVED_INPUTS

# –ö–Ω–æ–ø–∫–∏/—Ä—è–¥–∫–∏, —è–∫—ñ –ù–Ü–ö–û–õ–ò –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ —è–∫ –Ω–∞–∑–≤—É
_RESERVED_INPUTS = {
    "üîé –ü–æ—à—É–∫",
    "üë§ –ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç",
    "üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ—Å—Ç",
    "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–µ—Å—å —Ç–µ—Å—Ç",
    "üéì –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è",
    "üìù –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
    "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "‚ùì –î–æ–ø–æ–º–æ–≥–∞",
    "‚≠ê –£–ª—é–±–ª–µ–Ω—ñ",
    "üéì –ù–∞–≤—á–∞–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö",
    "üìù –¢–µ—Å—Ç –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö",
    "‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª",
    "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç",
    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    "üîô –ù–∞–∑–∞–¥",
}

# ---- refresh & tree helpers ----

async def _refresh_catalogs(context: ContextTypes.DEFAULT_TYPE):
    context.bot_data["tests_catalog"] = discover_tests("tests")
    context.bot_data["tests_tree"] = discover_tests_hierarchy("tests")

async def _send_browse_node_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç–æ—á–Ω–∏–º –≤—É–∑–ª–æ–º –¥–µ—Ä–µ–≤–∞ –∑–∞ user_data['browse_path']"""
    tree = context.bot_data.get("tests_tree")
    if not tree:
        tree = discover_tests_hierarchy("tests")
        context.bot_data["tests_tree"] = tree

    path = context.user_data.get("browse_path", [])
    subfolders, tests, _ = build_listing_for_path(tree, path)
    header = "üìÇ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–±–æ —Ç–µ—Å—Ç"
    if not subfolders and not tests:
        header += "\n(—Ü–µ–π —Ä–æ–∑–¥—ñ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π)"
    await context.bot.send_message(
        chat_id=chat_id,
        text=header,
        reply_markup=browse_menu(path, subfolders, tests)
    )

async def _show_browse_node(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–º—ñ—Å—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –∑–∞ user_data['browse_path'] (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∞–ø–¥–µ–π—Ç—ñ–≤)"""
    tree = context.bot_data.get("tests_tree")
    if not tree:
        tree = discover_tests_hierarchy("tests")
        context.bot_data["tests_tree"] = tree

    path = context.user_data.get("browse_path", [])
    subfolders, tests, _ = build_listing_for_path(tree, path)
    header = "üìÇ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–±–æ —Ç–µ—Å—Ç"
    if not subfolders and not tests:
        header += "\n(—Ü–µ–π —Ä–æ–∑–¥—ñ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π)"
    await update.message.reply_text(
        header,
        reply_markup=browse_menu(path, subfolders, tests)
    )

# ---- main handler ----

async def handle_test_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –∑–∞–ø–æ–±—ñ–∂–Ω–∏–∫ –≤—ñ–¥ ¬´–ø–æ–¥–≤—ñ–π–Ω–∏—Ö¬ª –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, —è–∫—â–æ —ñ–Ω—à–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —É–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–≤
    if context.user_data.pop("suppress_test_select_once", False):
        logger.info("[TEST_SELECT] Suppressed once by upstream handler for text=%r", (update.message.text or "").strip())
        return

    lang = context.bot_data.get("lang", "uk")
    text = (update.message.text or "").strip()
    catalog = context.bot_data.get("tests_catalog", {})

    # üîí –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–±—É–≤–∞—î —É "–ú–æ—î–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ" ‚Äî –ù–ï –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –π–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç.
    if context.user_data.get("in_office"):
        logger.info("[TEST_SELECT] Ignored because user is in 'office' mode: %r", text)
        return

    add_question_active = context.user_data.get("add_question_active", False)
    awaiting_comment = context.user_data.get("awaiting_comment", False)
    mode = context.user_data.get("mode")
    awaiting_search = context.user_data.get("awaiting_search")  # üîé

    logger.info(
        f"[TEST_SELECT] chat={update.effective_chat.id} user={update.effective_user.id} "
        f"text='{text}' add_question_active={add_question_active} "
        f"awaiting_comment={awaiting_comment} mode={mode} catalog_keys={list(catalog.keys())}"
    )

    # –Ø–∫—â–æ –º–∞–π—Å—Ç–µ—Ä –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–π ‚Äî –Ω–µ —á—ñ–ø–∞—î–º–æ
    if add_question_active:
        logger.info("[TEST_SELECT] Skipped due to active flow (add_question)")
        return

    # –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –∫–æ–º–µ–Ω—Ç–∞—Ä ‚Äî –ù–ï –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–µ–∫—Å—Ç
    if awaiting_comment:
        from handlers.comments import handle_comment_flow
        logger.info(f"[TEST_SELECT] Forwarding to handle_comment_flow: '{text}'")
        await handle_comment_flow(update, context)
        return

    # üîé –Ø–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ—à—É–∫ ‚Äî –Ω–µ –∑–∞–≤–∞–∂–∞—î–º–æ
    if awaiting_search:
        logger.info("[TEST_SELECT] awaiting_search=%s", awaiting_search)
        if text == "üîé –ü–æ—à—É–∫":
            logger.info("[TEST_SELECT] Ignoring trigger button text during search mode")
            return
        if awaiting_search == "test" and text in catalog:
            logger.info("[TEST_SELECT] Selecting test from search: %s", text)
            context.user_data.pop("awaiting_search", None)
            context.user_data.pop("search_mode", None)
        else:
            from handlers.menu import handle_search_query
            await handle_search_query(update, context)
            return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Ä–µ–∂–∏–º—ñ –Ω–∞–≤—á–∞–Ω–Ω—è/—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    if mode in ["learning", "test"]:
        logger.info(f"[TEST_SELECT] Ignored input during {mode} mode: '{text}'")
        return

    # –ö–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ç—É—Ç (—ó—Ö –æ–±—Ä–æ–±–ª—è—é—Ç—å —Å–≤–æ—ó —Ö–µ–Ω–¥–ª–µ—Ä–∏ —É group=1)
    menu_commands = [
        "üîé –ü–æ—à—É–∫",
        "üë§ –ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç",
        "üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ—Å—Ç",
        "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–µ—Å—å —Ç–µ—Å—Ç",
        "üéì –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è",
        "üìù –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
        "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚ùì –î–æ–ø–æ–º–æ–≥–∞",
        "‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è",
        "‚≠ê –£–ª—é–±–ª–µ–Ω—ñ",
        "üéì –ù–∞–≤—á–∞–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö",
        "üìù –¢–µ—Å—Ç –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö",
    ]
    if text in menu_commands:
        logger.info(f"[TEST_SELECT] Ignored menu command: '{text}'")
        return

    # ==== –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–∞–ø–∫–∞–º–∏ ====
    if "browse_path" not in context.user_data:
        context.user_data["browse_path"] = []
    path = context.user_data["browse_path"]

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É ---
    if text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª":
        context.user_data["awaiting_new_folder"] = True
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —á–µ–∫–∞–ª–∏ –Ω–∞–∑–≤—É —Ç–µ—Å—Ç—É ‚Äî —Å–∫–∞—Å–æ–≤—É—î–º–æ —Ç–æ–π —Ä–µ–∂–∏–º
        context.user_data.pop("awaiting_new_test", None)
        await update.message.reply_text(
            "üóÇ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É (–ø–∞–ø–∫–∏), –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏:",
            reply_markup=add_cancel_kb("folder")
        )
        return

    if context.user_data.get("awaiting_new_folder"):
        # –¥–æ–∑–≤–æ–ª—è—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∞–∑–∞–¥
        if text in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥"}:
            context.user_data.pop("awaiting_new_folder", None)
            await _show_browse_node(update, context)
            return

        # –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ/–∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏
        if _is_reserved_input(text):
            await update.message.reply_text("‚ö†Ô∏è –¶–µ –Ω–µ –Ω–∞–∑–≤–∞. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.")
            return

        name = _sanitize_folder_name(text)
        if not name:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: <>:\"/\\|?*\n–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É, –∞–±–æ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.")
        else:
            tree = context.bot_data.get("tests_tree") or discover_tests_hierarchy("tests")
            subfolders, tests, abs_dir = build_listing_for_path(tree, path)
            try:
                os.makedirs(os.path.join(abs_dir, name), exist_ok=False)
                await update.message.reply_text(f"‚úÖ –†–æ–∑–¥—ñ–ª ¬´{name}¬ª —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
                await _refresh_catalogs(context)
            except FileExistsError:
                await update.message.reply_text("‚ÑπÔ∏è –¢–∞–∫–∞ –ø–∞–ø–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.")
        context.user_data.pop("awaiting_new_folder", None)
        await _show_browse_node(update, context)
        return

    # --- –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç—É ---
    if text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç":
        context.user_data["awaiting_new_test"] = True
        # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º —á–µ–∫–∞–ª–∏ –Ω–∞–∑–≤—É –ø–∞–ø–∫–∏ ‚Äî —Å–∫–∞—Å–æ–≤—É—î–º–æ —Ç–æ–π —Ä–µ–∂–∏–º
        context.user_data.pop("awaiting_new_folder", None)
        await update.message.reply_text(
            "üìÑ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏:",
            reply_markup=add_cancel_kb("test")
        )
        return

    if context.user_data.get("awaiting_new_test"):
        if text in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥"}:
            context.user_data.pop("awaiting_new_test", None)
            await _show_browse_node(update, context)
            return

        if _is_reserved_input(text):
            await update.message.reply_text("‚ö†Ô∏è –¶–µ –Ω–µ –Ω–∞–∑–≤–∞ —Ç–µ—Å—Ç—É. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É –Ω–∞–∑–≤—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.")
            return

        name = _sanitize_test_name(text)
        if not name:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: <>:\"/\\|?*\n–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É, –∞–±–æ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.")
        else:
            tree = context.bot_data.get("tests_tree") or discover_tests_hierarchy("tests")
            subfolders, tests, abs_dir = build_listing_for_path(tree, path)
            file_path = os.path.join(abs_dir, f"{name} (custom).json")
            if os.path.exists(file_path):
                await update.message.reply_text("‚ÑπÔ∏è –¢–∞–∫–∏–π —Ç–µ—Å—Ç —É–∂–µ —ñ—Å–Ω—É—î –≤ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ.")
            else:
                try:
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write("[]")
                    await update.message.reply_text(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ—Å—Ç ¬´{name} (custom)¬ª.")
                    await _refresh_catalogs(context)
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª: {e}")
        context.user_data.pop("awaiting_new_test", None)
        await _show_browse_node(update, context)
        return

    # –ö–ª—ñ–∫ –ø–æ –ø–∞–ø—Ü—ñ
    if text.startswith("üìÅ "):
        folder = text[2:].strip()
        path.append(folder)
        context.user_data["browse_path"] = path
        await _show_browse_node(update, context)
        return

    # –ù–∞–∑–∞–¥ –≤–≥–æ—Ä—É (–ø—Ä–∏–π–º–∞—î–º–æ —ñ ‚¨ÖÔ∏è, —ñ üîô)
    if text in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥"}:
        if path:
            path.pop()
        context.user_data["browse_path"] = path
        await _show_browse_node(update, context)
        return

    # ==== –í–∏–±—ñ—Ä —Ç–µ—Å—Ç—É ====
    if text not in catalog:
        logger.warning(f"[TEST_SELECT] Not a test/folder item: '{text}'")
        await _show_browse_node(update, context)
        return

    entry = catalog[text]

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫ —ñ –±—É–ª–æ)
    try:
        logger.info(f"[TEST_SELECT] Loading images for test: {text}")
        loop = asyncio.get_event_loop()
        questions = await loop.run_in_executor(None, attach_images, entry["questions"], entry.get("images_dir"))
        logger.info(f"[TEST_SELECT] Images attached: {len(questions)} questions")
    except Exception as e:
        logger.error(f"[TEST_SELECT] Error attaching images: {e}")
        questions = entry["questions"]

    context.user_data["current_test"] = text
    context.user_data["current_test_dir"] = entry.get("dir")
    context.user_data["questions"] = questions
    context.user_data["total_questions"] = entry["total"]

    # —Å–∫–∏–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ —Ñ–ª–∞–≥–∏ –ø–æ—à—É–∫—É/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    for k in ("awaiting_search", "search_mode", "awaiting_new_folder", "awaiting_new_test"):
        context.user_data.pop(k, None)

    if "stats" not in context.user_data:
        context.user_data["stats"] = {
            "total_answered": 0,
            "correct_answers": 0,
            "best_streak": 0
        }

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –ø—ñ–¥–≥–æ—Ç—É—î–º–æ –Ω–∞–±—ñ—Ä —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É
    try:
        rows = await get_user_favorites_by_test(update.effective_user.id, text, limit=10000)
        context.user_data["fav_set"] = {r["q_index"] for r in rows}
    except Exception:
        context.user_data["fav_set"] = set()

    logger.info(f"[TEST_SELECT] Selected: {text}, total={len(questions)}")

    await update.message.reply_text(
        t(lang, "test_selected", test=text, count=len(questions)),
        reply_markup=main_menu()
    )

# ---- –ù–æ–≤–µ: callback –¥–ª—è —ñ–Ω–ª–∞–π–Ω ¬´‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª ----

async def add_cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É/—Ç–µ—Å—Ç—É —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É.
    """
    query = update.callback_query
    await query.answer()
    data = (query.data or "").split("|", 1)
    kind = data[1] if len(data) == 2 else ""

    if kind == "folder":
        context.user_data.pop("awaiting_new_folder", None)
    elif kind == "test":
        context.user_data.pop("awaiting_new_test", None)
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        pass

    # –ü–æ–≤—ñ–¥–æ–º–∏–º–æ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞
    try:
        await query.edit_message_text("‚ùé –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception:
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ü–µ –Ω–µ –Ω–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–º–æ –æ–∫—Ä–µ–º–∏–º
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùé –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    await _send_browse_node_message(context, chat_id=query.message.chat_id)
