# handlers/vip_tests/vip_files_single.py
import os
import shutil
import logging
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from .vip_constants import TESTS_ROOT
from .vip_storage import _refresh_catalogs
from .vip_utils import (
    IMAGE_EXTS, AUDIO_EXTS, VIDEO_EXTS, DOC_EXTS,
    _compress_image_bytes, _canonical_name, IMG_TARGET_LIMIT
)

logger = logging.getLogger("test_bot.vip_single")

# ------------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ -------------------

def _media_dir_for_item(item: dict) -> str:
    """
    –ü–∞–ø–∫–∞ –∑ –º–µ–¥—ñ–∞ –¥–ª—è —Ç–µ—Å—Ç—É: <abs_dir>/<name>
    """
    return os.path.join(item["abs_dir"], item["name"])

def _detect_kind_and_ext_from_filename(filename: Optional[str], fallback_kind: str = "document") -> tuple[str, str]:
    """
    –ó–∞ file_name/mime (–¥–µ –º–æ–∂–ª–∏–≤–æ) –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø (image/audio/video/document) —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è (–∑ –∫—Ä–∞–ø–∫–æ—é).
    –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ (fallback_kind, ".bin")
    """
    if not filename:
        return fallback_kind, ".bin"

    name = filename.strip()
    _, ext = os.path.splitext(name)
    ext_low = (ext or "").lower()

    if ext_low in IMAGE_EXTS:
        return "image", ext_low
    if ext_low in AUDIO_EXTS:
        return "audio", ext_low
    if ext_low in VIDEO_EXTS:
        return "video", ext_low
    if ext_low in DOC_EXTS:
        return "document", ext_low

    # –Ω–µ–≤—ñ–¥–æ–º–µ ‚Äî —Ç—Ä–∞–∫—Ç—É—î–º–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    return fallback_kind, (ext_low or ".bin")

def _detect_kind_and_ext_from_telegram(update: Update) -> tuple[Optional[str], Optional[str], Optional[object]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î (kind, ext, file_obj_or_photo_size) –¥–µ:
      - kind ‚àà {"image","audio","video","document"} –∞–±–æ None
      - ext ‚Äî —Å—Ç—Ä–æ–∫–∞ –∑ –∫—Ä–∞–ø–∫–æ—é
      - file_obj_or_photo_size ‚Äî –æ–±'—î–∫—Ç, —É —è–∫–æ–≥–æ —î get_file() (–∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º photo: —Ç–∞–º –ø–æ–≤–µ—Ä–Ω–µ–º–æ PhotoSize)
    –ü—ñ–¥—Ç—Ä–∏–º—É—î: document, photo, video, audio, voice.
    """
    msg = update.message

    # –î–æ–∫—É–º–µ–Ω—Ç
    if msg.document:
        kind, ext = _detect_kind_and_ext_from_filename(msg.document.file_name, "document")
        return kind, ext, msg.document

    # –§–æ—Ç–æ (—Å–ø–∏—Å–æ–∫ PhotoSize) ‚Äî –±–µ—Ä–µ–º–æ –Ω–∞–π–≤–∏—â–µ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
    if msg.photo:
        ps = msg.photo[-1]  # –Ω–∞–π–±—ñ–ª—å—à–µ
        # Telegram –¥–ª—è —Ñ–æ—Ç–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î —ñ–º'—è: –ø—Ä–∏–∑–Ω–∞—á–∏–º–æ .jpg
        return "image", ".jpg", ps

    # –í—ñ–¥–µ–æ
    if msg.video:
        kind, ext = _detect_kind_and_ext_from_filename(msg.video.file_name, "video")
        return kind, ext, msg.video

    # –ê—É–¥—ñ–æ (–º—É–∑–∏–∫–∞)
    if msg.audio:
        kind, ext = _detect_kind_and_ext_from_filename(msg.audio.file_name, "audio")
        return kind, ext, msg.audio

    # –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (voice) ‚Äî –∑–∞–∑–≤–∏—á–∞–π .ogg
    if msg.voice:
        return "audio", ".ogg", msg.voice

    return None, None, None


def _ensure_dir(path: str) -> None:
    os.makedirs(path, exist_ok=True)

# ------------------- –ü–£–ë–õ–Ü–ß–ù–Ü –•–ï–ù–î–õ–ï–†–ò -------------------

async def vip_edit_add_single_file_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–ª—ñ–∫ –ø–æ "üìÑ –î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª".
    –ó–±–µ—Ä—ñ–≥–∞—î–º–æ item —É vip_single.item —ñ —á–µ–∫–∞—î–º–æ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    context.user_data["vip_single"] = {"item": item, "await_index": True}

    # –°–ø—Ä–æ–±—É—î–º–æ –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥—ñ—Å—Ç–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç–∞–Ω—å, —â–æ–± –∫—Ä–∞—Å–∏–≤–æ –ø—ñ–¥–∫–∞–∑–∞—Ç–∏ –º–µ–∂—É
    total = 0
    try:
        # item –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 'abs_path' –Ω–∞ JSON
        abs_json = item.get("abs_path")
        if abs_json and os.path.isfile(abs_json):
            import json
            with open(abs_json, "r", encoding="utf-8") as f:
                data = json.load(f)
            if isinstance(data, list):
                total = len(data)
    except Exception:
        total = 0

    if total > 0:
        hint = f"(–≤—ñ–¥ 1 –¥–æ {total})"
    else:
        hint = "(–≤—ñ–¥ 1 —ñ –±—ñ–ª—å—à–µ)"

    await query.message.reply_text(
        f"üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è, –¥–æ —è–∫–æ–≥–æ –Ω–∞–ª–µ–∂–∏—Ç—å —Ñ–∞–π–ª. –õ–∏—à–µ —á–∏—Å–ª–æ {hint}.\n"
        f"–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç)."
    )

async def vip_handle_single_index_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–π–º–∞—î –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ vip_edit_add_single_file_start.
    –î–∞–ª—ñ —á–µ–∫–∞—î 1 —Ñ–∞–π–ª –º–µ–¥—ñ–∞.
    """
    st = context.user_data.get("vip_single")
    if not st or not st.get("await_index"):
        return

    raw = (update.message.text or "").strip()
    try:
        n = int(raw)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12).")
        return

    if n <= 0:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º. –°–ø—Ä–æ–±—É–π —â–µ.")
        return

    st["index"] = n
    st["await_index"] = False
    st["await_file"] = True
    context.user_data["vip_single"] = st

    await update.message.reply_text(
        f"‚úîÔ∏è –ù–æ–º–µ—Ä {n} –ø—Ä–∏–π–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å **–æ–¥–∏–Ω** —Ñ–∞–π–ª "
        f"(—Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç) —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )

async def vip_handle_single_media_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–π–º–∞—î 1 —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞.
    –í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø ‚Üí –∑–±–µ—Ä—ñ–≥–∞—î —è–∫ image{N}.* / audio{N}.* / video{N}.* / doc{N}.* —É –ø–∞–ø–∫—É –º–µ–¥—ñ–∞ —Ç–µ—Å—Ç—É.
    –ö–∞—Ä—Ç–∏–Ω–∫—É —Å—Ç–∏—Å–∫–∞—î (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Pillow).
    """
    st = context.user_data.get("vip_single")
    if not st or not st.get("await_file"):
        return

    item = st.get("item")
    if not item:
        context.user_data.pop("vip_single", None)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É.")
        return

    idx = st.get("index")
    if not isinstance(idx, int) or idx <= 0:
        context.user_data.pop("vip_single", None)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–∏—Ç–∞–Ω–Ω—è. –ü–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    kind, ext, media_obj = _detect_kind_and_ext_from_telegram(update)
    if not kind or not ext or not media_obj:
        await update.message.reply_text("‚ùå –ù–µ –±–∞—á—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    media_dir = _media_dir_for_item(item)
    _ensure_dir(media_dir)

    # –£—Ç–æ—á–Ω–∏–º–æ canonical name (–∑–∞ –∑–∞–¥–∞–Ω–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º)
    out_name = _canonical_name(kind, idx, ext)
    out_path = os.path.join(media_dir, out_name)

    try:
        tg_file = await media_obj.get_file()
        # –§–æ—Ç–æ (PhotoSize) ‚Üí –Ω–µ–º–∞—î file_name, –∞–ª–µ —î .get_file()
        raw_bytes = await tg_file.download_as_bytearray()

        if kind == "image":
            raw_bytes = _compress_image_bytes(raw_bytes, IMG_TARGET_LIMIT)

        with open(out_path, "wb") as f:
            f.write(raw_bytes)
    except Exception as e:
        logger.exception("Failed to save single media: %s", e)
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: {e}")
        return

    # –û—á–∏—Å—Ç–∏–º–æ —Å—Ç–∞–Ω
    context.user_data.pop("vip_single", None)

    # –û–Ω–æ–≤–∏–º–æ –∫–∞—Ç–∞–ª–æ–≥–∏ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –¥–µ—Å—å –∑–∞–ª–µ–∂–∞—Ç—å –ø—Ä–µ–≤'—é—à–∫–∏/–ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏)
    try:
        _refresh_catalogs(context)
    except Exception:
        pass

    rel = os.path.relpath(out_path, TESTS_ROOT).replace("\\", "/")
    await update.message.reply_text(f"‚úÖ –§–∞–π–ª –¥–æ–¥–∞–Ω–æ: `/{rel}`")

# ------------------- WIPE (–≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –º–µ–¥—ñ–∞) -------------------

async def vip_wipe_media_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–Ω–æ–ø–∫–∞ ‚Äúüßπ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏‚Äù ‚Üí –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    media_dir = _media_dir_for_item(item)
    exists = os.path.isdir(media_dir)

    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏", callback_data="vip_media_wipe_confirm|yes")],
        [InlineKeyboardButton("‚ùé –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_media_wipe_confirm|no")],
    ])
    context.user_data["vip_wipe_target"] = item
    await query.message.reply_text(
        f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–µ–¥—ñ–∞ —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É: `{media_dir}`\n"
        f"{'–ó–∞—Ä–∞–∑ —ñ—Å–Ω—É—î —ñ –±—É–¥–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–∞.' if exists else '–ü–∞–ø–∫–∏ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î.'}\n\n"
        f"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
        reply_markup=kb
    )

async def vip_wipe_media_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    """
    query = update.callback_query
    await query.answer()

    answer = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    item = context.user_data.pop("vip_wipe_target", None)
    if answer != "yes":
        await query.message.reply_text("‚ùé –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    if not item:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
        return

    media_dir = _media_dir_for_item(item)
    try:
        if os.path.isdir(media_dir):
            shutil.rmtree(media_dir, ignore_errors=True)
        await query.message.reply_text("üßπ –£—Å—ñ —Ñ–∞–π–ª–∏ –º–µ–¥—ñ–∞—Ç–µ–∫–∏ —Ç–µ—Å—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏: {e}")
        return

    # –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∏
    try:
        _refresh_catalogs(context)
    except Exception:
        pass
