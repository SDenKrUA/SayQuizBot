# handlers/vip_tests/vip_files.py
import os
import shutil
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_constants import TESTS_ROOT
from .vip_utils import IMAGE_EXTS, AUDIO_EXTS, VIDEO_EXTS, DOC_EXTS, _compress_image_bytes

logger = logging.getLogger("test_bot.vip_files")

# –ö–ª—é—á—ñ —Å—Ç–∞–Ω—ñ–≤:
# - vip_single_media_dir : –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ç–µ–∫–∏ —Ñ–∞–π–ª—ñ–≤ —Ç–µ—Å—Ç—É (<abs_dir>/<test_name>)
# - awaiting_vip_single_index : —á–µ–∫–∞—î–º–æ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è (int > 0)
# - vip_single_index : –≤–∏–±—Ä–∞–Ω–∏–π –Ω–æ–º–µ—Ä
# - awaiting_vip_single_file : —á–µ–∫–∞—î–º–æ –æ–¥–∏–Ω —Ñ–∞–π–ª (photo/audio/video/document)
# - vip_media_wipe_target : {"name": str, "abs_dir": str}
# - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: callback vip_media_wipe_confirm|(yes|no)

def _media_dir_for_item(item: dict) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏ —Ç–µ—Å—Ç—É: <abs_dir>/<name>."""
    return os.path.join(item["abs_dir"], item["name"])

# ---------- –ú–µ–Ω—é: –î–æ–¥–∞—Ç–∏ –û–ö–†–ï–ú–ò–ô —Ñ–∞–π–ª ----------

async def vip_edit_add_single_file_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–Ω–æ–ø–∫–∞ –∑ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: "üìÑ –î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª".
    –°—Ç–∞–≤–∏—Ç–∏–º–µ —Å—Ç–∞–Ω: —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è, –ø–æ—Ç—ñ–º —á–µ–∫–∞—î–º–æ —Ñ–∞–π–ª.
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    media_dir = _media_dir_for_item(item)
    os.makedirs(media_dir, exist_ok=True)

    # –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–Ω–∏ single-file (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
    for k in ("vip_single_media_dir", "awaiting_vip_single_index", "vip_single_index", "awaiting_vip_single_file"):
        context.user_data.pop(k, None)

    context.user_data["vip_single_media_dir"] = media_dir
    context.user_data["awaiting_vip_single_index"] = True

    await query.message.reply_text(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è, –¥–æ —è–∫–æ–≥–æ –Ω–∞–ª–µ–∂–∏—Ç—å —Ñ–∞–π–ª (–ª–∏—à–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 12).\n"
        "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç)."
    )

# ---------- –ö—Ä–æ–∫ 1: –ü—Ä–∏–π–º–∞—î–º–æ –Ω–æ–º–µ—Ä ----------

async def vip_handle_single_index_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–π–º–∞—î –¢–Ü–õ–¨–ö–ò –∫–æ–ª–∏ –æ—á—ñ–∫—É—î–º–æ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è single-file.
    """
    if not context.user_data.get("awaiting_vip_single_index"):
        return

    text = (update.message.text or "").strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 7).")
        return

    num = int(text)
    if num <= 0:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º.")
        return

    context.user_data["vip_single_index"] = num
    context.user_data.pop("awaiting_vip_single_index", None)
    context.user_data["awaiting_vip_single_file"] = True

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è ‚Ññ{num} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç)."
    )

# ---------- –ö—Ä–æ–∫ 2: –ü—Ä–∏–π–º–∞—î–º–æ –æ–¥–∏–Ω —Ñ–∞–π–ª ----------

def _detect_kind_and_ext(filename: str, fallback_ext: str = "") -> tuple[str|None, str]:
    ext = os.path.splitext(filename)[1].lower()
    if ext in IMAGE_EXTS:
        return "image", ext
    if ext in AUDIO_EXTS:
        return "audio", ext
    if ext in VIDEO_EXTS:
        return "video", ext
    if ext in DOC_EXTS:
        return "document", ext
    if fallback_ext:
        # –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ñ–æ–ª–±–µ–∫ (–¥–ª—è —Ñ–æ—Ç–æ –±–µ–∑ —ñ–º–µ–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥)
        return "image", fallback_ext
    return None, ""

def _canonical_name(kind: str, idx: int, ext: str) -> str:
    base = {"image": "image", "audio": "audio", "video": "video", "document": "doc"}.get(kind, "file")
    return f"{base}{idx}{ext}"

async def _download_bytes(file_obj) -> bytes:
    tg_file = await file_obj.get_file()
    return await tg_file.download_as_bytearray()

async def vip_handle_single_media_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–π–º–∞—î 1 —Ñ–∞–π–ª —É —Å—Ç–∞–Ω—ñ awaiting_vip_single_file.
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
      - —Ñ–æ—Ç–æ (update.message.photo)
      - –¥–æ–∫—É–º–µ–Ω—Ç (update.message.document)
      - –∞—É–¥—ñ–æ (update.message.audio / voice)
      - –≤—ñ–¥–µ–æ (update.message.video)
    """
    if not context.user_data.get("awaiting_vip_single_file"):
        return

    media_dir = context.user_data.get("vip_single_media_dir")
    idx = context.user_data.get("vip_single_index")
    if not media_dir or not isinstance(idx, int) or idx <= 0:
        # –∑—ñ–±‚Äô—î–º–æ —Å—Ç–∞–Ω–∏ —ñ –≤—ñ–¥–ø—É—Å—Ç–∏–º–æ
        for k in ("vip_single_media_dir", "vip_single_index", "awaiting_vip_single_file"):
            context.user_data.pop(k, None)
        await update.message.reply_text("‚ö†Ô∏è –°–µ—Å—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
        return

    # ----- –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É -----
    try:
        # 1) –§–æ—Ç–æ
        if update.message.photo:
            # –±–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º
            photo = update.message.photo[-1]
            raw = await _download_bytes(photo)
            # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ JPEG (—É–∑–≥–æ–¥–∂–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
            raw = _compress_image_bytes(raw)
            kind, ext = "image", ".jpg"

        # 2) –í—ñ–¥–µ–æ
        elif update.message.video:
            video = update.message.video
            raw = await _download_bytes(video)
            filename = (video.file_name or "video.mp4")
            kind, ext = _detect_kind_and_ext(filename)
            if not kind:
                kind, ext = "video", ".mp4"

        # 3) –ê—É–¥—ñ–æ (music)
        elif update.message.audio:
            audio = update.message.audio
            raw = await _download_bytes(audio)
            filename = (audio.file_name or "audio.mp3")
            kind, ext = _detect_kind_and_ext(filename)
            if not kind:
                kind, ext = "audio", ".mp3"

        # 4) Voice (ogg opus) ‚Äî —Ç–µ–∂ –∞—É–¥—ñ–æ
        elif update.message.voice:
            voice = update.message.voice
            raw = await _download_bytes(voice)
            kind, ext = "audio", ".ogg"

        # 5) –î–æ–∫—É–º–µ–Ω—Ç
        elif update.message.document:
            doc = update.message.document
            raw = await _download_bytes(doc)
            filename = (doc.file_name or "").strip()
            kind, ext = _detect_kind_and_ext(filename)
            if not kind:
                # —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–ª–∏ ‚Äî –≤–≤–∞–∂–∞—Ç–∏–º–µ–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                kind, ext = "document", (os.path.splitext(filename)[1].lower() or ".bin")

        else:
            await update.message.reply_text("‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç).")
            return

        # ----- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è -----
        os.makedirs(media_dir, exist_ok=True)
        out_name = _canonical_name(kind, idx, ext)
        out_path = os.path.join(media_dir, out_name)
        with open(out_path, "wb") as f:
            f.write(raw)

        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏
        for k in ("vip_single_media_dir", "vip_single_index", "awaiting_vip_single_file"):
            context.user_data.pop(k, None)

        from .vip_storage import _relative_to_tests
        rel_media = _relative_to_tests(out_path)
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ `/{rel_media}`", parse_mode="Markdown")

    except Exception as e:
        logger.exception("Single media save failed: %s", e)
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: {e}")
        # –Ω–µ —á—ñ–ø–∞—î–º–æ —Å—Ç–∞–Ω–∏, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É

# ---------- –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü —Ñ–∞–π–ª–∏ (—Ç–µ–∫—É media) ----------

async def vip_wipe_media_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ (—Ç–µ–∫—É <abs_dir>/<name>).
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    context.user_data["vip_media_wipe_target"] = {"name": item["name"], "abs_dir": item["abs_dir"]}

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="vip_media_wipe_confirm|yes"),
            InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_media_wipe_confirm|no"),
        ]
    ])
    await query.message.reply_text(
        f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü —Ñ–∞–π–ª–∏ —Ç–µ—Å—Ç—É ¬´{item['name']}¬ª? "
        "–ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –≤—Å—é —Ç–µ–∫—É –∑ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É.",
        reply_markup=kb
    )

async def vip_wipe_media_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    choice = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    tgt = context.user_data.pop("vip_media_wipe_target", None)

    if choice != "yes" or not tgt:
        await query.message.reply_text("‚ùé –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    media_dir = os.path.join(tgt["abs_dir"], tgt["name"])
    try:
        if os.path.isdir(media_dir):
            shutil.rmtree(media_dir, ignore_errors=True)
            await query.message.reply_text("üßπ –£—Å—ñ —Ñ–∞–π–ª–∏ —Ç–µ—Å—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –¢–µ–∫–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –Ω—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏.")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
