from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional

# –ö–µ—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
_main_menu_kb = None
_learning_order_kb = None
_test_settings_kb = None
_back_button_kb = None

def tests_menu(test_names: List[str]) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É (–ø–ª–æ—Å–∫–∞) ‚Äî –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ"""
    keyboard = [[KeyboardButton(name)] for name in test_names]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def browse_menu(path: List[str], subfolders: List[str], tests: List[str]) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Ä–æ–∑–¥—ñ–ª–∞—Ö/–ø–∞–ø–∫–∞—Ö —ñ —Ç–µ—Å—Ç–∞—Ö, –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è."""
    rows: List[List[KeyboardButton]] = []
    # –ü–∞–ø–∫–∏
    for name in subfolders:
        rows.append([KeyboardButton(f"üìÅ {name}")])
    # –¢–µ—Å—Ç–∏
    for name in tests:
        rows.append([KeyboardButton(name)])
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è
    rows.append([KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª"), KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç")])
    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
    ctrl: List[KeyboardButton] = []
    if path:
        ctrl.append(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    ctrl.append(KeyboardButton("üîé –ü–æ—à—É–∫"))
    ctrl.append(KeyboardButton("üë§ –ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç"))
    rows.append(ctrl)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def main_menu() -> ReplyKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º)"""
    global _main_menu_kb
    if _main_menu_kb is None:
        _main_menu_kb = ReplyKeyboardMarkup([
            [KeyboardButton("üéì –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è"), KeyboardButton("üìù –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton("‚≠ê –£–ª—é–±–ª–µ–Ω—ñ"), KeyboardButton("üîé –ü–æ—à—É–∫")],
            [KeyboardButton("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–µ—Å—å —Ç–µ—Å—Ç"), KeyboardButton("üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ—Å—Ç")],
            [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")]
        ], resize_keyboard=True)
    return _main_menu_kb

def learning_range_keyboard(total_questions: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è"""
    if total_questions <= 0:
        return get_back_button()
    
    ranges = []
    start = 1
    
    range_buttons = []
    while start <= total_questions:
        end = min(start + 49, total_questions)
        range_buttons.append(f"{start}-{end}")
        start = end + 1
    
    for i in range(0, len(range_buttons), 2):
        row = []
        if i < len(range_buttons):
            row.append(range_buttons[i])
        if i + 1 < len(range_buttons):
            row.append(range_buttons[i + 1])
        if row:
            ranges.append(row)
    
    if len(range_buttons) % 2 != 0:
        ranges.append(["üî¢ –í–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω"])
        ranges.append(["üîô –ù–∞–∑–∞–¥"])
    else:
        ranges.append(["üî¢ –í–ª–∞—Å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", "üîô –ù–∞–∑–∞–¥"])
    
    return ReplyKeyboardMarkup(ranges, resize_keyboard=True)

def learning_order_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –ø–æ—Ä—è–¥–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è (–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º)"""
    global _learning_order_kb
    if _learning_order_kb is None:
        _learning_order_kb = ReplyKeyboardMarkup([
            [KeyboardButton("üî¢ –ü–æ –ø–æ—Ä—è–¥–∫—É"), KeyboardButton("üé≤ –í —Ä–æ–∑–¥—Ä—ñ–±")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
    return _learning_order_kb

def test_settings_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–µ—Å—Ç—É (–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º)"""
    global _test_settings_kb
    if _test_settings_kb is None:
        _test_settings_kb = ReplyKeyboardMarkup([
            [KeyboardButton("üîü 10 –ø–∏—Ç–∞–Ω—å"), KeyboardButton("5Ô∏è‚É£0Ô∏è‚É£ 50 –ø–∏—Ç–∞–Ω—å")],
            [KeyboardButton("üíØ 100 –ø–∏—Ç–∞–Ω—å"), KeyboardButton("üî¢ –í–ª–∞—Å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
    return _test_settings_kb

def build_options_markup(
    q_index: int,
    highlight: Optional[bool] = None,
    two_columns: bool = False,
    is_favorited: bool = False,
    comments_count: int = 0,
    include_cancel: bool = True
) -> InlineKeyboardMarkup:
    """
    –ü–æ–±—É–¥–æ–≤–∞ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π + ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª.
    """
    letters = ["A", "B", "C", "D"]

    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: "–î–∞–ª—ñ", "–£–ª—é–±–ª–µ–Ω–µ", "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ (N)"
    if highlight:
        star_text = f"{'‚úÖ ' if is_favorited else ''}‚≠ê –£–ª—é–±–ª–µ–Ω–µ"
        comment_text = f"–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ ({comments_count})"
        kb = [[
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="next"),
            InlineKeyboardButton(star_text, callback_data=f"fav|{q_index}"),
            InlineKeyboardButton(comment_text, callback_data=f"comment|{q_index}")
        ]]
        if include_cancel:
            kb.append([InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])
        return InlineKeyboardMarkup(kb)
    
    # –î–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äî –ª–∏—à–µ A/B/C/D (+ –æ–∫—Ä–µ–º–æ ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –Ω–∏–∂–Ω—ñ–º —Ä—è–¥–æ–º)
    kb = []
    if two_columns:
        for i in range(0, len(letters), 2):
            row = []
            for j in range(2):
                if i + j < len(letters):
                    callback_data = f"ans|{q_index}|{i + j}"
                    row.append(InlineKeyboardButton(letters[i + j], callback_data=callback_data))
            if row:
                kb.append(row)
    else:
        for i, letter in enumerate(letters):
            callback_data = f"ans|{q_index}|{i}"
            kb.append([InlineKeyboardButton(letter, callback_data=callback_data)])

    if include_cancel:
        kb.append([InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")])

    return InlineKeyboardMarkup(kb)

def get_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—É"""
    if total <= 0:
        return "0/0"
    
    filled = min(int(length * current / total), length)
    empty = length - filled
    return f"{'üü©' * filled}{'‚¨ú' * empty} {current}/{total}"

def get_back_button() -> ReplyKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é '–ù–∞–∑–∞–¥'"""
    global _back_button_kb
    if _back_button_kb is None:
        _back_button_kb = ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    return _back_button_kb

def get_retry_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏", callback_data="retry_wrong")],
        [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton("üè† –î–æ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

def comment_menu(q_index: int) -> InlineKeyboardMarkup:
    """Inline –º–µ–Ω—é –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ (–æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä", callback_data=f"comment_write|{q_index}")],
        [InlineKeyboardButton("üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ", callback_data=f"comment_view|{q_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"comment_back|{q_index}")]
    ])

# === –ù–æ–≤–µ: —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö ===
def favorites_clear_inline_kb() -> InlineKeyboardMarkup:
    """–û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –ø–æ—á–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –£–ª—é–±–ª–µ–Ω—ñ", callback_data="fav_clear_all")]
    ])

def favorites_clear_confirm_kb() -> InlineKeyboardMarkup:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏", callback_data="fav_clear_confirm|yes"),
            InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="fav_clear_confirm|no"),
        ]
    ])

# === –ù–æ–≤–µ: —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
def stats_clear_inline_kb() -> InlineKeyboardMarkup:
    """–û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –ø–æ—á–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats_clear_all")]
    ])

def stats_clear_confirm_kb() -> InlineKeyboardMarkup:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏", callback_data="stats_clear_confirm|yes"),
            InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="stats_clear_confirm|no"),
        ]
    ])

# === –ù–æ–≤–µ: —ñ–Ω–ª–∞–π–Ω ¬´‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É/—Ç–µ—Å—Ç—É ===
def add_cancel_kb(kind: str) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è.
    kind: "folder" –∞–±–æ "test"
    """
    safe_kind = "folder" if kind == "folder" else "test"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"add_cancel|{safe_kind}")]
    ])

# === –ù–û–í–ï: —ñ–Ω–ª–∞–π–Ω ¬´‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫ –ø–∏—Ç–∞–Ω—å¬ª ===
def search_stop_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É –ø–∏—Ç–∞–Ω—å."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫ —Ç–µ—Å—Ç—ñ–≤", callback_data="stop_search")]
    ])
