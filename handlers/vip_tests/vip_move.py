# handlers/vip_tests/vip_move.py
import os
import shutil
import stat
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_constants import TESTS_ROOT
from .vip_storage import (
    _load_owners, _save_owners, _relative_to_tests, _refresh_catalogs, _cleanup_empty_dirs
)
from utils.export_docx import _safe_filename
from utils.loader import IGNORED_JSON_SUFFIXES, discover_tests, discover_tests_hierarchy, build_listing_for_path
from utils.keyboards import browse_menu

logger = logging.getLogger("test_bot.vip_move")

# --- –î–æ–ø–æ–º—ñ–∂–Ω–µ ---

def _is_test_json(filename: str) -> bool:
    """
    True, —è–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π JSON (–±–µ–∑ —Å–ª—É–∂–±–æ–≤–∏—Ö —Å—É—Ñ—ñ–∫—Å—ñ–≤).
    """
    if not filename.lower().endswith(".json"):
        return False
    low = filename.lower()
    for suf in IGNORED_JSON_SUFFIXES:
        if low.endswith(suf):
            return False
    return True

def _tree_has_any_useful_files(root_dir: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —É –ø—ñ–¥–¥–µ—Ä–µ–≤—ñ root_dir:
      - —Ö–æ—á –æ–¥–∏–Ω "—Ç–µ—Å—Ç–æ–≤–∏–π" JSON (–Ω–µ —Å–ª—É–∂–±–æ–≤–∏–π),
      - –∞–±–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏.
    –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ ‚Äî False (–º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —è–∫ –ø–æ—Ä–æ–∂–Ω—î –¥–µ—Ä–µ–≤–æ).
    """
    try:
        for _cur, _dirs, files in os.walk(root_dir):
            for fn in files:
                if _is_test_json(fn):
                    return True
                # –±—É–¥—å-—è–∫–∏–π —Ñ–∞–π–ª —Ç–∞–∫–æ–∂ –æ–∑–Ω–∞—á–∞—î ¬´–Ω–µ –ø–æ—Ä–æ–∂–Ω—å–æ¬ª
                return True
        return False
    except Exception:
        # –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—å: –∫—Ä–∞—â–µ –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏, —è–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞
        return True

def _safe_rmtree(path: str) -> None:
    if not os.path.isdir(path):
        return
    def onerror(func, p, exc_info):
        try:
            os.chmod(p, stat.S_IWRITE)
            func(p)
        except Exception:
            pass
    try:
        shutil.rmtree(path, onerror=onerror)
    except Exception:
        try:
            if not os.listdir(path):
                os.rmdir(path)
        except Exception:
            pass

def _is_empty_dir(path: str) -> bool:
    try:
        return os.path.isdir(path) and len(os.listdir(path)) == 0
    except Exception:
        return False

def _prune_empty_branch_up_to_root(start_dir: str) -> None:
    """
    –ü—ñ–¥—ñ–π–º–∞—î—Ç—å—Å—è –≤–≥–æ—Ä—É –≤—ñ–¥ start_dir —ñ –≤–∏–¥–∞–ª—è—î –í–°–Ü –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–∫–∏,
    –¥–æ–∫–∏ –Ω–µ –¥—ñ–π–¥–µ –¥–æ TESTS_ROOT (–π–æ–≥–æ –Ω–µ —á—ñ–ø–∞—î).
    """
    try:
        cur = start_dir
        tests_root_abs = os.path.abspath(TESTS_ROOT)
        while True:
            if not os.path.isdir(cur):
                break
            # —è–∫—â–æ –Ω–µ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ—Å—å
            try:
                if os.listdir(cur):
                    break
            except Exception:
                break

            # –ø–æ—Ä–æ–∂–Ω—è —Ç–µ–∫–∞ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
            try:
                os.rmdir(cur)
            except Exception:
                # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–∞–≤ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ
                _safe_rmtree(cur)

            parent = os.path.dirname(cur)
            if not parent or os.path.abspath(parent) == tests_root_abs or parent == cur:
                break
            cur = parent
    except Exception as e:
        logger.warning("Prune upward failed: %s", e)

# --- –õ–æ–∫–∞–ª—å–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä —Ç–µ–∫ –¥–ª—è —Ä–µ–∂–∏–º—É ¬´–ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç¬ª (—Å–≤—ñ–π –ø—Ä–µ—Ñ—ñ–∫—Å) ---

def _move_browser_kb(path):
    """
    –ë—Ä–∞—É–∑–µ—Ä —Ç–µ–∫ –¥–ª—è —Ä–µ–ª–æ–∫–∞—Ü—ñ—ó:
      - –ø–æ–∫–∞–∑—É—î –ª–∏—à–µ ¬´—Å–ø—Ä–∞–≤–∂–Ω—ñ¬ª —Ä–æ–∑–¥—ñ–ª–∏;
      - —Ö–æ–≤–∞—î –ø–∞–ø–∫–∏-–∫–∞—Ä—Ç–∏–Ω–∫–∏:
          * –Ω–∞–∑–≤–∞ –∫–∞—Ç–∞–ª–æ–≥—É –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ base-name –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON —É —Ç—ñ–π —Å–∞–º—ñ–π —Ç–µ—Ü—ñ,
          * –∞–±–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '#' / '_' (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å),
          * –∞–±–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ '.comments'.
    """
    abs_dir = os.path.join(TESTS_ROOT, *path) if path else TESTS_ROOT
    try:
        items = os.listdir(abs_dir)
    except FileNotFoundError:
        items = []

    # –∑–±–µ—Ä–µ–º–æ –º–Ω–æ–∂–∏–Ω—É base-name —Ç–µ—Å—Ç–æ–≤–∏—Ö JSON —É –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ
    json_basenames = set()
    for fname in items:
        if _is_test_json(fname):
            json_basenames.add(os.path.splitext(fname)[0].lower())

    # –ø—ñ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
    subdirs = []
    for name in items:
        p = os.path.join(abs_dir, name)
        if not os.path.isdir(p):
            continue

        low = name.lower()

        # 1) –ø–∞–ø–∫–∞ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –º–∞—î —Ä—ñ–≤–Ω–æ —Ç–∞–∫—É –∂ –Ω–∞–∑–≤—É, —è–∫ JSON –ø–æ—Ä—É—á
        if low in json_basenames:
            continue
        # 2) —Å–ª—É–∂–±–æ–≤—ñ –∫–∞—Ç–∞–ª–æ–≥–∏ (–≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)
        if name.startswith("#") or name.startswith("_") or low.endswith(".comments"):
            continue

        subdirs.append(name)

    subdirs.sort(key=lambda s: s.lower())

    rows = [[InlineKeyboardButton(f"üìÅ {name}", callback_data=f"vip_move_open|{name}")] for name in subdirs]
    ctrl = []
    if path:
        ctrl.append(InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_move_up"))
    ctrl.append(InlineKeyboardButton("‚úÖ –û–±—Ä–∞—Ç–∏ —Ç—É—Ç", callback_data="vip_move_choose_here"))
    rows.append(ctrl)
    return InlineKeyboardMarkup(rows)

# --- –ü–£–ë–õ–Ü–ß–ù–Ü –•–ï–ù–î–õ–ï–†–ò ---

async def vip_edit_move_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°—Ç–∞—Ä—Ç –º–µ–Ω—é –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ç–µ—Å—Ç—É.
    –ó–±–µ—Ä—ñ–≥–∞—î item —É context.user_data['vip_move_item'] —ñ –ø–æ–∫–∞–∑—É—î –∫–æ—Ä–æ—Ç–∫—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–∏–∫–∞
    owners = _load_owners()
    rel = items[idx]["rel"]
    meta = owners.get(rel) or {}
    owner_id = meta.get("owner_id")
    if owner_id != query.from_user.id:
        await query.message.reply_text("üîí –õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏ —Ç–µ—Å—Ç –≤ —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª.")
        return

    context.user_data["vip_move_item"] = items[idx]
    context.user_data["vip_move_browse_path"] = []

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÅ –†–æ–∑–¥—ñ–ª —ñ—Å–Ω—É—î", callback_data=f"vip_move_pick|{idx}")],
        [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª", callback_data=f"vip_edit|{idx}")],
    ])
    await query.message.reply_text(
        "‚ÑπÔ∏è –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É —â–µ –Ω–µ–º–∞—î ‚Äî —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ —É –¥–µ—Ä–µ–≤—ñ —Ç–µ—Å—Ç—ñ–≤, "
        "–ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —Å—é–¥–∏ –π –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç.\n\n"
        "–©–æ —Ä–æ–±–∏–º–æ –∑–∞—Ä–∞–∑?",
        reply_markup=kb
    )

async def vip_move_pick(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä —Ç–µ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É —Ü—ñ–ª—å–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    context.user_data["vip_move_browse_path"] = context.user_data.get("vip_move_browse_path") or []
    kb = _move_browser_kb(context.user_data["vip_move_browse_path"])
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=kb)

async def vip_move_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∞–ø–∫—É –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è (–∫–ª—ñ–∫ –ø–æ 'üìÅ name')."""
    query = update.callback_query
    await query.answer()
    name = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    path = context.user_data.get("vip_move_browse_path") or []
    path.append(name)
    context.user_data["vip_move_browse_path"] = path
    kb = _move_browser_kb(path)
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=kb)

async def vip_move_up(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—ñ–¥–Ω—è—Ç–∏—Å—å –≤–≥–æ—Ä—É –≤ —Ä–µ–∂–∏–º—ñ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    path = context.user_data.get("vip_move_browse_path") or []
    if path:
        path.pop()
    context.user_data["vip_move_browse_path"] = path
    kb = _move_browser_kb(path)
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=kb)

async def vip_move_choose_here(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–µ–∫–∏ —ñ —Å–∞–º–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è:
      - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ JSON
      - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ —Ç–µ–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (<name>, #<name>, _<name>)
      - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ comments (<name>.comments)
      - –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ docx —ñ docx.meta
      - –æ–Ω–æ–≤–ª—é—î–º–æ _owners.json –∫–ª—é—á (rel)
      - –æ–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥–∏
      - –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –≥—ñ–ª–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —É–≤–µ—Ä—Ö –¥–æ TESTS_ROOT
      - –≤—ñ–¥—Ä–∞–∑—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –û–ù–û–í–õ–ï–ù–£ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ —Ç–µ—Å—Ç—ñ–≤
    """
    query = update.callback_query
    await query.answer()

    item = context.user_data.get("vip_move_item")
    if not item:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
        return

    name = item["name"]
    old_path = item["abs_path"]
    old_dir  = item["abs_dir"]

    path = context.user_data.get("vip_move_browse_path") or []
    new_dir = os.path.join(TESTS_ROOT, *path) if path else TESTS_ROOT
    os.makedirs(new_dir, exist_ok=True)
    new_path = os.path.join(new_dir, f"{name}.json")

    if os.path.exists(new_path):
        await query.message.reply_text("‚ö†Ô∏è –£ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–µ—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—î —Ñ–∞–π–ª —ñ–∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª.")
        return

    owners = _load_owners()
    old_rel = _relative_to_tests(old_path)
    meta = owners.get(old_rel) or {}
    if meta.get("owner_id") != query.from_user.id:
        await query.message.reply_text("üîí –õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏ —Ç–µ—Å—Ç –≤ —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª.")
        return

    # 1) JSON
    try:
        shutil.move(old_path, new_path)
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª: {e}")
        return

    # 2) —Ç–µ–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    for img_dir_name in (name, f"#{name}", f"_{name}"):
        src = os.path.join(old_dir, img_dir_name)
        dst = os.path.join(new_dir, img_dir_name)
        try:
            if os.path.isdir(src):
                if os.path.exists(dst):
                    _safe_rmtree(dst)
                shutil.move(src, dst)
        except Exception as e:
            logger.warning("Move images folder failed: %s", e)

    # 3) comments
    src_comments = os.path.join(old_dir, f"{name}.comments")
    dst_comments = os.path.join(new_dir, f"{name}.comments")
    try:
        if os.path.isdir(src_comments):
            if os.path.exists(dst_comments):
                _safe_rmtree(dst_comments)
            shutil.move(src_comments, dst_comments)
    except Exception as e:
        logger.warning("Move comments folder failed: %s", e)

    # 4) docx/meta
    safe = _safe_filename(name)
    for fn in (f"{safe}.docx", f"{safe}.docx.meta.json"):
        src = os.path.join(old_dir, fn)
        dst = os.path.join(new_dir, fn)
        try:
            if os.path.exists(src):
                shutil.move(src, dst)
        except Exception as e:
            logger.warning("Move export file failed: %s", e)

    # 5) owners
    new_rel = _relative_to_tests(new_path)
    owners[new_rel] = meta
    owners.pop(old_rel, None)
    _save_owners(owners)

    # 6) –∫–∞—Ç–∞–ª–æ–≥–∏ (–ø–µ—Ä–µ–∑–±—ñ—Ä –¥–µ—Ä–µ–≤–∞ —â–æ–± –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é/–±—Ä–∞—É–∑–µ—Ä –æ–Ω–æ–≤–∏–ª–∏—Å—å)
    try:
        context.bot_data["tests_catalog"] = discover_tests(TESTS_ROOT)
        context.bot_data["tests_tree"] = discover_tests_hierarchy(TESTS_ROOT)
    except Exception:
        _refresh_catalogs(context)

    # 7) –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –≥—ñ–ª–∫—É —É–≤–µ—Ä—Ö –¥–æ TESTS_ROOT
    try:
        # old_dir –º—ñ–≥ —Å–ø–æ—Ä–æ–∂–Ω—ñ—Ç–∏; –ø—Ä–∏–±–µ—Ä–µ–º–æ –π–æ–≥–æ —ñ –≤—Å—ñ—Ö –ø–æ—Ä–æ–∂–Ω—ñ—Ö –±–∞—Ç—å–∫—ñ–≤ –¥–æ tests/
        _prune_empty_branch_up_to_root(old_dir)
    except Exception as e:
        logger.warning("Prune empty branch upward failed: %s", e)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞–Ω—É
    for k in ("vip_move_item", "vip_move_browse_path"):
        context.user_data.pop(k, None)

    # 8) –æ–Ω–æ–≤–∏–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ —Ç–µ—Å—Ç—ñ–≤, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±—Ä–∞—É–∑–µ—Ä—ñ
    try:
        tree = context.bot_data.get("tests_tree")
        if not tree:
            tree = discover_tests_hierarchy(TESTS_ROOT)
            context.bot_data["tests_tree"] = tree

        path = context.user_data.get("browse_path", [])
        cur_path = list(path)
        while True:
            subfolders, tests, _ = build_listing_for_path(tree, cur_path)
            if subfolders is not None:
                break
            if not cur_path:
                break
            cur_path.pop()

        header = "üìÇ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∞–±–æ —Ç–µ—Å—Ç"
        if cur_path != path:
            context.user_data["browse_path"] = cur_path
        await query.message.reply_text(header, reply_markup=browse_menu(cur_path, subfolders, tests))
    except Exception as e:
        logger.warning("Failed to send refreshed browse keyboard: %s", e)

    await query.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç ¬´{name}¬ª –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É: `/{new_rel}`.\n"
        "–£—Å—ñ –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –ø–∞–ø–∫–∏ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.\n"
        "–ü–æ—Ä–æ–∂–Ω—ñ —Å—Ç–∞—Ä—ñ —Ä–æ–∑–¥—ñ–ª–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏–±—Ä–∞–Ω–æ –¥–æ –∫–æ—Ä–µ–Ω—è tests/."
    )
