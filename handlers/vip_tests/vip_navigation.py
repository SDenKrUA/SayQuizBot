# handlers/vip_tests/vip_navigation.py
import os
from telegram import Update
from telegram.ext import ContextTypes

from .vip_constants import TESTS_ROOT, ILLEGAL_WIN_CHARS
from .vip_ui import _folder_browser_kb, _images_prompt_kb
from .vip_storage import (
    _relative_to_tests,
    _load_owners,
    _save_owners,
    _refresh_catalogs,
    save_meta_for_rel,
)

def _sanitize_folder_name(name: str) -> str:
    name = (name or "").strip()
    if not name:
        return ""
    if any(ch in ILLEGAL_WIN_CHARS for ch in name):
        return ""
    if name.startswith("üìÅ ") or name.startswith("‚ûï "):
        return ""
    return name

async def vip_choose_folder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data["vip_browse_path"] = []
    await query.message.reply_text(
        "üìÇ –û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª:",
        reply_markup=_folder_browser_kb(context.user_data["vip_browse_path"])
    )

async def vip_nav_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    parts = query.data.split("|", 1)
    if len(parts) != 2:
        return
    name = parts[1].strip()
    path = context.user_data.get("vip_browse_path", [])
    path = list(path) + [name]
    context.user_data["vip_browse_path"] = path
    where = os.path.join(*path) if path else "/"
    await query.message.reply_text(
        f"üìÇ {where}",
        reply_markup=_folder_browser_kb(path)
    )

async def vip_nav_up(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    path = context.user_data.get("vip_browse_path", [])
    if path:
        path.pop()
    context.user_data["vip_browse_path"] = path
    where = os.path.join(*path) if path else "/"
    await query.message.reply_text(
        f"üìÇ {where}",
        reply_markup=_folder_browser_kb(path)
    )

async def vip_choose_here(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    path = context.user_data.get("vip_browse_path", [])
    abs_dir = os.path.join(TESTS_ROOT, *path) if path else TESTS_ROOT
    os.makedirs(abs_dir, exist_ok=True)

    pending = context.user_data.get("vip_pending")
    relocate = context.user_data.get("vip_relocate_ctx")

    # --- –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–ì–û –¢–ï–°–¢–£ –ó VIP-–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø ---
    if pending:
        name = pending["name"]
        data = pending["data"]
        json_path = os.path.join(abs_dir, f"{name}.json")

        if os.path.exists(json_path):
            await query.message.reply_text("‚ö†Ô∏è –£ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–µ—Ü—ñ —Ñ–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ç–µ–∫—É.")
            await query.message.reply_text("üìÇ –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=_folder_browser_kb(path))
            return

        import json
        try:
            with open(json_path, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —Ñ–∞–π–ª: {e}")
            return

        # ‚úÖ –ó–ê–ü–ò–°–ê–¢–ò –í–õ–ê–°–ù–ò–ö–ê –¢–ï–°–¢–£ –í _owners.json
        try:
            rel_key = _relative_to_tests(json_path)
            save_meta_for_rel(rel_key, {
                "owner_id": query.from_user.id,
                "trusted": [],
                "trusted_usernames": [],
                "pending": [],
            })
        except Exception:
            # –±–µ–∑ –ø–∞–Ω—ñ–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ ‚Äî –∞–ª–µ —Ç–µ—Å—Ç –º–æ–∂–µ –Ω–µ –∑‚Äô—è–≤–∏—Ç–∏—Å—å —É ¬´–ú–æ—ó —Ç–µ—Å—Ç–∏¬ª
            pass

        # –û–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–∏/–¥–µ—Ä–µ–≤–æ, –∞–±–∏ —Ç–µ—Å—Ç –æ–¥—Ä–∞–∑—É –∑‚Äô—è–≤–∏–≤—Å—è —É –º–µ–Ω—é/–æ—Ñ—ñ—Å—ñ
        try:
            _refresh_catalogs(context)
        except Exception:
            pass

        # –ø—ñ–¥ ZIP
        context.user_data["vip_images_dir"] = os.path.join(abs_dir, name)
        context.user_data["awaiting_vip_images"] = True
        for k in ("vip_pending", "awaiting_vip_json"):
            context.user_data.pop(k, None)

        rel_pretty = os.path.relpath(json_path, TESTS_ROOT)
        rel_pretty = rel_pretty.replace("\\", "/")
        await query.message.reply_text(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: /{rel_pretty}")
        await query.message.reply_text("üñº –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É?", reply_markup=_images_prompt_kb())
        return

    # --- –ü–ï–†–ï–ú–Ü–©–ï–ù–ù–Ø (—Ä–µ–ª–æ–∫–∞—Ü—ñ—è) –Ü–°–ù–£–Æ–ß–û–ì–û –¢–ï–°–¢–£ ---
    if relocate:
        src_json = relocate.get("src_json")
        name = relocate.get("name")
        if not src_json or not os.path.isfile(src_json):
            await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.")
            return

        dst_json = os.path.join(abs_dir, f"{name}.json")
        if os.path.exists(dst_json):
            await query.message.reply_text("‚ö†Ô∏è –£ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–µ—Ü—ñ —Ñ–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ç–µ–∫—É.")
            await query.message.reply_text("üìÇ –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª:", reply_markup=_folder_browser_kb(path))
            return

        import shutil
        try:
            shutil.move(src_json, dst_json)
        except Exception as e:
            await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ JSON: {e}")
            return

        # –∫–∞—Ä—Ç–∏–Ω–∫–∏
        try:
            old_images = os.path.join(os.path.dirname(src_json), name)
            new_images = os.path.join(abs_dir, name)
            if os.path.isdir(old_images):
                if os.path.exists(new_images):
                    shutil.rmtree(new_images, ignore_errors=True)
                shutil.move(old_images, new_images)
        except Exception:
            pass

        # —Å—É–ø—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏
        try:
            src_dir = os.path.dirname(src_json)
            base = name
            for fn in (f"{base}.docx", f"{base}.docx.meta.json", f"{base}.comments"):
                p = os.path.join(src_dir, fn)
                if os.path.isdir(p):
                    shutil.move(p, os.path.join(abs_dir, fn))
                elif os.path.isfile(p):
                    shutil.move(p, os.path.join(abs_dir, fn))
        except Exception:
            pass

        # –æ–Ω–æ–≤–∏—Ç–∏ owners —ñ –∫–∞—Ç–∞–ª–æ–≥–∏
        try:
            owners = _load_owners()
            old_key = _relative_to_tests(src_json)
            new_key = _relative_to_tests(dst_json)
            meta = owners.pop(old_key, owners.get(old_key, {}))
            owners[new_key] = meta
            _save_owners(owners)
            _refresh_catalogs(context)
        except Exception:
            pass

        for k in ("vip_browse_path", "vip_relocate_ctx"):
            context.user_data.pop(k, None)

        rel_dir = os.path.relpath(abs_dir, TESTS_ROOT).replace("\\", "/")
        await query.message.reply_text(f"‚úÖ –¢–µ—Å—Ç ¬´{name}¬ª –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ /{rel_dir}")
        return

    await query.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—É—Ç.")

async def vip_create_root(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_vip_root_folder_name"] = True
    await query.message.reply_text("üìÅ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É —É –∫–æ—Ä–µ–Ω—ñ (–∞–±–æ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è):")

async def vip_handle_root_folder_name_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get("awaiting_vip_root_folder_name"):
        return
    text = (update.message.text or "").strip()
    if text in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥"}:
        context.user_data.pop("awaiting_vip_root_folder_name", None)
        await update.message.reply_text("‚ùé –°–∫–∞—Å–æ–≤–∞–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—É.")
        return

    name = (text or "").strip()
    if not name or any(ch in ILLEGAL_WIN_CHARS for ch in name) or name.startswith(("üìÅ ", "‚ûï ")):
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞. –ó–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏: <>:\"/\\|?*\n–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É, –∞–±–æ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.")
        return

    abs_dir = os.path.join(TESTS_ROOT, name)
    try:
        os.makedirs(abs_dir, exist_ok=False)
        await update.message.reply_text(f"‚úÖ –†–æ–∑–¥—ñ–ª ¬´{name}¬ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —É –∫–æ—Ä–µ–Ω—ñ.")
    except FileExistsError:
        await update.message.reply_text("‚ÑπÔ∏è –¢–∞–∫–∞ –ø–∞–ø–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.")
    finally:
        context.user_data.pop("awaiting_vip_root_folder_name", None)
