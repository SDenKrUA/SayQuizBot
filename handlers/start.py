from telegram import Update
from telegram.ext import ContextTypes
from utils.i18n import t
from utils.loader import discover_tests_hierarchy, build_listing_for_path, discover_tests
from utils.keyboards import browse_menu, stats_clear_inline_kb, stats_clear_confirm_kb

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äî –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ—á–∏—Ç—É—î –¥–µ—Ä–µ–≤–æ tests/ —ñ –ø–æ–∫–∞–∑—É—î –∫–æ—Ä—ñ–Ω—å —á–µ—Ä–µ–∑ —Å–ø—ñ–ª—å–Ω–∏–π browse_menu()
    """
    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data.clear()
    lang = context.bot_data.get("lang", "uk")

    # üîÑ –ü—Ä–∏–º—É—Å–æ–≤–∏–π —Ä–µ—Ñ—Ä–µ—à –¥–µ—Ä–µ–≤–∞ —ñ –∫–∞—Ç–∞–ª–æ–≥—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    tree = discover_tests_hierarchy("tests")
    context.bot_data["tests_tree"] = tree

    catalog = discover_tests("tests")
    context.bot_data["tests_catalog"] = catalog

    # –ö–æ—Ä—ñ–Ω—å
    path = []
    context.user_data["browse_path"] = path
    subfolders, tests, _ = build_listing_for_path(tree, path)

    header = "üìÇ –û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –∞–±–æ —Ç–µ—Å—Ç"
    if not subfolders and not tests:
        header += "\n(—Ü–µ–π —Ä–æ–∑–¥—ñ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π)"

    await update.message.reply_text(
        t(lang, "welcome") + "\n\n" + header,
        reply_markup=browse_menu(path, subfolders, tests)
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    lang = context.bot_data.get("lang", "uk")
    await update.message.reply_text(t(lang, "menu_help", test="–ó–∞–≥–∞–ª—å–Ω–∞", count=0))

async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /rules"""
    lang = context.bot_data.get("lang", "uk")
    rules_text = (
        "üìö –ü—Ä–∞–≤–∏–ª–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:\n\n"
        "1. –û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –∑—ñ —Å–ø–∏—Å–∫—É\n"
        "2. –í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ (–Ω–∞–≤—á–∞–Ω–Ω—è/—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)\n"
        "3. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "4. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "üìñ –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è: –º–æ–∂–Ω–∞ –≤–∏–≤—á–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ä—è–¥–∫—É –∞–±–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ.\n"
        "üìù –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: —ñ–º—ñ—Ç–∞—Ü—ñ—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ –æ–±–º–µ–∂–µ–Ω–∏–º —á–∞—Å–æ–º.\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å —Ç–∞ –ø–æ–º–∏–ª–∫–∏."
    )
    await update.message.reply_text(rules_text)

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats"""
    from handlers.statistics_db import get_user_results
    lang = context.bot_data.get("lang", "uk")
    
    user_id = update.effective_user.id
    results = await get_user_results(user_id, limit=10)
    
    if not results:
        await update.message.reply_text(t(lang, "no_stats_yet"), reply_markup=stats_clear_inline_kb())
        return
    
    stats_text = t(lang, "stats_header", test="–£—Å—ñ —Ç–µ—Å—Ç–∏", correct=0, total=0, acc=0, best=0) + "\n\n"
    
    total_correct = 0
    total_answered = 0
    best_streak = 0
    
    for i, result in enumerate(results, 1):
        total_correct += result['score'] or 0
        total_answered += result['total_questions'] or 0
        best_streak = max(best_streak, result.get('current_streak', 0) or 0)
        
        stats_text += (
            f"{i}. {result['test_name']}: {result['score']}/{result['total_questions']} "
            f"({(result['percent'] or 0):.1f}%)\n"
        )
    
    accuracy = (total_correct / total_answered * 100) if total_answered > 0 else 0
    
    stats_text += f"\nüìä –ó–∞–≥–∞–ª–æ–º: {total_correct}/{total_answered} ({accuracy:.1f}%)"
    stats_text += f"\nüî• –ù–∞–π–∫—Ä–∞—â–∞ —Å–µ—Ä—ñ—è: {best_streak}"
    
    await update.message.reply_text(stats_text, reply_markup=stats_clear_inline_kb())

# ====== –Ü–Ω–ª–∞–π–Ω: –æ—á–∏—Å—Ç–∫–∞ –≤—Å—ñ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ======

async def stats_clear_all_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üßπ –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ –≤—Å—ñ—Ö —Ç–µ—Å—Ç–∞—Ö? –î—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
        reply_markup=stats_clear_confirm_kb()
    )

async def stats_clear_all_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏/—Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    from handlers.statistics_db import delete_all_results
    query = update.callback_query
    await query.answer()

    choice = (query.data.split("|", 1)[1] if "|" in query.data else "no").strip()
    if choice != "yes":
        await query.message.reply_text("‚ùé –û—á–∏—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    user_id = query.from_user.id
    deleted = await delete_all_results(user_id)
    if deleted > 0:
        await query.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {deleted}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–∏—â–µ–Ω–æ.")
    else:
        await query.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å —ñ —Ç–∞–∫ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")
