import io
import json
from telegram import Update
from telegram.ext import ContextTypes

def _make_sample_json():
    return [
        {
            "question": "1. Sample question one?",
            "answers": [
                {"text": "Option A", "correct": False},
                {"text": "Option B", "correct": True},
                {"text": "Option C", "correct": False},
                {"text": "Option D", "correct": False}
            ]
        },
        {
            "question": "2. Sample question two?",
            "answers": [
                {"text": "Option A", "correct": False},
                {"text": "Option B", "correct": False},
                {"text": "Option C", "correct": True},
                {"text": "Option D", "correct": False}
            ]
        },
        {
            "question": "3. Sample question three?",
            "answers": [
                {"text": "Option A", "correct": True},
                {"text": "Option B", "correct": False},
                {"text": "Option C", "correct": False},
                {"text": "Option D", "correct": False}
            ]
        },
        {
            "question": "4. Sample question four?",
            "answers": [
                {"text": "Option A", "correct": False},
                {"text": "Option B", "correct": False},
                {"text": "Option C", "correct": False},
                {"text": "Option D", "correct": True}
            ]
        }
    ]

async def vip_send_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    payload = json.dumps(_make_sample_json(), ensure_ascii=False, indent=2)
    bio = io.BytesIO(payload.encode("utf-8"))
    bio.name = "<test>.json"
    caption = (
        "üìé –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É —Ç–µ—Å—Ç—É (<test>.json).\n"
        "‚Ä¢ JSON-–º–∞—Å–∏–≤ –ø–∏—Ç–∞–Ω—å\n‚Ä¢ –ö–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –º–∞—î 'question' —Ç–∞ 'answers'\n"
        "‚Ä¢ –£ –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö —Ö–æ—á–∞ –± –æ–¥–∏–Ω 'correct': true\n"
        "‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 4 –ø–∏—Ç–∞–Ω–Ω—è"
    )
    await query.message.reply_document(document=bio, caption=caption)

async def vip_start_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_vip_json"] = True
    await query.message.reply_text(
        "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON (*.json).\n"
        "–ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è –∑–∞–ø–∏—Ç–∞—é, –∫—É–¥–∏ —Å–∞–º–µ –π–æ–≥–æ –¥–æ–¥–∞—Ç–∏."
    )
