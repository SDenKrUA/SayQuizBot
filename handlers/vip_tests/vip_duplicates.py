import os
import shutil
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_storage import (
    _load_owners, _save_owners, _relative_to_tests, _refresh_catalogs, _cleanup_empty_dirs
)
from .vip_ui import _images_prompt_kb

logger = logging.getLogger("test_bot")

async def vip_rewrite_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return
    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    target = items[idx]
    context.user_data["vip_rewrite_target"] = target
    context.user_data["awaiting_vip_rewrite"] = True
    await query.message.reply_text(
        f"‚úèÔ∏è –ü–µ—Ä–µ–∑–∞–ø–∏—Å —Ç–µ—Å—Ç—É **{target['name']}**.\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ñ–∞–π–ª JSON –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É."
    )

async def vip_dup_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    dup = context.user_data.get("vip_dup") or {}
    rel = dup.get("rel") or "?"
    await query.message.reply_text(
        f"üìÅ –¢–µ—Å—Ç —Ä–æ–∑–º—ñ—â–µ–Ω–æ —Ç—É—Ç: `/{rel}`\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –¥–µ—Ä–µ–≤–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –π–æ–≥–æ.",
    )

async def vip_dup_replace(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if "vip_dup" not in context.user_data:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç–∞.")
        return
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –¢–∞ —Å–∞–º–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è", callback_data="vip_replace_same")],
        [InlineKeyboardButton("üóÇ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª", callback_data="vip_replace_other")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])
    await query.message.reply_text("–î–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é —Ç–µ—Å—Ç—É?", reply_markup=kb)

async def vip_replace_same(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    import json
    query = update.callback_query
    await query.answer()
    dup = context.user_data.get("vip_dup") or {}
    old_path = dup.get("old_path")
    name = dup.get("name")
    data = dup.get("data")
    old_dir = dup.get("old_dir")

    if not old_path or not os.path.exists(old_path):
        await query.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É.")
        return

    try:
        with open(old_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —Ñ–∞–π–ª: {e}")
        return

    _refresh_catalogs(context)

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞–Ω–∏
    for k in ("vip_dup", "vip_pending", "awaiting_vip_json"):
        context.user_data.pop(k, None)

    # –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ZIP
    if old_dir and name:
        context.user_data["awaiting_vip_images"] = True
        context.user_data["vip_images_dir"] = os.path.join(old_dir, name)
        await query.message.reply_text(
            "üñº –î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É?",
            reply_markup=_images_prompt_kb()
        )

    # –ê–≤—Ç–æ–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ç–µ–∫ (—Ä–∞–ø—Ç–æ–º —Å—Ç–∞–ª–æ –ø–æ—Ä–æ–∂–Ω—å–æ)
    if old_dir:
        _cleanup_empty_dirs(old_dir)

    await query.message.reply_text(f"‚úÖ –¢–µ—Å—Ç **{name}** –æ–Ω–æ–≤–ª–µ–Ω–æ —É —Ç—ñ–π —Å–∞–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.")

async def vip_replace_other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if "vip_dup" not in context.user_data:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—É–±–ª—ñ–∫–∞—Ç–∞.")
        return
    context.user_data["vip_replace_move"] = True
    context.user_data["vip_browse_path"] = []
    from .vip_ui import _folder_browser_kb
    kb = _folder_browser_kb(context.user_data["vip_browse_path"])
    await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç–µ—Å—Ç—É:", reply_markup=kb)

async def _handle_replace_move_choose_here(query, context):
    import json
    from .vip_constants import TESTS_ROOT

    dup = context.user_data.get("vip_dup") or {}
    name = dup.get("name")
    data = dup.get("data")
    old_path = dup.get("old_path")
    old_dir = dup.get("old_dir")

    if not (name and data and old_path and old_dir):
        await query.message.reply_text("‚ùå –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.")
        return

    path = context.user_data.get("vip_browse_path", [])
    new_dir = os.path.join(TESTS_ROOT, *path) if path else TESTS_ROOT
    os.makedirs(new_dir, exist_ok=True)
    new_path = os.path.join(new_dir, f"{name}.json")

    if os.path.exists(new_path):
        await query.message.reply_text("‚ö†Ô∏è –£ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–µ—Ü—ñ —Ñ–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ç–µ–∫—É.")
        return

    try:
        with open(new_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª: {e}")
        return

    # –ü–µ—Ä–µ–º—ñ—Å—Ç–∏–º–æ –ø–∞–ø–∫—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ <old_dir>/<name> ‚Üí <new_dir>/<name>
    old_images = os.path.join(old_dir, name)
    new_images = os.path.join(new_dir, name)
    try:
        if os.path.isdir(old_images):
            if os.path.exists(new_images):
                shutil.rmtree(new_images, ignore_errors=True)
            shutil.move(old_images, new_images)
    except Exception as e:
        logger.warning("Move images folder failed: %s", e)

    try:
        if os.path.exists(old_path):
            os.remove(old_path)
    except Exception as e:
        logger.warning("Remove old JSON failed: %s", e)

    owners = _load_owners()
    old_key = _relative_to_tests(old_path)
    new_key = _relative_to_tests(new_path)
    meta = owners.pop(old_key, {"owner_id": query.from_user.id, "trusted": []})
    owners[new_key] = meta
    _save_owners(owners)

    _refresh_catalogs(context)

    # –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ ZIP —É –Ω–æ–≤–æ–º—É –º—ñ—Å—Ü—ñ
    context.user_data["awaiting_vip_images"] = True
    context.user_data["vip_images_dir"] = os.path.join(new_dir, name)
    await query.message.reply_text(
        "üñº –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É —Ç—É—Ç?",
        reply_markup=_images_prompt_kb()
    )

    # –ê–≤—Ç–æ–ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ç–µ–∫ –¥–æ–≥–æ—Ä–∏
    _cleanup_empty_dirs(old_dir)

    for k in ("vip_dup", "vip_browse_path", "vip_replace_move", "vip_pending", "awaiting_vip_json"):
        context.user_data.pop(k, None)

    await query.message.reply_text(
        f"‚úÖ –¢–µ—Å—Ç **{name}** –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É: `/{new_key}`.\n"
        "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫—â–æ –±—É–ª–∏) —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ."
    )
