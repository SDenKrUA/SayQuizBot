# handlers/vip_tests/vip_edit_menu.py
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_ui import _images_prompt_kb

# ===== Helpers for single control-message UI =====

def _set_ctrl_from_query(context: ContextTypes.DEFAULT_TYPE, query) -> None:
    """
    –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –∫–µ—Ä—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (chat_id, message_id) –Ω–∞ –±–∞–∑—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ callback'–∞.
    """
    context.user_data["vip_ctrl"] = {
        "chat_id": query.message.chat_id,
        "message_id": query.message.message_id,
    }

def _get_ctrl(context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data.get("vip_ctrl") or {}
    cid = data.get("chat_id")
    mid = data.get("message_id")
    if isinstance(cid, int) and isinstance(mid, int):
        return cid, mid
    return None, None

async def _edit_ctrl_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, reply_markup=None):
    """
    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–µ—Ä—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –Ø–∫—â–æ –Ω–µ–º–∞—î ctrl ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ query.message.
    """
    query = update.callback_query if update and update.callback_query else None
    chat_id, message_id = _get_ctrl(context)
    if chat_id and message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
            )
            return
        except Exception:
            pass

    if query and query.message:
        _set_ctrl_from_query(context, query)
        try:
            await query.message.edit_text(text=text, reply_markup=reply_markup)
            return
        except Exception:
            m = await query.message.reply_text(text=text, reply_markup=reply_markup)
            context.user_data["vip_ctrl"] = {"chat_id": m.chat_id, "message_id": m.message_id}
            return

    if update and update.message:
        m = await update.message.reply_text(text=text, reply_markup=reply_markup)
        context.user_data["vip_ctrl"] = {"chat_id": m.chat_id, "message_id": m.message_id}


def _images_prompt_kb_for_edit(idx: int) -> InlineKeyboardMarkup:
    """
    –í–∞—Ä—ñ–∞–Ω—Ç –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –∫–æ–ª–∏ –ø—Ä–∏–π—à–ª–∏ –∑ –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
    ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª ‚Üí –Ω–∞–∑–∞–¥ —É –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É.
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="vip_img_upload")],
        [InlineKeyboardButton("‚è≠Ô∏è –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –ø—ñ–∑–Ω—ñ—à–µ", callback_data="vip_img_later")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vip_edit|{idx}"),
         InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])


async def vip_edit_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ VIP-—Ç–µ—Å—Ç—É:
    - –ü–µ—Ä–µ–∑–∞–ø–∏—Å —Ç–µ—Å—Ç—É (JSON)
    - –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (ZIP)
    - –î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª (image/audio/video/doc) ‚Üí –ø–æ–ø—Ä–æ—Å–∏–º–æ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è
    - –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –º–µ–¥—ñ–∞—Ç–µ–∫–∏ —Ç–µ—Å—Ç—É (image*/audio*/video*/doc*)
    - –î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    - –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª (–ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç —Ü—ñ–ª–∫–æ–º)
    """
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await _edit_ctrl_text(update, context, "‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    name = items[idx]["name"]
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∑–∞–ø–∏—Å —Ç–µ—Å—Ç—É", callback_data=f"vip_edit_rewrite|{idx}")],
        [InlineKeyboardButton("üñº –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (ZIP)", callback_data=f"vip_edit_addimgs|{idx}")],
        [InlineKeyboardButton("üìÑ –î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª", callback_data=f"vip_edit_addfile|{idx}")],
        [InlineKeyboardButton("üßπ –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏", callback_data=f"vip_media_wipe|{idx}")],
        [InlineKeyboardButton("üë• –î–æ–≤—ñ—Ä–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data=f"vip_trusted|{idx}")],
        [InlineKeyboardButton("üìÇ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–¥—ñ–ª", callback_data=f"vip_edit_move|{idx}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vip_go|{idx}"),
         InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])
    await _edit_ctrl_text(update, context, f"‚öôÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç—É ¬´{name}¬ª. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)


async def vip_edit_rewrite_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç—É—î —Å—Ü–µ–Ω–∞—Ä—ñ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É (–∞–Ω–∞–ª–æ–≥ vip_rewrite|idx)."""
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await _edit_ctrl_text(update, context, "‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    target = items[idx]
    context.user_data["vip_rewrite_target"] = target
    context.user_data["awaiting_vip_rewrite"] = True

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"vip_edit|{idx}"),
         InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])

    await _edit_ctrl_text(
        update, context,
        text=(
            f"‚úèÔ∏è –ü–µ—Ä–µ–∑–∞–ø–∏—Å —Ç–µ—Å—Ç—É ¬´{target['name']}¬ª.\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ñ–∞–π–ª JSON –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É."
        ),
        reply_markup=kb
    )


async def vip_edit_add_images_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–º–∏–∫–∞—î —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ZIP-–∞—Ä—Ö—ñ–≤—É –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É."""
    query = update.callback_query
    await query.answer()

    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return

    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await _edit_ctrl_text(update, context, "‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item = items[idx]
    name = item["name"]
    abs_dir = item["abs_dir"]

    context.user_data["vip_images_dir"] = os.path.join(abs_dir, name)
    context.user_data["awaiting_vip_images"] = True

    await _edit_ctrl_text(
        update, context,
        text=(
            "üì¶ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞—Ä—Ö—ñ–≤ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ ZIP (*.zip).\n"
            "–Ü–º–µ–Ω–∞ –º–∞—é—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, image12.jpg, 12.png)."
        ),
        reply_markup=_images_prompt_kb_for_edit(idx)
    )
