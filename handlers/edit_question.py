import os
import json
import logging
from typing import Dict, List, Optional, Tuple

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ApplicationHandlerStop

from utils.formatting import format_question_text

logger = logging.getLogger("test_bot")

TESTS_DIR = "tests"
QOWNERS_FILE = os.path.join(TESTS_DIR, "_qowners.json")
IGNORED_JSON_SUFFIXES = (".comments.json", ".docx.meta.json")

MAX_TEXT_LEN = 1000

# –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
IMG_EXTS = ["jpg", "jpeg", "png", "webp", "gif"]
VIDEO_EXTS = ["mp4", "3gp", "avi", "mkv", "webm", "mpeg", "mpg", "m4v", "mov", "ts", "flv"]
AUDIO_EXTS = ["mp3", "wav", "ogg", "m4a", "aac", "flac"]
DOC_EXTS = ["pdf", "docx", "doc", "xlsx"]


# =========================
# Utils / Helpers
# =========================
def _ensure_qowners_file() -> None:
    try:
        os.makedirs(TESTS_DIR, exist_ok=True)
        if not os.path.exists(QOWNERS_FILE):
            with open(QOWNERS_FILE, "w", encoding="utf-8") as f:
                f.write("{}")
    except Exception as e:
        logger.error("[EDIT_Q] ensure_qowners error: %s", e)


def _load_qowners() -> Dict[str, Dict[str, Dict[str, object]]]:
    _ensure_qowners_file()
    try:
        with open(QOWNERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f) or {}
            return data if isinstance(data, dict) else {}
    except Exception as e:
        logger.error("[EDIT_Q] load _qowners.json error: %s", e)
        return {}


def _find_json_for_test(test_dir: str, test_name: str) -> Optional[str]:
    exact = os.path.join(test_dir, f"{test_name}.json")
    if os.path.exists(exact):
        return exact
    try:
        jsons = [
            f for f in os.listdir(test_dir)
            if f.lower().endswith(".json") and not any(f.lower().endswith(suf) for suf in IGNORED_JSON_SUFFIXES)
        ]
    except Exception:
        return None
    if not jsons:
        return None
    low = test_name.lower()
    candidates = sorted(jsons, key=lambda n: (0 if n[:-5].lower() == low else 1, len(n)))
    return os.path.join(test_dir, candidates[0])


def _rel_key(json_path: Optional[str]) -> str:
    if not json_path:
        return ""
    return os.path.relpath(json_path, TESTS_DIR).replace("\\", "/")


def _load_json_list(path: Optional[str]) -> List[dict]:
    if not path or not os.path.exists(path):
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f) or []
            return data if isinstance(data, list) else []
    except Exception as e:
        logger.warning("[EDIT_Q] failed to load %s: %s", path, e)
        return []


def _save_json_list(path: str, items: List[dict]) -> bool:
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(items, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error("[EDIT_Q] failed to save %s: %s", path, e)
        return False


def _combined_questions_and_index_map(
    test_dir: str,
    test_name: str
) -> Tuple[List[dict], int, str, Optional[str], Optional[str], Optional[str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î:
      - –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å (–±–∞–∑–∞ + –∫–∞—Å—Ç–æ–º),
      - –¥–æ–≤–∂–∏–Ω—É –±–∞–∑–∏,
      - rel_base,
      - —à–ª—è—Ö –¥–æ base.json,
      - —à–ª—è—Ö –¥–æ custom.json (—è–∫—â–æ —ñ—Å–Ω—É—î; —ñ–Ω–∞–∫—à–µ None),
      - rel_custom (–∞–±–æ None)
    """
    base_json = _find_json_for_test(test_dir, test_name)
    custom_json = os.path.join(test_dir, f"{test_name} (custom).json")

    base_questions = _load_json_list(base_json)
    custom_questions = _load_json_list(custom_json) if os.path.exists(custom_json) else []

    questions = (base_questions or []) + (custom_questions or [])
    base_len = len(base_questions)

    rel_base = _rel_key(base_json)
    rel_custom = _rel_key(custom_json) if os.path.exists(custom_json) else None
    return questions, base_len, rel_base, base_json, custom_json if os.path.exists(custom_json) else None, rel_custom


def _owner_global_indices_for_user(
    user_id: int,
    qowners: Dict[str, Dict[str, Dict[str, object]]],
    rel_base: str,
    base_len: int,
    rel_custom: Optional[str]
) -> List[int]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≥–ª–æ–±–∞–ª—å–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ (1..N) –ø–∏—Ç–∞–Ω—å, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
    """
    result: List[int] = []

    # –ë–∞–∑–æ–≤—ñ
    if rel_base and rel_base in qowners:
        for k, v in qowners[rel_base].items():
            try:
                if int(v.get("user_id")) == int(user_id):
                    idx = int(k)
                    if idx > 0:
                        result.append(idx)
            except Exception:
                continue

    # –ö–∞—Å—Ç–æ–º–Ω—ñ (–∑—Å—É–≤ –Ω–∞ base_len)
    if rel_custom and rel_custom in qowners:
        for k, v in qowners[rel_custom].items():
            try:
                if int(v.get("user_id")) == int(user_id):
                    idx = int(k)
                    if idx > 0:
                        result.append(base_len + idx)
            except Exception:
                continue

    return sorted(set(result))


def _stop_chain(context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª—É—à–∏–º–æ —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–ø–¥–µ–π—Ç—É.
    """
    context.user_data["suppress_test_select_once"] = True
    raise ApplicationHandlerStop


def _media_dirs_for(test_dir: str, test_name: str, base_json_path: Optional[str]) -> Tuple[str, str]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î (base_media_dir, custom_media_dir)
    base_media_dir: tests/<basename(base_json)>
    custom_media_dir: tests/<test_name> (custom)
    """
    # –±–∞–∑–æ–≤–∞ —Ç–µ–∫–∞ –º–µ–¥—ñ–∞ ‚Äî –∑–∞ —Ñ–∞–∫—Ç–∏—á–Ω–æ—é –æ—Å–Ω–æ–≤–æ—é —ñ–º–µ–Ω—ñ JSON (—è–∫ —É state_sync)
    base_dir_name = test_name
    if base_json_path:
        base_dir_name = os.path.splitext(os.path.basename(base_json_path))[0]
    base_media_dir = os.path.join(test_dir, base_dir_name)
    custom_media_dir = os.path.join(test_dir, f"{test_name} (custom)")
    return base_media_dir, custom_media_dir


def _media_candidates_for_q(num: int) -> List[str]:
    """
    –£—Å—ñ –º–æ–∂–ª–∏–≤—ñ —ñ–º–µ–Ω–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è num –ø–æ –≤—Å—ñ—Ö —Ç–∏–ø–∞—Ö (–¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏).
    """
    names = []
    # images
    for pref in ["image", "img", "q"]:
        for ext in IMG_EXTS:
            names.append(f"{pref}{num}.{ext}")
    # video
    for pref in ["video", "vid", "q"]:
        for ext in VIDEO_EXTS:
            names.append(f"{pref}{num}.{ext}")
    # audio
    for pref in ["audio", "aud", "q"]:
        for ext in AUDIO_EXTS:
            names.append(f"{pref}{num}.{ext}")
    # docs
    for pref in ["doc", "document", "q"]:
        for ext in DOC_EXTS:
            names.append(f"{pref}{num}.{ext}")
    return names


def _present_media(media_dir: str, qnum: int) -> List[str]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è (–ø–æ–≤–Ω—ñ —à–ª—è—Ö–∏).
    """
    found = []
    if not media_dir or not os.path.isdir(media_dir):
        return found
    for name in _media_candidates_for_q(qnum):
        p = os.path.join(media_dir, name)
        if os.path.exists(p):
            found.append(p)
    return found


def _delete_media(media_dir: str, qnum: int) -> int:
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è; –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö.
    """
    if not media_dir or not os.path.isdir(media_dir):
        return 0
    removed = 0
    for name in _media_candidates_for_q(qnum):
        p = os.path.join(media_dir, name)
        try:
            if os.path.exists(p):
                os.remove(p)
                removed += 1
        except Exception:
            pass
    return removed


def _save_file_to(path: str, file_obj) -> bool:
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        return True if file_obj and path else False
    except Exception:
        return False


# =========================
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# =========================
def _field_menu_kb(idx: int) -> InlineKeyboardMarkup:
    # ¬´–ú–µ–¥—ñ–∞¬ª –º–∞—î –±—É—Ç–∏ –ø–µ—Ä—à–æ—é
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìé –ú–µ–¥—ñ–∞", callback_data=f"editq_field|media|{idx}")],
        [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f"editq_field|question|{idx}")],
        [
            InlineKeyboardButton("A", callback_data=f"editq_field|ansA|{idx}"),
            InlineKeyboardButton("B", callback_data=f"editq_field|ansB|{idx}"),
            InlineKeyboardButton("C", callback_data=f"editq_field|ansC|{idx}"),
            InlineKeyboardButton("D", callback_data=f"editq_field|ansD|{idx}"),
        ],
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ (1-4)", callback_data=f"editq_field|correct|{idx}"),
        ],
        [
            InlineKeyboardButton("üè∑ –¢–µ–º–∏", callback_data=f"editq_field|topics|{idx}"),
            InlineKeyboardButton("üí° –ü–æ—è—Å–Ω–µ–Ω–Ω—è", callback_data=f"editq_field|explanation|{idx}"),
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="editq_back")],
    ])


def _editq_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="editq_show_all")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="editq_edit"),
         InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="editq_delete")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="editq_back")],
    ])


def _editq_back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="editq_back")]])


def _media_edit_kb(gidx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üóë –ë–µ–∑ –º–µ–¥—ñ–∞", callback_data=f"editq_media_clear|{gidx}")],
        [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="editq_back")],
    ])


# =========================
# Public entry: /edit_question
# =========================
async def editq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    user = update.effective_user
    current_test = context.user_data.get("current_test")
    current_dir = context.user_data.get("current_test_dir")

    if not current_test or not current_dir:
        await msg.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç.")
        return

    # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è/—Ç–µ—Å—Ç—É
    context.user_data.pop("mode", None)

    questions, base_len, rel_base, base_json_path, custom_json_path, rel_custom = _combined_questions_and_index_map(
        current_dir, current_test
    )

    qowners = _load_qowners()
    owned_global = _owner_global_indices_for_user(user.id, qowners, rel_base, base_len, rel_custom)

    if not owned_global:
        await msg.reply_text("‚ÑπÔ∏è –£ —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –≤–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –≤–ª–∞—Å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.", reply_markup=_editq_back_kb())
        return

    nums_text = ", ".join(str(i) for i in owned_global)
    await msg.reply_text(
        f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö –ø–∏—Ç–∞–Ω—å: {len(owned_global)}\n–ù–æ–º–µ—Ä–∏ —É —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ: {nums_text}",
        reply_markup=_editq_main_kb()
    )

    context.user_data["editq_state"] = {
        "owned": owned_global,
        "base_len": base_len,
        "base_json_path": base_json_path,
        "custom_json_path": custom_json_path,
        "rel_base": rel_base,
        "rel_custom": rel_custom,
        "questions_cache": questions,
    }


# =========================
# Callbacks: –º–µ–Ω—é / –≤–∏–±—ñ—Ä / back / clear media
# =========================
async def editq_buttons_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = (query.data or "")

    st = context.user_data.get("editq_state") or {}
    current_test = context.user_data.get("current_test")
    current_dir = context.user_data.get("current_test_dir")

    # –õ–µ–¥–∞—á–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    if not st and current_test and current_dir:
        questions, base_len, rel_base, base_json_path, custom_json_path, rel_custom = _combined_questions_and_index_map(
            current_dir, current_test
        )
        qowners = _load_qowners()
        owned_global = _owner_global_indices_for_user(update.effective_user.id, qowners, rel_base, base_len, rel_custom)
        st = {
            "owned": owned_global,
            "base_len": base_len,
            "base_json_path": base_json_path,
            "custom_json_path": custom_json_path,
            "rel_base": rel_base,
            "rel_custom": rel_custom,
            "questions_cache": questions,
        }
        context.user_data["editq_state"] = st

    if data == "editq_back":
        try:
            await query.edit_message_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è.")
        except Exception:
            await query.message.reply_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è.")
        for k in ("editq_mode", "editq_field", "editq_idx"):
            context.user_data.pop(k, None)
        return

    if data == "editq_show_all":
        owned = st.get("owned") or []
        questions = st.get("questions_cache") or []
        if not owned:
            await query.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –≤–ª–∞—Å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —É —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ.", reply_markup=_editq_back_kb())
            return

        chunks: List[str] = []
        for idx in owned:
            if 1 <= idx <= len(questions):
                q = questions[idx - 1]
                text = f"#{idx}\n" + format_question_text(q, highlight=None, mode="learning", show_topics=True)
                chunks.append(text)

        buf = ""
        for piece in chunks:
            if len(buf) + len(piece) + 2 > 3900:
                await query.message.reply_html(buf, disable_web_page_preview=True)
                buf = ""
            buf += piece + "\n"
        if buf.strip():
            await query.message.reply_html(buf, disable_web_page_preview=True)
        return

    if data == "editq_edit":
        owned = st.get("owned") or []
        if not owned:
            await query.message.reply_text("‚ÑπÔ∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –±—É–ª–æ —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.", reply_markup=_editq_back_kb())
            return
        context.user_data.pop("mode", None)
        context.user_data["editq_mode"] = "await_num_for_edit"
        context.user_data["suppress_test_select_once"] = True
        await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è —É —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=_editq_back_kb())
        return

    if data == "editq_delete":
        owned = st.get("owned") or []
        if not owned:
            await query.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –≤–∞—à–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=_editq_back_kb())
            return
        context.user_data.pop("mode", None)
        context.user_data["editq_mode"] = "await_num_for_delete"
        context.user_data["suppress_test_select_once"] = True
        await query.message.reply_text("üóë –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è —É —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=_editq_back_kb())
        return

    # –û—á–∏—Å—Ç–∏—Ç–∏ –º–µ–¥—ñ–∞
    if data.startswith("editq_media_clear|"):
        parts = data.split("|")
        if len(parts) != 2 or not parts[1].isdigit():
            return
        gidx = int(parts[1])
        questions = st.get("questions_cache") or []
        owned = st.get("owned") or []
        base_len = int(st.get("base_len") or 0)
        base_json = st.get("base_json_path")
        current_test = context.user_data.get("current_test")
        current_dir = context.user_data.get("current_test_dir")
        if gidx < 1 or gidx > len(questions) or gidx not in owned:
            await query.message.reply_text("‚õî –¶–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º –∞–±–æ –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.", reply_markup=_editq_back_kb())
            return

        # –õ–æ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ç–∞ —Ç–µ–∫–∞
        if gidx <= base_len:
            local_idx = gidx
            target_media_dir, _ = _media_dirs_for(current_dir, current_test, base_json)
        else:
            local_idx = gidx - base_len
            _, target_media_dir = _media_dirs_for(current_dir, current_test, base_json)

        removed = _delete_media(target_media_dir, local_idx)
        await query.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ –º–µ–¥—ñ–∞-—Ñ–∞–π–ª—ñ–≤: {removed}.")
        return

    # –í–∏–±—ñ—Ä –ø–æ–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if data.startswith("editq_field|"):
        parts = data.split("|")
        if len(parts) != 3:
            return
        field, idx_s = parts[1], parts[2]
        if not idx_s.isdigit():
            return
        gidx = int(idx_s)

        questions = st.get("questions_cache") or []
        owned = st.get("owned") or []

        if gidx < 1 or gidx > len(questions):
            await query.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è.", reply_markup=_editq_back_kb())
            return
        if gidx not in owned:
            await query.message.reply_text("‚õî –¶–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.", reply_markup=_editq_back_kb())
            return

        q = questions[gidx - 1]
        pretty = format_question_text(q, highlight=None, mode="learning", show_topics=True)

        # –ê–∫—Ç–∏–≤—É—î–º–æ —Ä–µ–∂–∏–º–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        if field == "media":
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—è–≤–Ω–µ –º–µ–¥—ñ–∞ —Ç–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –Ω–æ–≤–µ
            base_json = st.get("base_json_path")
            base_len = int(st.get("base_len") or 0)
            current_test = context.user_data.get("current_test")
            current_dir = context.user_data.get("current_test_dir")

            # –ª–æ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —É —Ñ–∞–π–ª—ñ:
            if gidx <= base_len:
                qnum = gidx
                target_media_dir, _ = _media_dirs_for(current_dir, current_test, base_json)
            else:
                qnum = gidx - base_len
                _, target_media_dir = _media_dirs_for(current_dir, current_test, base_json)

            existing = _present_media(target_media_dir, qnum)
            if existing:
                rels = [os.path.basename(p) for p in existing]
                have_text = "–ù–∞—è–≤–Ω–µ –º–µ–¥—ñ–∞:\n- " + "\n- ".join(rels)
            else:
                have_text = "–ú–µ–¥—ñ–∞ –¥–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î."

            context.user_data["editq_mode"] = "await_media_input"
            context.user_data["editq_idx"] = gidx
            context.user_data["suppress_test_select_once"] = True

            await query.message.reply_text(
                f"üìé –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è #{gidx}.\n{have_text}\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ / MP3 / MP4 / PDF / DOC / DOCX / XLSX, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ –º–µ–¥—ñ–∞¬ª.",
                reply_markup=_media_edit_kb(gidx)
            )
            return

        # —ñ–Ω—à—ñ –ø–æ–ª—è ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ñ
        context.user_data["editq_mode"] = "await_field_input"
        context.user_data["editq_field"] = field
        context.user_data["editq_idx"] = gidx
        context.user_data["suppress_test_select_once"] = True

        if field == "question":
            await query.message.reply_html(
                f"üìù –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è #{gidx}:\n\n{pretty}\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è (–¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤).",
                disable_web_page_preview=True
            )
            return
        if field in {"ansA", "ansB", "ansC", "ansD"}:
            label = field[-1]
            await query.message.reply_html(
                f"‚úèÔ∏è –†–µ–¥–∞–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å {label}) –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è #{gidx}:\n\n{pretty}\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤).",
                disable_web_page_preview=True
            )
            return
        if field == "correct":
            await query.message.reply_text(
                f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è #{gidx}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (1‚Äì4).",
                reply_markup=_editq_back_kb()
            )
            return
        if field == "topics":
            await query.message.reply_text(
                f"üè∑ –ü–∏—Ç–∞–Ω–Ω—è #{gidx}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–∞–±–æ ¬´-¬ª, —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏).",
                reply_markup=_editq_back_kb()
            )
            return
        if field == "explanation":
            await query.message.reply_text(
                f"üí° –ü–∏—Ç–∞–Ω–Ω—è #{gidx}. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—è—Å–Ω–µ–Ω–Ω—è (–∞–±–æ ¬´-¬ª, —â–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏).",
                reply_markup=_editq_back_kb()
            )
            return


async def editq_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await editq_buttons_cb(update, context)


async def editq_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        await query.edit_message_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è.")
    except Exception:
        await query.message.reply_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è.")
    for k in ("editq_mode", "editq_field", "editq_idx"):
        context.user_data.pop(k, None)


async def editq_cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    for k in ("editq_mode", "editq_field", "editq_idx", "editq_state"):
        context.user_data.pop(k, None)
    try:
        await query.edit_message_text("‚ùé –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception:
        await query.message.reply_text("‚ùé –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")


# =========================
# Text & Media flow
# =========================
async def editq_text_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î:
      - –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ (await_num_for_edit / await_num_for_delete)
      - –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≤–º—ñ—Å—Ç—É –ø–æ–ª—è (await_field_input)
      - –ø—Ä–∏–π–æ–º –º–µ–¥—ñ–∞ (await_media_input): photo/document/audio/video
    """
    msg = update.message
    if not msg:
        return

    text = (msg.text or "").strip() if msg.text else None
    mode = context.user_data.get("editq_mode")

    if mode not in {"await_num_for_edit", "await_num_for_delete", "await_field_input", "await_media_input"}:
        return

    # –ì–ª—É—à–∏–º–æ —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ü—ñ—î—ó –ø–æ–¥—ñ—ó
    context.user_data["suppress_test_select_once"] = True

    st = context.user_data.get("editq_state") or {}
    questions = st.get("questions_cache") or []
    owned = st.get("owned") or []
    base_len = int(st.get("base_len") or 0)
    base_json = st.get("base_json_path")
    custom_json = st.get("custom_json_path")

    # ===== –í–≤—ñ–¥ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è =====
    if mode in {"await_num_for_edit", "await_num_for_delete"}:
        if text in {"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –ù–∞–∑–∞–¥"}:
            context.user_data.pop("editq_mode", None)
            await msg.reply_text("‚ùé –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=_editq_back_kb())
            _stop_chain(context)

        if not text or not text.isdigit():
            await msg.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (—Ü—ñ–ª–µ —á–∏—Å–ª–æ).", reply_markup=_editq_back_kb())
            _stop_chain(context)

        gidx = int(text)
        if gidx < 1 or gidx > len(questions):
            await msg.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è.", reply_markup=_editq_back_kb())
            _stop_chain(context)

        if gidx not in owned:
            await msg.reply_text("‚õî –¶–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º.", reply_markup=_editq_back_kb())
            _stop_chain(context)

        q = questions[gidx - 1]
        pretty = format_question_text(q, highlight=None, mode="learning", show_topics=True)

        if mode == "await_num_for_edit":
            await msg.reply_html(
                f"‚úèÔ∏è –û–±—Ä–∞–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è #{gidx} –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n\n{pretty}\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:",
                disable_web_page_preview=True,
                reply_markup=_field_menu_kb(gidx)
            )
            context.user_data["editq_mode"] = "await_field_choice"
            _stop_chain(context)

        if mode == "await_num_for_delete":
            await msg.reply_html(
                f"üóë –û–±—Ä–∞–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è #{gidx} –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n{pretty}\n\n(–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –æ–∫—Ä–µ–º–∏–º –∫—Ä–æ–∫–æ–º.)",
                disable_web_page_preview=True
            )
            context.user_data.pop("editq_mode", None)
            _stop_chain(context)

    # ===== –í–≤—ñ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è =====
    if mode == "await_field_input":
        field = context.user_data.get("editq_field")
        gidx = int(context.user_data.get("editq_idx") or 0)

        if not field or gidx < 1 or gidx > len(questions) or gidx not in owned:
            await msg.reply_text("‚ö†Ô∏è –°—Ç–∞–Ω —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É /edit_question.")
            for k in ("editq_mode", "editq_field", "editq_idx"):
                context.user_data.pop(k, None)
            _stop_chain(context)

        # –§–∞–π–ª —Ç–∞ –ª–æ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —É –Ω—å–æ–º—É
        if gidx <= base_len:
            target_json = base_json
            local_idx = gidx - 1
        else:
            target_json = custom_json
            local_idx = (gidx - base_len) - 1

        if not target_json or not os.path.exists(target_json):
            await msg.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª —Ç–µ—Å—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            for k in ("editq_mode", "editq_field", "editq_idx"):
                context.user_data.pop(k, None)
            _stop_chain(context)

        items = _load_json_list(target_json)
        if local_idx < 0 or local_idx >= len(items) or not isinstance(items[local_idx], dict):
            await msg.reply_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ.")
            for k in ("editq_mode", "editq_field", "editq_idx"):
                context.user_data.pop(k, None)
            _stop_chain(context)

        qobj = items[local_idx]

        # –ó–º—ñ–Ω–∏
        if field == "question":
            if not text:
                await msg.reply_text("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                _stop_chain(context)
            if len(text) > MAX_TEXT_LEN:
                await msg.reply_text(f"‚ùå –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.")
                _stop_chain(context)
            qobj["question"] = str(text)

        elif field in {"ansA", "ansB", "ansC", "ansD"}:
            if not text:
                await msg.reply_text("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
                _stop_chain(context)
            if len(text) > MAX_TEXT_LEN:
                await msg.reply_text(f"‚ùå –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.")
                _stop_chain(context)
            answers = qobj.get("answers")
            if not isinstance(answers, list) or len(answers) < 4:
                answers = [{"text": "", "correct": False} for _ in range(4)]
            pos = {"ansA": 0, "ansB": 1, "ansC": 2, "ansD": 3}[field]
            if not isinstance(answers[pos], dict):
                answers[pos] = {"text": "", "correct": False}
            answers[pos]["text"] = str(text)
            qobj["answers"] = answers

        elif field == "correct":
            if text not in {"1", "2", "3", "4"}:
                await msg.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ 1‚Äì4.")
                _stop_chain(context)
            choose = int(text) - 1
            answers = qobj.get("answers")
            if not isinstance(answers, list) or len(answers) < 4:
                answers = [{"text": "", "correct": False} for _ in range(4)]
            for i, a in enumerate(answers[:4]):
                if not isinstance(a, dict):
                    answers[i] = {"text": str(a), "correct": False}
            for i in range(4):
                answers[i]["correct"] = (i == choose)
            qobj["answers"] = answers

        elif field == "topics":
            topics = []
            if text and text.lower() not in {"-", "‚Äî", "_"}:
                # —Ä–æ–∑–±–∏—Ç–∏ –∑–∞ –∫–æ–º–∞–º–∏/–∫—Ä–∞–ø–∫–∞–º–∏ –∑ –∫–æ–º–æ—é/—Å–ª–µ—à–µ–º/|
                import re
                parts = re.split(r"[;,/|]", text)
                for p in parts:
                    v = (p or "").strip()
                    if v:
                        topics.append(v)
            qobj["topics"] = topics

        elif field == "explanation":
            val = (text or "").strip()
            if val.lower() in {"-", "‚Äî", "_"}:
                val = ""
            if len(val) > MAX_TEXT_LEN:
                await msg.reply_text(f"‚ùå –ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.")
                _stop_chain(context)
            qobj["explanation"] = val

        else:
            await msg.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            for k in ("editq_mode", "editq_field", "editq_idx"):
                context.user_data.pop(k, None)
            _stop_chain(context)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
        items[local_idx] = qobj
        if not _save_json_list(target_json, items):
            await msg.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏.")
            _stop_chain(context)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É
        current_test = context.user_data.get("current_test")
        current_dir = context.user_data.get("current_test_dir")
        questions2, base_len2, rel_base2, base_json2, custom_json2, rel_custom2 = _combined_questions_and_index_map(
            current_dir, current_test
        )
        st.update({
            "questions_cache": questions2,
            "base_len": base_len2,
            "base_json_path": base_json2,
            "custom_json_path": custom_json2,
            "rel_base": rel_base2,
            "rel_custom": rel_custom2,
        })
        context.user_data["editq_state"] = st

        q_new = questions2[gidx - 1] if 1 <= gidx <= len(questions2) else qobj
        pretty = format_question_text(q_new, highlight=None, mode="learning", show_topics=True)
        await msg.reply_html(
            f"‚úÖ –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è #{gidx}.\n\n{pretty}\n\n–û–±—Ä–∞—Ç–∏ —ñ–Ω—à–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
            disable_web_page_preview=True,
            reply_markup=_field_menu_kb(gidx)
        )

        for k in ("editq_mode", "editq_field"):
            context.user_data.pop(k, None)
        _stop_chain(context)

    # ===== –ü—Ä–∏–π–æ–º –ú–ï–î–Ü–ê =====
    if mode == "await_media_input":
        gidx = int(context.user_data.get("editq_idx") or 0)
        if gidx < 1 or gidx > len(questions) or gidx not in owned:
            await msg.reply_text("‚ö†Ô∏è –°—Ç–∞–Ω —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞ –≤—Ç—Ä–∞—á–µ–Ω–æ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É /edit_question.")
            for k in ("editq_mode", "editq_idx"):
                context.user_data.pop(k, None)
            _stop_chain(context)

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —É —Ñ–∞–π–ª—ñ —ñ —Ç–µ–∫—É –∑ –º–µ–¥—ñ–∞
        current_test = context.user_data.get("current_test")
        current_dir = context.user_data.get("current_test_dir")
        base_media_dir, custom_media_dir = _media_dirs_for(current_dir, current_test, base_json)

        if gidx <= base_len:
            qnum = gidx
            media_dir = base_media_dir
        else:
            qnum = gidx - base_len
            media_dir = custom_media_dir

        os.makedirs(media_dir, exist_ok=True)

        # –ú–µ–¥—ñ–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        photo = msg.photo if hasattr(msg, "photo") else None
        audio = getattr(msg, "audio", None)
        document = getattr(msg, "document", None)
        video = getattr(msg, "video", None)
        voice = getattr(msg, "voice", None)

        # –ì–æ–ª–æ—Å–æ–≤–µ ‚Äî –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ
        if voice:
            await msg.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤—ñ (OGG/OPUS) –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è. –ù–∞–¥—ñ—à–ª—ñ—Ç—å MP3 —è–∫ —Ñ–∞–π–ª/–∞—É–¥—ñ–æ.")
            _stop_chain(context)

        # –§–æ—Ç–æ
        if photo:
            # –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ
            p = photo[-1]
            file = await context.bot.get_file(p.file_id)
            dest = os.path.join(media_dir, f"image{qnum}.jpg")
            await file.download_to_drive(dest)
            await msg.reply_text(f"üì∑ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
            _stop_chain(context)

        # –í—ñ–¥–µ–æ
        if video:
            fname = (video.file_name or "").lower() if video.file_name else ""
            mime = (video.mime_type or "").lower() if video.mime_type else ""
            if not (fname.endswith(".mp4") or "mp4" in mime):
                await msg.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ MP4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å .mp4 –∞–±–æ —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç MP4.")
                _stop_chain(context)
            file = await context.bot.get_file(video.file_id)
            dest = os.path.join(media_dir, f"video{qnum}.mp4")
            await file.download_to_drive(dest)
            await msg.reply_text(f"üé¨ –í—ñ–¥–µ–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
            _stop_chain(context)

        # –ê—É–¥—ñ–æ
        if audio:
            fname = (audio.file_name or "").lower()
            mime = (audio.mime_type or "").lower()
            if not (fname.endswith(".mp3") or "mpeg" in mime or "audio/mp3" in mime):
                await msg.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ MP3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å .mp3.")
                _stop_chain(context)
            file = await context.bot.get_file(audio.file_id)
            dest = os.path.join(media_dir, f"audio{qnum}.mp3")
            await file.download_to_drive(dest)
            await msg.reply_text(f"üéß –ê—É–¥—ñ–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
            _stop_chain(context)

        # –î–æ–∫—É–º–µ–Ω—Ç (MP4 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ PDF/DOC/DOCX/XLSX/MP3)
        if document:
            dfname = (document.file_name or "").lower()
            dmime = (document.mime_type or "").lower()
            if not dfname:
                await msg.reply_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è.")
                _stop_chain(context)

            file = await context.bot.get_file(document.file_id)

            # mp4 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            if dfname.endswith(".mp4") or "video/mp4" in dmime:
                dest = os.path.join(media_dir, f"video{qnum}.mp4")
                await file.download_to_drive(dest)
                await msg.reply_text(f"üé¨ –í—ñ–¥–µ–æ (–¥–æ–∫—É–º–µ–Ω—Ç) –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
                _stop_chain(context)

            # mp3 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            if dfname.endswith(".mp3") or "audio/mpeg" in dmime or "audio/mp3" in dmime:
                dest = os.path.join(media_dir, f"audio{qnum}.mp3")
                await file.download_to_drive(dest)
                await msg.reply_text(f"üéß –ê—É–¥—ñ–æ (–¥–æ–∫—É–º–µ–Ω—Ç) –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
                _stop_chain(context)

            # —ñ–Ω—à—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏
            allowed_doc = any(dfname.endswith(f".{ext}") for ext in DOC_EXTS)
            if not allowed_doc:
                await msg.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è PDF/DOC/DOCX/XLSX –∞–±–æ MP3/MP4.")
                _stop_chain(context)

            ext = os.path.splitext(dfname)[1]
            dest = os.path.join(media_dir, f"doc{qnum}{ext}")
            await file.download_to_drive(dest)
            await msg.reply_text(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è #{gidx} —è–∫ {os.path.basename(dest)}.")
            _stop_chain(context)

        # –Ø–∫—â–æ —Ü–µ —Ç–µ–∫—Å—Ç –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞
        if text:
            await msg.reply_text("‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ –º–µ–¥—ñ–∞¬ª.", reply_markup=_media_edit_kb(gidx))
            _stop_chain(context)


async def editq_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await editq_text_reply(update, context)
