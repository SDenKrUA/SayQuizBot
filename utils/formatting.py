import html
from typing import Dict, Any, Optional, Tuple, List

def _escape(s: str) -> str:
    return html.escape(s or "")

def _format_topics(topics: List[str]) -> str:
    """–†–µ–Ω–¥–µ—Ä –º–∞–ª–µ–Ω—å–∫–∏—Ö '—Ç–µ–≥—ñ–≤' –ø–µ—Ä–µ–¥ –ø–∏—Ç–∞–Ω–Ω—è–º."""
    if not topics:
        return ""
    chips = " ".join(f"<code>#{html.escape(t)}</code>" for t in topics[:10])
    return f"{chips}\n\n"

def _format_explanation(expl: str) -> str:
    if not expl:
        return ""
    return f"\nüí° <i>{_escape(expl)}</i>\n"

def format_question_text(
    q: Dict[str, Any],
    highlight: Optional[Tuple[int, bool]] = None,
    hide_correct_on_wrong: bool = False,
    show_correct_if_no_highlight: bool = False,
    *,
    mode: str = "testing",         # "testing" | "learning"
    show_topics: bool = True
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è –∑ HTML —Ä–æ–∑–º—ñ—Ç–∫–æ—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (–±–µ–∫–≤–∞—Ä–¥-—Å—É–º—ñ—Å–Ω–æ –∑ —Ç–≤–æ—ó–º –∫–æ–¥–æ–º):
      - highlight: (picked_index, picked_is_correct) –∞–±–æ None
      - hide_correct_on_wrong: —è–∫—â–æ True ‚Äî –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –Ω–µ –ø—ñ–¥—Å–≤—ñ—á—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É
      - show_correct_if_no_highlight: –∫–æ–ª–∏ highlight=None, –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É (–¥–ª—è –ø–æ—à—É–∫—É/–ø–µ—Ä–µ–¥–ø–µ—Ä–µ–≥–ª—è–¥—É)
      - mode: "testing" -> explanation –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É;
              "learning" -> explanation –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
      - show_topics: –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ topics –Ω–∞–¥ –ø–∏—Ç–∞–Ω–Ω—è–º
    """
    parts: List[str] = []

    # --- –¢–ï–ú–ò (—Ç–µ–≥–∏) ---
    topics = q.get("topics") if isinstance(q.get("topics"), list) else []
    if show_topics and topics:
        parts.append(_format_topics(topics))

    # --- –¢–ï–ö–°–¢ –ü–ò–¢–ê–ù–ù–Ø ---
    parts.append(f"<b>{_escape(q.get('question',''))}</b>\n\n")

    # --- –í–ê–†–Ü–ê–ù–¢–ò ---
    letters = ["A", "B", "C", "D"]  # —É —Ç–µ–±–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    picked_idx = None
    picked_is_correct = None
    if highlight is not None:
        picked_idx, picked_is_correct = highlight

    answers = q.get("answers", [])
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É [{text,correct}])
    correct_idx = None
    if isinstance(answers, list) and answers:
        for i, a in enumerate(answers[:len(letters)]):
            if isinstance(a, dict) and a.get("correct"):
                correct_idx = i
                break
    else:
        # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ (—è–∫—â–æ —Ä–∞–ø—Ç–æ–º)
        correct_idx = q.get("answer")

    for i, a in enumerate(answers or []):
        if i >= len(letters):
            break

        # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –≤–∞—Ä—ñ–∞–Ω—Ç—É
        if isinstance(a, dict):
            ans_text = a.get("text") or a.get("answer") or a.get("value") or a.get("content") or ""
            if not isinstance(ans_text, str):
                ans_text = str(ans_text)
        else:
            ans_text = str(a)

        ans_text = _escape(ans_text)
        is_correct = (i == correct_idx)

        emoji = ""
        bold = False

        if highlight is not None:
            # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
            if is_correct:
                if not (hide_correct_on_wrong and not picked_is_correct):
                    bold = True
                    emoji = "‚úÖ"
            if i == picked_idx:
                emoji = "‚úÖ" if picked_is_correct else "‚ùå"
                if not picked_is_correct:
                    bold = False
        else:
            # –†–µ–∂–∏–º –±–µ–∑ –≤–∏–±–æ—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É –ø–æ—à—É–∫—É/–ø–µ—Ä–µ–¥–ø–µ—Ä–µ–≥–ª—è–¥—ñ)
            if show_correct_if_no_highlight and is_correct:
                bold = True
                emoji = "‚úÖ"

        prefix = f"{letters[i]}) "
        line = f"{emoji} <b>{prefix}{ans_text}</b>" if bold else f"{emoji} {prefix}{ans_text}"
        parts.append(line + "\n")

    # --- –ü–û–Ø–°–ù–ï–ù–ù–Ø ---
    explanation = q.get("explanation") or ""
    if explanation:
        if mode == "learning":
            # –∑–∞–≤–∂–¥–∏ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ
            parts.append(_format_explanation(explanation))
        else:
            # —É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ ‚Äî —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if highlight is not None:
                parts.append(_format_explanation(explanation))

    return "".join(parts)
