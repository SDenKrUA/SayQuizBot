import aiofiles
import aiofiles.os
import asyncio
import os
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import (
    main_menu,
    learning_range_keyboard,
    test_settings_keyboard,
    tests_menu,
    browse_menu,
    search_stop_kb,  # ‚õî –¥–æ–¥–∞–Ω–æ
)
from utils.i18n import t
from utils.loader import attach_images, discover_tests_hierarchy, build_listing_for_path, discover_tests
from handlers.favorites import show_favorites_for_current_test
from utils.export_docx import export_test_to_docx, _safe_filename
from handlers.state_sync import reload_current_test_state
from utils.formatting import format_question_text  # ‚õî –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É –ø–∏—Ç–∞–Ω—å

logger = logging.getLogger("test_bot")

# ----------------------------- –î–û–ü–û–ú–Ü–ñ–ù–ï -----------------------------

def _refresh_tree_and_catalog(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É tests/:
      - bot_data['tests_tree']  (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ —Ä–æ–∑–¥—ñ–ª—ñ–≤)
      - bot_data['tests_catalog'] (–º–∞–ø–∞ "–Ω–∞–∑–≤–∞ —Ç–µ—Å—Ç—É -> entry")
    """
    try:
        tree = discover_tests_hierarchy("tests")
        context.bot_data["tests_tree"] = tree
    except Exception as e:
        logger.exception("[MENU] discover_tests_hierarchy failed: %s", e)

    try:
        catalog = discover_tests("tests")
        context.bot_data["tests_catalog"] = catalog
    except Exception as e:
        logger.exception("[MENU] discover_tests failed: %s", e)

# ----------------------------- –ü–û–®–£–ö -----------------------------

async def handle_home_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    üîé –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞—î —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É.
    - –Ø–∫—â–æ —Ç–µ—Å—Ç –ù–ï –æ–±—Ä–∞–Ω–æ: –ø–æ—à—É–∫ —Ç–µ—Å—Ç—É –ø–æ –Ω–∞–∑–≤—ñ.
    - –Ø–∫—â–æ —Ç–µ—Å—Ç –æ–±—Ä–∞–Ω–æ: –ø–æ—à—É–∫ —É –ø–æ–ª—ñ question –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç—ñ.
    """
    lang = context.bot_data.get("lang", "uk")
    test_name = context.user_data.get("current_test")

    # –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –ø–æ—à—É–∫—É —ñ —è–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ –Ω–æ–≤–∏–π
    context.user_data.pop("awaiting_search", None)
    context.user_data.pop("search_mode", None)

    if test_name:
        context.user_data["awaiting_search"] = "question"
        context.user_data["search_mode"] = "question"
        await update.message.reply_text(
            "üîé –í–≤–µ–¥–∏ 6+ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É –ü–ò–¢–ê–ù–ù–Ø —É –≤–∏–±—Ä–∞–Ω–æ–º—É —Ç–µ—Å—Ç—ñ.\n"
            f"–¢–µ—Å—Ç: ¬´{test_name}¬ª. –ü–æ—à—É–∫ —Ç—Ä–∏–≤–∞—î –¥–æ—Ç–∏, –¥–æ–∫–∏ –Ω–µ –Ω–∞—Ç–∏—Å–Ω–µ—à ¬´‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫ –ø–∏—Ç–∞–Ω—å¬ª.",
            reply_markup=None
        )
        logger.info("[SEARCH] Awaiting search by QUESTION in test=%s", test_name)
    else:
        context.user_data["awaiting_search"] = "test"
        context.user_data["search_mode"] = "test"
        await update.message.reply_text(
            "üîé –í–≤–µ–¥–∏ 6+ —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ—Å—Ç—É –∑–∞ –Ω–∞–∑–≤–æ—é.\n"
            "–ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Ç–µ—Å—Ç —É —Å–ø–∏—Å–∫—É.\n"
            "–ü–æ—à—É–∫ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º, –¥–æ–∫–∏ –Ω–µ –∑—É–ø–∏–Ω–∏—à –π–æ–≥–æ –∫–Ω–æ–ø–∫–æ—é.",
            reply_markup=None
        )
        logger.info("[SEARCH] Awaiting search by TEST name (no test selected)")

async def stop_search_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–Ü–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ—à—É–∫ –ø–∏—Ç–∞–Ω—å¬ª ‚Äî –≤–∏–º–∏–∫–∞—î —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop("awaiting_search", None)
    context.user_data.pop("search_mode", None)
    try:
        await query.message.reply_text("‚õî –ü–æ—à—É–∫ –∑—É–ø–∏–Ω–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É.")
    except Exception:
        pass

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –ø–æ—à—É–∫—É. –ü—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–ø–æ—Ä awaiting_search.
    - awaiting_search == 'test'      ‚Üí –ø–æ—à—É–∫ –ø–æ –Ω–∞–∑–≤–∞—Ö —Ç–µ—Å—Ç—ñ–≤ —É bot_data['tests_catalog']
    - awaiting_search == 'question'  ‚Üí –ø–æ—à—É–∫ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç—ñ –ø–æ –ø–æ–ª—é 'question'
    """
    mode = context.user_data.get("awaiting_search")
    if not mode:
        return  # –Ω–µ –Ω–∞—à —Ç–µ–∫—Å—Ç ‚Äî –Ω–µ—Ö–∞–π –æ–±—Ä–æ–±–ª—è—é—Ç—å —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —á–µ—Ä–µ–∑ handle_test_selection

    query_text = (update.message.text or "").strip()
    logger.info("[SEARCH] Incoming query='%s' mode=%s", query_text, mode)

    # ‚õî –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å–∞–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Ç—Ä–∏–≥–µ—Ä–∞
    if query_text == "üîé –ü–æ—à—É–∫":
        return

    if len(query_text) < 6:
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É.", reply_markup=search_stop_kb())
        return

    if mode == "test":
        catalog = context.bot_data.get("tests_catalog") or {}
        qlow = query_text.lower()
        matches = [name for name in catalog.keys() if qlow in name.lower()]
        logger.info("[SEARCH] Found %d test matches for '%s'", len(matches), query_text)

        if not matches:
            await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.", reply_markup=search_stop_kb())
            return

        matches = matches[:30]
        # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤ (reply-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞), —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º
        await update.message.reply_text(
            "üîé –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–µ—Å—Ç–∏ (–Ω–∞—Ç–∏—Å–Ω–∏, —â–æ–± –æ–±—Ä–∞—Ç–∏):",
            reply_markup=tests_menu(matches)
        )
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ ‚Äî –∫–Ω–æ–ø–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø–æ—à—É–∫—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (—â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ —ó—ó –∑–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é)
        await update.message.reply_text("–ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à –ø–æ—à—É–∫ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ \n–ê–±–æ –æ–±–µ—Ä–∏ —Ç–µ—Å—Ç –∑—ñ —Å–ø–∏—Å–∫—É", reply_markup=search_stop_kb())
        return

    if mode == "question":
        questions = context.user_data.get("questions", [])
        if not questions:
            await update.message.reply_text("‚ùå –£ –≤–∏–±—Ä–∞–Ω–æ–º—É —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.", reply_markup=search_stop_kb())
            return

        qlow = query_text.lower()
        results = []
        for idx, q in enumerate(questions):
            qtext = str(q.get("question", ""))
            if qlow in qtext.lower():
                results.append(idx)
            if len(results) >= 20:  # –æ–±–º–µ–∂–∏–º–æ –¥–æ 20, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
                break

        logger.info("[SEARCH] Found %d question matches for '%s'", len(results), query_text)

        if not results:
            await update.message.reply_text("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ç–µ–∫—Å—Ç–∞—Ö –ø–∏—Ç–∞–Ω—å.", reply_markup=search_stop_kb())
            return

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±—ñ–≥—ñ–≤
        await update.message.reply_text(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥—ñ–≤: {len(results)}. –ü–æ–∫–∞–∑—É—é –ø–∏—Ç–∞–Ω–Ω—è:")

        # –î—Ä—É–∫—É—î–º–æ –∫–æ–∂–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑ –∂–∏—Ä–Ω–∏–º —Ç–∞ –≤—ñ–¥–º—ñ—Ç–∫–æ—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        for q_index in results:
            q = questions[q_index]
            body = f"‚Ññ{q_index + 1}\n\n" + format_question_text(
                q,
                highlight=None,
                hide_correct_on_wrong=False,
                show_correct_if_no_highlight=True
            )
            try:
                await update.message.reply_text(body, parse_mode="HTML", reply_markup=search_stop_kb())
            except Exception as e:
                logger.warning("[SEARCH] send question result failed: %s", e)

        # ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ù–ï —Å–∫–∏–¥–∞—î–º–æ awaiting_search/search_mode —Ç—É—Ç!
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –æ–¥—Ä–∞–∑—É –≤–≤–æ–¥–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç.
        return

# ---------------------- –°–¢–ê–†–Ü –ú–ï–ù–Æ/–î–Ü–á ----------------------

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –í–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –º–µ–Ω—é
    context.user_data.pop("awaiting_search", None)
    context.user_data.pop("search_mode", None)

    lang = context.bot_data.get("lang", "uk")
    choice = update.message.text
    logger.info(f"[MAIN_MENU] chat={update.effective_chat.id} user={update.effective_user.id} choice={choice!r}")

    if choice == "‚ûï –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è":
        context.user_data["add_question"] = {"step": "question"}
        await update.message.reply_text("‚úç –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤):")
        return

    if choice == "üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ—Å—Ç":
        logger.info("[MAIN_MENU] Show tree browser (force refresh)")
        context.user_data.clear()
        _refresh_tree_and_catalog(context)
        path = []
        context.user_data["browse_path"] = path
        subfolders, tests, _ = build_listing_for_path(context.bot_data["tests_tree"], path)
        header = "üìÇ –û–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –∞–±–æ —Ç–µ—Å—Ç"
        if not subfolders and not tests:
            header += "\n(—Ü–µ–π —Ä–æ–∑–¥—ñ–ª –ø–æ—Ä–æ–∂–Ω—ñ–π)"
        await update.message.reply_text(
            header,
            reply_markup=browse_menu(path, subfolders, tests)
        )
        return

    test_name = context.user_data.get("current_test")
    total_questions = context.user_data.get("total_questions", 0)

    if not test_name or total_questions == 0:
        logger.info("[MAIN_MENU] No test selected yet ‚Äî prompting to choose via tree (force refresh)")
        _refresh_tree_and_catalog(context)
        path = []
        context.user_data["browse_path"] = path
        subfolders, tests, _ = build_listing_for_path(context.bot_data["tests_tree"], path)
        await update.message.reply_text(
            t(lang, "choose_test"),
            reply_markup=browse_menu(path, subfolders, tests)
        )
        return

    if choice == "üéì –†–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è":
        await reload_current_test_state(context)
        total_questions = context.user_data.get("total_questions", 0)

        logger.info(f"[MAIN_MENU] Go to learning for test={test_name}, total={total_questions}")
        context.user_data["mode"] = "learning"
        await update.message.reply_text(
            t(lang, "learning_pick_range", count=total_questions),
            reply_markup=learning_range_keyboard(total_questions)
        )
    elif choice == "üìù –†–µ–∂–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è":
        await reload_current_test_state(context)
        total_questions = context.user_data.get("total_questions", 0)

        logger.info(f"[MAIN_MENU] Go to testing for test={test_name}, total={total_questions}")
        context.user_data["mode"] = "test"
        await update.message.reply_text(
            t(lang, "testing_pick_count", count=total_questions),
            reply_markup=test_settings_keyboard()
        )
    elif choice == "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–µ—Å—å —Ç–µ—Å—Ç":
        logger.info(f"[MAIN_MENU] Download requested for test={test_name}")
        await handle_download_test(update, context)
    elif choice == "‚≠ê –£–ª—é–±–ª–µ–Ω—ñ":
        logger.info(f"[MAIN_MENU] Show favorites for test={test_name}")
        await show_favorites_for_current_test(update, context)

# ---------------------- DOCX –õ–û–ì–Ü–ö–ê ----------------------

def _find_json_for_test(test_dir: str, test_name: str) -> str | None:
    exact = os.path.join(test_dir, f"{test_name}.json")
    if os.path.exists(exact):
        return exact

    try:
        jsons = [f for f in os.listdir(test_dir) if f.lower().endswith(".json")]
    except Exception:
        return None

    if not jsons:
        return None

    low = test_name.lower()
    candidates = sorted(jsons, key=lambda n: (0 if n[:-5].lower() == low else 1, len(n)))
    return os.path.join(test_dir, candidates[0])

async def handle_download_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –õ–û–ì–Ü–ö–ê DOCX (–±–µ–∑ –∑–º—ñ–Ω –ø–æ —Å—É—Ç—ñ).
    """
    lang = context.bot_data.get("lang", "uk")
    test_name = context.user_data.get("current_test")
    test_dir = context.user_data.get("current_test_dir")

    if not test_name or not test_dir:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç.", reply_markup=main_menu())
        return

    # 1) –ü–µ—Ä–µ—á–∏—Ç—É—î–º–æ JSON-–∏
    base_json_path = _find_json_for_test(test_dir, test_name)
    base_questions = []
    if base_json_path and os.path.exists(base_json_path):
        try:
            with open(base_json_path, "r", encoding="utf-8") as f:
                base_questions = json.load(f)
            if not isinstance(base_questions, list):
                base_questions = []
        except Exception as e:
            logger.exception(f"[DOWNLOAD] Error reading base JSON: {e}")

    custom_json_path = os.path.join(test_dir, f"{test_name} (custom).json")
    custom_questions = []
    if os.path.exists(custom_json_path):
        try:
            with open(custom_json_path, "r", encoding="utf-8") as f:
                custom_questions = json.load(f)
            if not isinstance(custom_questions, list):
                custom_questions = []
        except Exception as e:
            logger.exception(f"[DOWNLOAD] Error reading custom JSON: {e}")

    current_total = len(base_questions) + len(custom_questions)

    # 2) –®–ª—è—Ö–∏ –¥–æ DOCX —Ç–∞ META —á–µ—Ä–µ–∑ safe_name
    safe_name = _safe_filename(test_name)
    docx_path = os.path.join(test_dir, f"{safe_name}.docx")
    meta_path = os.path.join(test_dir, f"{safe_name}.docx.meta.json")

    # 3) –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞—è–≤–Ω–∏–π DOCX
    reused = False
    meta = None
    if os.path.exists(docx_path) and os.path.exists(meta_path):
        try:
            async with aiofiles.open(meta_path, "r", encoding="utf-8") as mf:
                meta_raw = await mf.read()
            meta = json.loads(meta_raw)
        except Exception:
            meta = None

        if meta and isinstance(meta, dict):
            prev_total = (meta.get("counts") or {}).get("total") or meta.get("question_count")
            prev_updated = meta.get("updated_at_iso") or meta.get("generated_at")
            if isinstance(prev_total, int) and prev_total == current_total:
                try:
                    caption = f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—É ¬´{test_name}¬ª."
                    if prev_updated:
                        caption += f"\nüïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {prev_updated}"
                    with open(docx_path, "rb") as f:
                        await context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=f,
                            filename=os.path.basename(docx_path),
                            caption=caption
                        )
                    logger.info("[DOWNLOAD] Reused existing DOCX (no regeneration needed)")
                    reused = True
                except Exception as e:
                    logger.exception(f"[DOWNLOAD] Error sending existing DOCX: {e}")

    # 4) –Ø–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ ‚Äî –≥–µ–Ω–µ—Ä—É—î–º–æ
    if not reused:
        loop = asyncio.get_event_loop()
        images_dir_base = os.path.join(test_dir, test_name)
        images_dir_custom = os.path.join(test_dir, f"{test_name} (custom)")

        try:
            base_questions = await loop.run_in_executor(None, attach_images, base_questions, images_dir_base)
        except Exception as e:
            logger.warning(f"[DOWNLOAD] attach_images (base) failed: {e}")

        try:
            custom_questions = await loop.run_in_executor(None, attach_images, custom_questions, images_dir_custom)
        except Exception as e:
            logger.warning(f"[DOWNLOAD] attach_images (custom) failed: {e}")

        questions = (base_questions or []) + (custom_questions or [])
        if not questions:
            await update.message.reply_text(
                t(lang, "download_not_found", test=test_name) if callable(t) else f"‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è ¬´{test_name}¬ª.",
                reply_markup=main_menu()
            )
            return

        try:
            docx_path, regenerated = await loop.run_in_executor(
                None, export_test_to_docx, test_name, questions, test_dir
            )
            logger.info(f"[DOWNLOAD] DOCX ready: {docx_path} regenerated={regenerated}")
        except Exception as e:
            logger.exception(f"[DOWNLOAD] Export failed: {e}")
            await update.message.reply_text(
                t(lang, "download_error", test=test_name, error=str(e)) if callable(t) else "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª.",
                reply_markup=main_menu()
            )
            return

        # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        try:
            meta = {
                "test_name": test_name,
                "docx_path": docx_path,
                "updated_at_iso": datetime.now().isoformat(timespec="seconds"),
                "regenerated": True,
                "sources": {
                    "base_json": base_json_path,
                    "custom_json": custom_json_path if os.path.exists(custom_json_path) else None
                },
                "counts": {
                    "base": len(base_questions or []),
                    "custom": len(custom_questions or []),
                    "total": len(questions or [])
                }
            }
            async with aiofiles.open(meta_path, "w", encoding="utf-8") as mf:
                await mf.write(json.dumps(meta, ensure_ascii=False, indent=2))
        except Exception as e:
            logger.warning(f"[DOWNLOAD] Meta write failed: {e}")

        caption = f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç—É ¬´{test_name}¬ª."
        if meta and meta.get("updated_at_iso"):
            caption += f"\nüïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {meta['updated_at_iso']}"

        try:
            with open(docx_path, "rb") as f:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=f,
                    filename=os.path.basename(docx_path),
                    caption=caption
                )
            logger.info("[DOWNLOAD] Sent regenerated DOCX successfully")
        except FileNotFoundError:
            logger.error(f"[DOWNLOAD] File not found after export: {docx_path}")
            await update.message.reply_text(
                t(lang, "download_not_found", test=test_name) if callable(t) else "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=main_menu()
            )
            return
        except Exception as e:
            logger.exception(f"[DOWNLOAD] Error sending file: {e}")
            await update.message.reply_text(
                t(lang, "download_error", test=test_name, error=str(e)) if callable(t) else "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª.",
                reply_markup=main_menu()
            )
            return

        # RAM sync –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        context.user_data["questions"] = questions
        context.user_data["total_questions"] = len(questions)
    else:
        # –Ø–∫—â–æ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ ‚Äî —Ç–µ–∂ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ RAM –∑—ñ —Å–≤—ñ–∂–∏–º–∏ JSON
        await reload_current_test_state(context)

# (–î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ) ‚Äî –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∏—Ç–∞–Ω–Ω—è –∑ –ø–æ—à—É–∫—É
async def open_question_from_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = (query.data or "").split("|")
    if len(data) != 2 or data[0] != "openq":
        return

    try:
        q_index = int(data[1])
    except ValueError:
        return

    questions = context.user_data.get("questions", [])
    if not questions or q_index < 0 or q_index >= len(questions):
        await query.answer("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    context.user_data["mode"] = "learning"
    context.user_data["order"] = [q_index]
    context.user_data["step"] = 0
    context.user_data["score"] = 0
    context.user_data["wrong_pairs"] = []
    context.user_data["current_streak"] = 0
    context.user_data["start_time"] = datetime.now()

    from handlers.learning import send_current_question
    await query.message.reply_text("üìå –í—ñ–¥–∫—Ä–∏–≤–∞—é –∑–Ω–∞–π–¥–µ–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è‚Ä¶")
    await send_current_question(query.message.chat_id, context)
