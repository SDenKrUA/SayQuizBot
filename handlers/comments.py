import os
import json
import glob
import aiofiles
import html
import logging
from datetime import datetime
from telegram import Update, ForceReply
from telegram.ext import ContextTypes
from utils.keyboards import comment_menu, build_options_markup

logger = logging.getLogger("test_bot")

# ---------- –í–ù–£–¢–†–Ü–®–ù–Ü –£–¢–ò–õ–Ü–¢–ò ----------

def _test_comments_path(test_name: str, test_dir: str) -> str:
    """
    –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É —É —Ç—ñ–π –∂–µ —Ç–µ—Ü—ñ, –¥–µ –ª–µ–∂–∏—Ç—å —Å–∞–º —Ç–µ—Å—Ç.
    """
    safe = test_name  # –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–∞–Ω–∞—Ü—ñ—é
    return os.path.join(test_dir, f"{safe}.comments.json")

async def _load_comments_dict(test_name: str, test_dir: str) -> dict:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É:
    { "q_index(str)": [ {user_id, username, text, ts}, ... ] }.
    –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ª–µ–≥–∞—Å—ñ-—Ñ–∞–π–ª—ñ–≤ <test>_q<idx>.json.
    """
    path = _test_comments_path(test_name, test_dir)
    data: dict = {}

    if os.path.exists(path):
        try:
            async with aiofiles.open(path, "r", encoding="utf-8") as f:
                raw = await f.read()
                data = json.loads(raw) if raw.strip() else {}
                if not isinstance(data, dict):
                    data = {}
        except Exception:
            data = {}

    # –õ–µ–≥–∞—Å—ñ: <test>_q*.json
    legacy_pattern = os.path.join(test_dir, f"{test_name}_q*.json")
    legacy_files = glob.glob(legacy_pattern)
    if legacy_files:
        for lf in legacy_files:
            try:
                async with aiofiles.open(lf, "r", encoding="utf-8") as f:
                    raw = await f.read()
                    items = json.loads(raw) if raw.strip() else []
                    if not isinstance(items, list):
                        items = []
                base = os.path.basename(lf)
                try:
                    qidx_part = base.split("_q", 1)[1].split(".json", 1)[0]
                    qidx = int(qidx_part)
                    key = str(qidx)
                    data.setdefault(key, [])
                    for c in items:
                        text = c.get("text") if isinstance(c, dict) else str(c)
                        data[key].append({
                            "user_id": c.get("user_id") if isinstance(c, dict) else None,
                            "username": c.get("username") if isinstance(c, dict) else None,
                            "text": text,
                            "ts": c.get("ts") if isinstance(c, dict) else None
                        })
                except Exception:
                    pass
            except Exception:
                pass

    return data

async def _save_comments_dict(test_name: str, test_dir: str, data: dict):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É."""
    path = _test_comments_path(test_name, test_dir)
    async with aiofiles.open(path, "w", encoding="utf-8") as f:
        await f.write(json.dumps(data, ensure_ascii=False, indent=2))

# ---------- –ü–£–ë–õ–Ü–ß–ù–ò–ô –•–ï–õ–ü–ï–† ----------

async def get_comments_count(test_name: str, q_index: int, test_dir: str) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è.
    """
    data = await _load_comments_dict(test_name, test_dir)
    return len(data.get(str(q_index), []))

# ---------- –•–ï–ù–î–õ–ï–†–ò ----------

async def handle_comment_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è."""
    if not context.user_data.get("awaiting_comment"):
        return

    msg = update.message
    if not msg or not msg.text:
        return

    # –ù–µ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —É –∫–æ–º–µ–Ω—Ç–∞—Ä ¬´–ù–∞–∑–∞–¥/Cancel¬ª
    if msg.text.strip() in {"üîô –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "/cancel", "–í—ñ–¥–º—ñ–Ω–∞", "–°–∫–∞—Å—É–≤–∞—Ç–∏"}:
        return

    user_id = update.effective_user.id
    username = update.effective_user.username
    text = msg.text.strip()

    test_name = context.user_data.get("current_test")
    test_dir = context.user_data.get("current_test_dir")
    q_index = context.user_data.get("comment_q_index", context.user_data.get("current_q_index"))

    if not test_name or not test_dir or q_index is None:
        context.user_data.pop("awaiting_comment", None)
        await msg.reply_text("‚ùì –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.")
        return

    if not text:
        await msg.reply_text("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç")
        return

    data = await _load_comments_dict(test_name, test_dir)
    key = str(q_index)
    data.setdefault(key, [])

    data[key].append({
        "user_id": user_id,
        "username": username,
        "text": text[:1000],
        "ts": datetime.utcnow().isoformat() + "Z"
    })

    await _save_comments_dict(test_name, test_dir, data)

    context.user_data.pop("awaiting_comment", None)
    context.user_data.pop("comment_q_index", None)

    await msg.reply_text("üíæ –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥ –ø–∏—Ç–∞–Ω–Ω—è–º
    try:
        comments_count = len(data.get(key, []))
        is_fav = q_index in context.user_data.get("fav_set", set())

        chat_id = context.user_data.get("question_chat_id")
        msg_id = context.user_data.get("question_message_id")
        if chat_id and msg_id:
            await context.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=build_options_markup(
                    q_index,
                    highlight=True,
                    is_favorited=is_fav,
                    comments_count=comments_count
                )
            )
    except Exception as e:
        logger.error(f"[COMMENTS] Failed to update question keyboard: {e}")

async def comment_entry_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö—ñ–¥ —É –º–µ–Ω—é –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    if len(data) != 2:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=False)
        return

    try:
        q_index = int(data[1])
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", show_alert=False)
        return

    test_name = context.user_data.get("current_test")
    if not test_name:
        await query.answer("‚ùì –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç.", show_alert=True)
        return

    context.user_data["comment_q_index"] = q_index
    context.user_data["awaiting_comment"] = False

    await query.message.reply_text("üí¨ –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏:", reply_markup=comment_menu(q_index))

async def comment_write_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    if len(data) != 2:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=False)
        return

    try:
        q_index = int(data[1])
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", show_alert=False)
        return

    test_name = context.user_data.get("current_test")
    if not test_name:
        await query.answer("‚ùì –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç.", show_alert=True)
        return

    context.user_data["comment_q_index"] = q_index
    context.user_data["awaiting_comment"] = True

    await query.message.reply_text(
        "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤):",
        reply_markup=ForceReply(selective=True, input_field_placeholder="–¢–≤—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä‚Ä¶")
    )

async def comment_view_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ."""
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    if len(data) != 2:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=False)
        return

    try:
        q_index = int(data[1])
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", show_alert=False)
        return

    test_name = context.user_data.get("current_test")
    test_dir = context.user_data.get("current_test_dir")
    if not test_name or not test_dir:
        await query.answer("‚ùì –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç.", show_alert=True)
        return

    comments_dict = await _load_comments_dict(test_name, test_dir)
    comments = comments_dict.get(str(q_index), [])

    if not comments:
        await query.message.reply_text("‚ÑπÔ∏è –î–ª—è —Ü—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è —â–µ –Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤.", reply_markup=comment_menu(q_index))
        return

    body = [f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è {q_index + 1}:\n"]
    for i, c in enumerate(comments, 1):
        uname = c.get("username") or f"id{c.get('user_id', '')}"
        txt = c.get("text", "")
        body.append(f"{i}. <b>{html.escape(uname)}</b>: {html.escape(txt)}")

    msg = "\n\n".join(body)
    await query.message.reply_text(msg[:4000], parse_mode="HTML", reply_markup=comment_menu(q_index))

async def comment_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚¨ÖÔ∏è/üîô –ù–∞–∑–∞–¥ –∑ –º–µ–Ω—é –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop("awaiting_comment", None)
    context.user_data.pop("comment_q_index", None)
    await query.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ. –ú–æ–∂–Ω–∞ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏.")
