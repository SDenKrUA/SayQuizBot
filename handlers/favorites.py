from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from utils.keyboards import (
    build_options_markup,
    main_menu,
    favorites_clear_inline_kb,
    favorites_clear_confirm_kb,
)
from handlers.statistics_db import (
    save_favorite_db,
    delete_favorite_db,
    get_user_favorites_by_test,
    get_favorite_counts_by_test,
    delete_all_favorites,
)
from handlers.comments import get_comments_count
from utils.i18n import t

# --- Inline toggle (callback fav|<q_index>) ---
async def favorite_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ–≥–ª —É–ª—é–±–ª–µ–Ω–æ–≥–æ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.
    –ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É ‚Äì –æ–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ —Ä–æ–∑–º—ñ—Ç–∫—É (reply_markup) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º.
    """
    query = update.callback_query
    data = (query.data or "").split("|")
    await query.answer()  # –∫–æ—Ä–æ—Ç–∫–∏–π toast

    if len(data) != 2:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=False)
        return

    try:
        q_index = int(data[1])
    except ValueError:
        await query.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å.", show_alert=False)
        return

    test_name = context.user_data.get("current_test", "unknown")
    test_dir = context.user_data.get("current_test_dir")
    questions = context.user_data.get("questions", [])
    if q_index >= len(questions):
        await query.answer("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    q = questions[q_index]
    user = query.from_user

    # –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    fav_set = context.user_data.get("fav_set")
    if fav_set is None:
        rows = await get_user_favorites_by_test(user.id, test_name, limit=10000)
        fav_set = {r["q_index"] for r in rows}
        context.user_data["fav_set"] = fav_set

    # –¢–æ–≥–ª
    if q_index in fav_set:
        await delete_favorite_db(user_id=user.id, test_name=test_name, q_index=q_index)
        fav_set.discard(q_index)
        await query.answer("‚≠ê –í–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö", show_alert=False)
    else:
        await save_favorite_db(
            user_id=user.id,
            username=user.username,
            test_name=test_name,
            q_index=q_index,
            question_text=q.get("question", "")
        )
        fav_set.add(q_index)
        await query.answer("‚≠ê –î–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö", show_alert=False)

    # –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —â–æ–± –Ω–µ —Å–∫–∏–¥–∞–ª–æ –Ω–∞ (0)
    try:
        comments_count = await get_comments_count(test_name, q_index, test_dir)
    except Exception:
        comments_count = 0

    try:
        markup = build_options_markup(
            q_index=q_index,
            highlight=True,
            is_favorited=(q_index in fav_set),
            comments_count=comments_count
        )
        await query.edit_message_reply_markup(reply_markup=markup)
    except Exception:
        pass


# --- /favorites: –∑–≤–µ–¥–µ–Ω–Ω—è –ø–æ —Ç–µ—Å—Ç–∞—Ö ---
async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /favorites ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–æ –∫–æ–∂–Ω–æ–º—É —Ç–µ—Å—Ç—É.
    –ü—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –¥–æ–¥–∞—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ¬´–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –£–ª—é–±–ª–µ–Ω—ñ¬ª.
    """
    user_id = update.effective_user.id
    lang = context.bot_data.get("lang", "uk")
    counts = await get_favorite_counts_by_test(user_id)

    if not counts:
        await update.message.reply_text(t(lang, "favorites_empty"))
        return

    text_lines = [t(lang, "favorites_list_title")]
    for row in counts:
        test = row["test_name"]
        cnt = row["count"]
        noun = "–ø–∏—Ç–∞–Ω–Ω—è" if (cnt % 10 in (2,3,4) and cnt % 100 not in (12,13,14)) else "–ø–∏—Ç–∞–Ω—å" if cnt != 1 else "–ø–∏—Ç–∞–Ω–Ω—è"
        text_lines.append(f"{test} ‚Äî {cnt} {noun}")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ—é –æ—á–∏—â–µ–Ω–Ω—è
    await update.message.reply_text("\n".join(text_lines), reply_markup=favorites_clear_inline_kb())


# --- '‚≠ê –£–ª—é–±–ª–µ–Ω—ñ' –≤ –º–µ–Ω—é –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É ---
async def show_favorites_for_current_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–µ–∂–∏–º—ñ–≤ –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É:
    - üéì –ù–∞–≤—á–∞–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
    - üìù –¢–µ—Å—Ç –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
    """
    user_id = update.effective_user.id
    test_name = context.user_data.get("current_test")

    if not test_name:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ç–µ—Å—Ç –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    rows = await get_user_favorites_by_test(user_id, test_name, limit=10000)
    fav_indices = sorted({r["q_index"] for r in rows})

    if not fav_indices:
        await update.message.reply_text(f"‚ÑπÔ∏è –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å —É —Ç–µ—Å—Ç—ñ ¬´{test_name}¬ª.")
        return

    # –ó–±–µ—Ä–µ–∂–µ–º–æ –Ω–∞–±—ñ—Ä —É user_data –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚úÖ
    context.user_data["fav_set"] = set(fav_indices)

    kb = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üéì –ù–∞–≤—á–∞–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"), KeyboardButton("üìù –¢–µ—Å—Ç –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await update.message.reply_text(
        f"‚≠ê –£–ª—é–±–ª–µ–Ω—ñ –¥–ª—è ¬´{test_name}¬ª: {len(fav_indices)}",
        reply_markup=kb
    )


# --- –°—Ç–∞—Ä—Ç –Ω–∞–≤—á–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö ---
async def start_favorites_learning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞—î –Ω–∞–≤—á–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É (—É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤).
    """
    user_id = update.effective_user.id
    test_name = context.user_data.get("current_test")
    questions = context.user_data.get("questions", [])
    if not test_name or not questions:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ç–µ—Å—Ç –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=main_menu())
        return

    rows = await get_user_favorites_by_test(user_id, test_name, limit=10000)
    fav_indices = sorted({r["q_index"] for r in rows})
    if not fav_indices:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É.", reply_markup=main_menu())
        return

    # –°—Ç–∞–Ω —Å–µ—Å—ñ—ó –Ω–∞–≤—á–∞–Ω–Ω—è
    context.user_data["mode"] = "learning"
    context.user_data["order"] = fav_indices
    context.user_data["step"] = 0
    context.user_data["score"] = 0
    context.user_data["wrong_pairs"] = []
    context.user_data["current_streak"] = 0

    # –í–ê–ñ–õ–ò–í–û: —Å–∫–∏–¥–∞—î–º–æ ‚Äú–∂–∏–≤–µ‚Äù –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ù–û–í–ï, –∞ –Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä–µ
    context.user_data.pop("question_chat_id", None)
    context.user_data.pop("question_message_id", None)

    from handlers.learning import send_current_question
    await update.message.reply_text("üéì –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–∞–≤—á–∞–Ω–Ω—è –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö!", reply_markup=None)
    await send_current_question(update.effective_chat.id, context)


# --- –°—Ç–∞—Ä—Ç —Ç–µ—Å—Ç—É —Ç—ñ–ª—å–∫–∏ –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö ---
async def start_favorites_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫–∞—î —Ç–µ—Å—Ç —Ç—ñ–ª—å–∫–∏ –ø–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É (–≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ—Ä—è–¥–æ–∫).
    """
    import random

    user_id = update.effective_user.id
    test_name = context.user_data.get("current_test")
    questions = context.user_data.get("questions", [])
    if not test_name or not questions:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ç–µ—Å—Ç –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=main_menu())
        return

    rows = await get_user_favorites_by_test(user_id, test_name, limit=10000)
    fav_indices = list({r["q_index"] for r in rows})
    if not fav_indices:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É.", reply_markup=main_menu())
        return

    random.shuffle(fav_indices)

    # –°—Ç–∞–Ω —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—É
    context.user_data["mode"] = "test"
    context.user_data["order"] = fav_indices
    context.user_data["step"] = 0
    context.user_data["score"] = 0
    context.user_data["wrong_pairs"] = []
    context.user_data["current_streak"] = 0

    from datetime import datetime
    context.user_data["start_time"] = datetime.now()

    # –í–ê–ñ–õ–ò–í–û: —Å–∫–∏–¥–∞—î–º–æ ‚Äú–∂–∏–≤–µ‚Äù –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ù–û–í–ï, –∞ –Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä–µ
    context.user_data.pop("question_chat_id", None)
    context.user_data.pop("question_message_id", None)

    lang = context.bot_data.get("lang", "uk")
    await update.message.reply_text(
        t(lang, "testing_start", test=test_name, count=len(fav_indices)),
        reply_markup=None
    )

    # üîß –§–Ü–ö–°: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–Ω–¥–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ handlers.testing
    from handlers.testing import _show_question
    await _show_question(update, context, fav_indices[0])


# === –ù–æ–≤–µ: –æ—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö —á–µ—Ä–µ–∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ===
async def clear_all_favorites_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –æ—á–∏—â–µ–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    lang = context.bot_data.get("lang", "uk")
    await query.message.reply_text(t(lang, "favorites_clear_prompt"), reply_markup=favorites_clear_confirm_kb())

async def clear_all_favorites_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()
    lang = context.bot_data.get("lang", "uk")

    data = (query.data or "").split("|")
    choice = data[1] if len(data) > 1 else "no"

    if choice == "yes":
        user_id = query.from_user.id
        n = await delete_all_favorites(user_id)
        # –æ—á–∏—Å—Ç–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à, —è–∫—â–æ –±—É–≤
        if "fav_set" in context.user_data:
            context.user_data["fav_set"].clear()
        await query.message.reply_text(t(lang, "favorites_cleared", n=n))
    else:
        await query.message.reply_text(t(lang, "favorites_clear_cancel"))
