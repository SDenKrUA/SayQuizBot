import json
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_validation import _validate_test_json
from .vip_utils import _process_media_zip
from .vip_storage import (
    _relative_to_tests, _refresh_catalogs, _load_owners, _save_owners,
    _catalog_entry, _find_json_in_dir, _test_name_exists
)
from .vip_ui import _placement_kb, _dup_owner_kb
from .vip_constants import TESTS_ROOT

logger = logging.getLogger("test_bot")


async def vip_handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏–π–º–∞—î:
      - ZIP –∞—Ä—Ö—ñ–≤ (–∫–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞): —Ä–æ–∑–ø–∞–∫–æ–≤—É—î –∑–º—ñ—à–∞–Ω—ñ —Ñ–∞–π–ª–∏ (image/audio/video/doc)
        —É –≤–∂–µ –≤–∏–∑–Ω–∞—á–µ–Ω—É —Ç–µ–∫—É media –¥–ª—è —Ç–µ—Å—Ç—É.
      - JSON —Ç–µ—Å—Ç: –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä + –≥—ñ–ª–∫–∞ ¬´–ø–µ—Ä–µ–∑–∞–ø–∏—Å¬ª (—è–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è) –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –º—ñ—Å—Ü—è.
    """
    doc = update.message.document
    if not doc:
        return

    filename = (doc.file_name or "").strip()

    # ---------- ZIP: –º–µ–¥—ñ–∞ –∞—Ä—Ö—ñ–≤ –¥–ª—è –¢–ï–°–¢–£ (–∫–æ–ª–∏ –æ—á—ñ–∫—É—î–º–æ) ----------
    if filename.lower().endswith(".zip"):
        if not context.user_data.get("awaiting_vip_images"):
            # –Ø–∫—â–æ –º–∏ –Ω–µ —É —Ä–µ–∂–∏–º—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ.
            return

        images_dir = context.user_data.get("vip_images_dir")
        if not images_dir:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–µ–∫—É –¥–ª—è —Ñ–∞–π–ª—ñ–≤. –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ç–µ—Å—Ç —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        try:
            tg_file = await doc.get_file()
            zip_bytes = await tg_file.download_as_bytearray()
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤: {e}")
            return

        try:
            stats = _process_media_zip(zip_bytes, images_dir)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞—Ä—Ö—ñ–≤—É: {e}")
            return
        finally:
            # –ó–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
            context.user_data.pop("awaiting_vip_images", None)

        await update.message.reply_text(
            "üì¶ –û–±—Ä–æ–±–∫–∞ –∞—Ä—Ö—ñ–≤—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"‚Ä¢ –£—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤ —É –∞—Ä—Ö—ñ–≤—ñ: {stats.get('total', 0)}\n"
            f"‚Ä¢ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ: {stats.get('processed', 0)}\n"
            f"‚Ä¢ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {stats.get('images', 0)}\n"
            f"‚Ä¢ –ê—É–¥—ñ–æ: {stats.get('audio', 0)}\n"
            f"‚Ä¢ –í—ñ–¥–µ–æ: {stats.get('video', 0)}\n"
            f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {stats.get('docs', 0)}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –º–µ–¥—ñ–∞): {stats.get('skipped_nonmedia', 0)}\n"
            f"‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {stats.get('errors', 0)}\n\n"
            f"–ü–∞–ø–∫–∞: `/{_relative_to_tests(images_dir)}`",
            parse_mode="Markdown"
        )
        return

    # ---------- JSON: —Ñ–∞–π–ª —Ç–µ—Å—Ç—É ----------
    if not filename.lower().endswith(".json"):
        # —ñ–Ω—à—ñ —Ç–∏–ø–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É —Ü—å–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ –Ω–µ –æ–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ
        return

    # –∑—á–∏—Ç—É—î–º–æ JSON
    try:
        tg_file = await doc.get_file()
        file_bytes = await tg_file.download_as_bytearray()
        data = json.loads(file_bytes.decode("utf-8"))
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ JSON: {e}")
        return

    ok, msg = _validate_test_json(data)
    if not ok:
        await update.message.reply_text(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ: {msg}")
        return

    # --- –ì–Ü–õ–ö–ê 1: –ø–µ—Ä–µ–∑–∞–ø–∏—Å —ñ—Å–Ω—É—é—á–æ–≥–æ —Ç–µ—Å—Ç—É (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤ ¬´–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏¬ª –π —Ç–µ–ø–µ—Ä –Ω–∞–¥—Å–∏–ª–∞—î JSON)
    if context.user_data.get("awaiting_vip_rewrite"):
        target = context.user_data.get("vip_rewrite_target")
        if not target:
            context.user_data.pop("awaiting_vip_rewrite", None)
        else:
            name = target["name"]
            old_path = target["abs_path"]
            old_dir = target["abs_dir"]

            context.user_data["vip_dup"] = {
                "name": name,
                "data": data,
                "old_dir": old_dir,
                "old_path": old_path,
                "rel": target["rel"],
            }
            # —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–∏ rewrite
            context.user_data.pop("awaiting_vip_rewrite", None)
            context.user_data.pop("vip_rewrite_target", None)

            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –¢–∞ —Å–∞–º–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è", callback_data="vip_replace_same")],
                [InlineKeyboardButton("üóÇ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ä–æ–∑–¥—ñ–ª", callback_data="vip_replace_other")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
            ])
            await update.message.reply_text("–î–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é —Ç–µ—Å—Ç—É?", reply_markup=kb)
            return

    # --- –ì–Ü–õ–ö–ê 2: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ VIP-–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É ---
    if not context.user_data.get("awaiting_vip_json"):
        context.user_data["awaiting_vip_json"] = True

    safe_name = filename[:-5]  # –±–µ–∑ .json
    context.user_data["vip_pending"] = {"name": safe_name, "data": data}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞ –ø–æ –≤—Å—å–æ–º—É –¥–µ—Ä–µ–≤—É
    if _test_name_exists(context, safe_name):
        entry = _catalog_entry(context, safe_name)
        owner_info = None
        abs_json = None
        if entry:
            test_dir = entry.get("dir")
            abs_json = _find_json_in_dir(test_dir, safe_name) if test_dir else None
            if abs_json:
                owners = _load_owners()
                rel = _relative_to_tests(abs_json)
                owner_info = owners.get(rel)

        # –Ø–∫—â–æ —ñ—Å–Ω—É—é—á–∏–π —Ç–µ—Å—Ç –Ω–∞–ª–µ–∂–∏—Ç—å –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ‚Äî –ø–æ–∫–∞–∂–µ–º–æ –º–µ–Ω—é ¬´–∑–∞–º—ñ–Ω–∏—Ç–∏/–ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏¬ª
        if owner_info and owner_info.get("owner_id") == update.effective_user.id:
            context.user_data["vip_dup"] = {
                "name": safe_name,
                "data": data,
                "old_dir": entry.get("dir") if entry else None,
                "old_path": abs_json,
                "rel": _relative_to_tests(abs_json) if abs_json else None,
            }
            await update.message.reply_text(
                f"‚ÑπÔ∏è –¢–µ—Å—Ç **{safe_name}** —É–∂–µ —ñ—Å–Ω—É—î.\n"
                f"üìÅ –ü–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö: `/{_relative_to_tests(abs_json)}`\n\n"
                "–©–æ –∑—Ä–æ–±–∏—Ç–∏?",
                reply_markup=_dup_owner_kb()
            )
            return
        else:
            # –ü–æ–ø—Ä–æ—Å–∏–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É
            context.user_data["awaiting_vip_newname"] = True
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–µ—Å—Ç –∑ –Ω–∞–∑–≤–æ—é **{safe_name}** –≤–∂–µ —ñ—Å–Ω—É—î.\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Ç–µ—Å—Ç—É:"
            )
            return

    # –ù–µ–º–∞—î –¥—É–±–ª—ñ–∫–∞—Ç–∞ ‚Äî –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –º—ñ—Å—Ü–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
    await update.message.reply_text(
        f"–§–∞–π–ª –ø—Ä–∏–π–Ω—è—Ç–æ: **{safe_name}.json** ‚úÖ\n\n–ö—É–¥–∏ –¥–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç?",
        reply_markup=_placement_kb()
    )
