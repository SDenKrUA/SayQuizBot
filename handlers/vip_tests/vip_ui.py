from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import os
from typing import List

from .vip_constants import TESTS_ROOT

# ----- helpers -----

_IMG_EXTS = {".jpg", ".jpeg", ".png", ".gif", ".webp"}
_IGNORABLE_FILES = {"thumbs.db", "desktop.ini", ".ds_store"}

def _list_parent_stems(dir_path: str) -> set:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –º–Ω–æ–∂–∏–Ω—É —Å—Ç–µ–º—ñ–≤ (—ñ–º–µ–Ω –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è) –¥–ª—è —Ñ–∞–π–ª—ñ–≤ —É —Ç–µ—Ü—ñ,
    —â–æ —Å–∏–≥–Ω–∞–ª—ñ–∑—É—é—Ç—å –ø—Ä–æ —Ç–µ—Å—Ç:
      - *.json
      - *.docx
      - *.docx.meta.json  -> —Å—Ç–µ–º = —ñ–º'—è –¥–æ –ø–µ—Ä—à–æ—ó –∫—Ä–∞–ø–∫–∏ (—Ç–æ–±—Ç–æ 'Name' –¥–ª—è 'Name.docx.meta.json')
    """
    stems = set()
    try:
        for fname in os.listdir(dir_path):
            low = fname.lower()
            # .json
            if low.endswith(".json"):
                stem = fname[: -len(".json")]
                stems.add(stem)
                if stem.endswith(" (custom)"):
                    stems.add(stem[:-9].rstrip())
                continue

            # .docx
            if low.endswith(".docx"):
                stem = fname[: -len(".docx")]
                stems.add(stem)
                continue

            # .docx.meta.json
            if low.endswith(".docx.meta.json"):
                stem = fname[: -len(".docx.meta.json")]
                stems.add(stem)
                continue
    except Exception:
        pass
    return stems


def _dir_is_image_bucket(abs_dir: str) -> bool:
    """
    True, —è–∫—â–æ –ø–∞–ø–∫–∞:
      - –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–¥–ø–∞–ø–æ–∫
      - —ñ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (—ñ–≥–Ω–æ—Ä—É—é—á–∏ —Å–ª—É–∂–±–æ–≤—ñ —Ñ–∞–π–ª–∏)
      - –∞–±–æ ¬´–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫¬ª: >=3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ —ñ –≤—Å—ñ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏ ‚Äî —Å–ª—É–∂–±–æ–≤—ñ.
    """
    try:
        entries = os.listdir(abs_dir)
    except Exception:
        return False

    if not entries:
        return False

    image_count = 0
    non_image_non_ignorable = 0

    for name in entries:
        p = os.path.join(abs_dir, name)
        if os.path.isdir(p):
            return False  # —î –ø—ñ–¥–ø–∞–ø–∫–∏ ‚Äî —Ü–µ –Ω–µ ¬´–∫–æ—à–∏–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫¬ª

        low = name.lower()
        if low in _IGNORABLE_FILES:
            continue

        ext = os.path.splitext(name)[1].lower()
        if ext in _IMG_EXTS:
            image_count += 1
        else:
            non_image_non_ignorable += 1

    # —á–∏—Å—Ç–æ –∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    if image_count > 0 and non_image_non_ignorable == 0:
        return True

    # ¬´–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏¬ª ‚Äî >=3 –∫–∞—Ä—Ç–∏–Ω–∫–∏, —ñ–Ω—à–µ —Ç—ñ–ª—å–∫–∏ —Å–ª—É–∂–±–æ–≤–µ
    if image_count >= 3 and non_image_non_ignorable == 0:
        return True

    return False


def _should_hide_subdir(abs_parent: str, subdir_name: str) -> bool:
    """
    –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∞–ø–æ–∫-–∑–æ–±—Ä–∞–∂–µ–Ω—å —É –±—Ä–∞—É–∑–µ—Ä—ñ:
      - —è–∫—â–æ —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ–π —Ç–µ—Ü—ñ —î —Ñ–∞–π–ª-—Ç–µ—Å—Ç –∑—ñ —Å—Ç–µ–º–æ–º, —â–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω–∞–∑–≤—ñ –ø–∞–ø–∫–∏
        (Name.json / Name.docx / Name.docx.meta.json) ‚Äî —Ö–æ–≤–∞—î–º–æ Name/
      - —è–∫—â–æ –Ω–∞–∑–≤–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '#' –∞–±–æ '_' —ñ –ø—ñ—Å–ª—è –ø—Ä–µ—Ñ—ñ–∫—Å—É –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ —Å—Ç–µ–º–æ–º —Ç–µ—Å—Ç—É ‚Äî —Ö–æ–≤–∞—î–º–æ
      - —è–∫—â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ '.comments' ‚Äî —Ö–æ–≤–∞—î–º–æ
      - —è–∫—â–æ —Å–∞–º–∞ —Ç–µ–∫–∞ –≤–∏–≥–ª—è–¥–∞—î —è–∫ ¬´–∫–æ—à–∏–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫¬ª ‚Äî —Ö–æ–≤–∞—î–º–æ
    """
    stems = _list_parent_stems(abs_parent)

    # 1) –ó–±—ñ–≥ –∑—ñ —Å—Ç–µ–º–æ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    if subdir_name in stems:
        return True

    # 2) –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
    if subdir_name.startswith("#") or subdir_name.startswith("_"):
        core = subdir_name[1:]
        if core in stems:
            return True

    # 3) –ü–∞–ø–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    if subdir_name.endswith(".comments"):
        return True

    # 4) –ü–∞–ø–∫–∞ –∑ (–ø–µ—Ä–µ–≤–∞–∂–Ω–æ) –∫–∞—Ä—Ç–∏–Ω–æ–∫
    abs_candidate = os.path.join(abs_parent, subdir_name)
    if _dir_is_image_bucket(abs_candidate):
        return True

    return False


# ----- UI builders -----

def _placement_kb() -> InlineKeyboardMarkup:
    """
    –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –º—ñ—Å—Ü—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–µ—Å—Ç—É.
    –î–æ–¥–∞—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ñ—É—Ç–µ—Ä ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª.
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üóÇ –î–æ–¥–∞—Ç–∏ –≤ –Ω–∞—è–≤–Ω–∏–π —Ä–æ–∑–¥—ñ–ª", callback_data="vip_choose_folder")],
        [InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])


def _dup_owner_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–ø–∞–¥–∫—É –¥—É–±–ª—è —Ç–µ—Å—Ç—É.
    –î–æ–¥–∞—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ñ—É—Ç–µ—Ä ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª.
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ôªÔ∏è –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ç–µ—Å—Ç", callback_data="vip_dup_replace")],
        [InlineKeyboardButton("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ—Å—Ç", callback_data="vip_dup_view")],
        [InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ])


def _folder_browser_kb(path: List[str]) -> InlineKeyboardMarkup:
    """
    –ë—Ä–∞—É–∑–µ—Ä –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—ñ–≤ —ñ–∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º —Å–ª—É–∂–±–æ–≤–∏—Ö —Ç–µ–∫ (–∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤ —Ç–æ—â–æ).
    –ù–µ –ø–æ–∫–∞–∑—É—î:
      - –ø–∞–ø–∫–∏, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—Ç–µ–º—É —ñ—Å–Ω—É—é—á–∏—Ö —É —Ü—ñ–π —Ç–µ—Ü—ñ *.json/*.docx/*.docx.meta.json;
      - '#Name', '_Name', '*.comments';
      - –ø–∞–ø–∫–∏, —è–∫—ñ ¬´–∫–æ—à–∏–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫¬ª (—Ç—ñ–ª—å–∫–∏/–ø–µ—Ä–µ–≤–∞–∂–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –±–µ–∑ –ø—ñ–¥–ø–∞–ø–æ–∫).

    –î–æ–¥–∞—î–º–æ —Ñ—É—Ç–µ—Ä:
      - —è–∫—â–æ —î —à–ª—è—Ö ‚Äî ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª (vip_up)
      - –∑–∞–≤–∂–¥–∏ ‚Äî ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª (vip_cancel)
    """
    abs_dir = os.path.join(TESTS_ROOT, *path) if path else TESTS_ROOT
    try:
        items = os.listdir(abs_dir)
    except FileNotFoundError:
        items = []

    raw_subdirs = [n for n in items if os.path.isdir(os.path.join(abs_dir, n))]

    subdirs = []
    for name in raw_subdirs:
        try:
            if _should_hide_subdir(abs_dir, name):
                continue
            subdirs.append(name)
        except Exception:
            subdirs.append(name)

    subdirs.sort(key=lambda s: s.lower())

    rows = [[InlineKeyboardButton(f"üìÅ {name}", callback_data=f"vip_open|{name}")] for name in subdirs]

    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π —Ä—è–¥
    ctrl_row = []
    if path:
        ctrl_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_up"))
    ctrl_row.append(InlineKeyboardButton("‚úÖ –û–±—Ä–∞—Ç–∏ —Ç—É—Ç", callback_data="vip_choose_here"))
    rows.append(ctrl_row)

    # –§—É—Ç–µ—Ä: –°–∫–∞—Å—É–≤–∞—Ç–∏
    rows.append([InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")])

    return InlineKeyboardMarkup(rows)


def _images_prompt_kb() -> InlineKeyboardMarkup:
    """
    –ü—ñ–¥–∫–∞–∑–∫–∞ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–≤–∏–±–æ—Ä—É —Ç–µ—Å—Ç—É: –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞—Ä–∞–∑ —á–∏ –ø—ñ–∑–Ω—ñ—à–µ.
    –î–æ–¥–∞—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Ñ—É—Ç–µ—Ä ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–∑–¥—ñ–ª—ñ–≤) —ñ ¬´‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª.
    """
    rows = [
        [InlineKeyboardButton("üì¶ –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏", callback_data="vip_img_upload")],
        [InlineKeyboardButton("‚è≠Ô∏è –î–æ–¥–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –ø—ñ–∑–Ω—ñ—à–µ", callback_data="vip_img_later")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="vip_choose_folder"),
         InlineKeyboardButton("‚õî –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_cancel")],
    ]
    return InlineKeyboardMarkup(rows)
