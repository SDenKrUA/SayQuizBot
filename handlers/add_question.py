import os
import io
import json
import asyncio
import aiofiles
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

MAX_TEXT_LEN = 1000
MAX_PHOTO_SIZE = 10 * 1024  # 10 KB
TESTS_DIR = "tests"
QOWNERS_FILE = os.path.join(TESTS_DIR, "_qowners.json")

# –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ Pillow –¥–ª—è —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è
try:
    from PIL import Image
    PIL_AVAILABLE = True
except Exception as _e:
    PIL_AVAILABLE = False
    print("[ADD_Q] Pillow (PIL) –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Äî –±—É–¥—É –Ω–∞–º–∞–≥–∞—Ç–∏—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞–π–º–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–æ—Ç–æ –∑ Telegram.")

# ===== VIP: –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –∑–∞–ø–∏—Ç–∏ =====
from handlers.vip_tests.vip_storage import (
    can_edit_vip,
    get_meta_for_rel,
    save_meta_for_rel,
)

def _strip_custom_suffix(name: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–∑–æ–≤—É –Ω–∞–∑–≤—É —Ç–µ—Å—Ç—É –±–µ–∑ —Å—É—Ñ—ñ–∫—Å–∞ ' (custom)' –≤ –∫—ñ–Ω—Ü—ñ."""
    if not isinstance(name, str):
        return name
    suffix = " (custom)"
    if name.endswith(suffix):
        return name[: -len(suffix)]
    return name

def _is_custom_test(name: str) -> bool:
    return isinstance(name, str) and name.endswith(" (custom)")

def _custom_json_path(base_test_name: str, target_dir: str | None) -> str:
    """–®–ª—è—Ö –¥–æ JSON –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç—É (–≤ —Ç—ñ–π –∂–µ —Ç–µ—Ü—ñ, —â–æ —Ç–µ—Å—Ç)."""
    base = _strip_custom_suffix(base_test_name)
    folder = target_dir or TESTS_DIR
    os.makedirs(folder, exist_ok=True)
    return os.path.join(folder, f"{base} (custom).json")

def _base_json_path(base_test_name: str, target_dir: str | None) -> str:
    base = _strip_custom_suffix(base_test_name)
    folder = target_dir or TESTS_DIR
    return os.path.join(folder, f"{base}.json")

def _base_media_dir(base_test_name: str, target_dir: str | None) -> str:
    """–ü–∞–ø–∫–∞ –º–µ–¥—ñ–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É: <dir>/<base>"""
    base = _strip_custom_suffix(base_test_name)
    folder = target_dir or TESTS_DIR
    return os.path.join(folder, base)

def _custom_media_dir(base_test_name: str, target_dir: str | None) -> str:
    """–ü–∞–ø–∫–∞ –º–µ–¥—ñ–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç—É: <dir>/<base> (custom)"""
    base = _strip_custom_suffix(base_test_name)
    folder = target_dir or TESTS_DIR
    return os.path.join(folder, f"{base} (custom)")

# --- –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ---
import re as _re
def _normalize_q(s: str) -> str:
    s = str(s or "")
    s = s.strip()
    s = _re.sub(r"^\s*\d+[\.\)]\s*", "", s)  # –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—É –Ω—É–º–µ—Ä–∞—Ü—ñ—é "12. " / "12) "
    s = _re.sub(r"\s+", " ", s)              # –∑–∂–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏
    return s.lower()

def _parse_question_number(qtext: str) -> int | None:
    """
    –í–∏—Ç—è–≥—É—î –Ω–æ–º–µ—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É "NN. ..." –∞–±–æ "NN)".
    """
    if not qtext:
        return None
    m = _re.match(r"\s*(\d+)[\.\)]\s*", qtext)
    if m:
        try:
            return int(m.group(1))
        except Exception:
            return None
    return None

def _rel_test_key(json_path: str) -> str:
    """–ö–ª—é—á –¥–ª—è _qowners.json: —à–ª—è—Ö –¥–æ —Ç–µ—Å—Ç—É –≤—ñ–¥–Ω–æ—Å–Ω–æ tests/ —ñ–∑ / —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–æ–º."""
    return os.path.relpath(json_path, TESTS_DIR).replace("\\", "/")

# ===== QOWNERS HELPERS (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ) =====
def _ensure_qowners_file() -> None:
    """–ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ tests/_qowners.json —è–∫ {} —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î."""
    try:
        os.makedirs(TESTS_DIR, exist_ok=True)
        if not os.path.exists(QOWNERS_FILE):
            with open(QOWNERS_FILE, "w", encoding="utf-8") as f:
                f.write("{}")
    except Exception as e:
        print(f"[ADD_Q] ensure _qowners error: {e}")

def _load_qowners_sync() -> dict:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ _qowners.json (dict)."""
    _ensure_qowners_file()
    try:
        with open(QOWNERS_FILE, "r", encoding="utf-8") as f:
            content = f.read()
        data = json.loads(content) if content.strip() else {}
        if not isinstance(data, dict):
            return {}
        return data
    except Exception as e:
        print(f"[ADD_Q] _qowners load error: {e}")
        return {}

def _save_qowners_sync(data: dict) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø–∏—Å–∞—Ç–∏ _qowners.json (atomic replace –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ)."""
    try:
        tmp = QOWNERS_FILE + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            f.write(json.dumps(data, ensure_ascii=False, indent=2))
        os.replace(tmp, QOWNERS_FILE)
    except Exception as e:
        print(f"[ADD_Q] _qowners save error: {e}")

def _record_qowner_sync(json_path: str, q_index_1based: int, user_id: int, username: str | None) -> None:
    """–î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è —É _qowners.json (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
    qowners = _load_qowners_sync()
    key = _rel_test_key(json_path)
    entry = qowners.get(key)
    if not isinstance(entry, dict):
        entry = {}
    entry[str(q_index_1based)] = {
        "user_id": int(user_id),
        "username": username or ""
    }
    qowners[key] = entry
    _save_qowners_sync(qowners)

# ===== Inline-–∫–ª–∞–≤—ñ—à—ñ –¥–ª—è –≥–µ–π—Ç—É =====
def _addq_gate_kb() -> InlineKeyboardMarkup:
    # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∏–º–æ–≥–∞–º–∏:
    #  - ¬´–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏¬ª
    #  - ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø¬ª
    #  - ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏¬ª
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="addq_req_continue")],
        [InlineKeyboardButton("üì® –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø", callback_data="addq_req_send")],
        [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="addq_req_cancel")],
    ])

# ===== –ù–æ–≤–µ: —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –¥–ª—è –º–∞–π—Å—Ç—Ä–∞ =====
def _addq_cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="addq_cancel")]
    ])

# ===== –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä—ñ—é =====
async def handle_add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É."""
    user = update.effective_user
    user_id = user.id
    username = user.username

    current_test = context.user_data.get("current_test")
    current_dir = context.user_data.get("current_test_dir")

    if not current_test:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç, –¥–æ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.")
        return

    # üîë –í–ê–ñ–õ–ò–í–û: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Ä–µ–∂–∏–º –Ω–∞–≤—á–∞–Ω–Ω—è/—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞–ª–æ –≤–≤–µ–¥–µ–Ω–Ω—è
    context.user_data.pop("mode", None)

    # ===== –õ–û–ì–Ü–ö–ê –ì–ï–ô–¢–£ =====
    # –ì–µ–π—Ç –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –¢–Ü–õ–¨–ö–ò –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç—É (–±–µ–∑ "(custom)") —ñ –ª–∏—à–µ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –ø—Ä–∞–≤.
    is_custom = _is_custom_test(current_test)

    if not is_custom:
        # –ë–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
        base_path = _base_json_path(current_test, current_dir)
        # –í—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥ tests/
        rel = os.path.relpath(base_path, TESTS_DIR).replace("\\", "/")
        # –Ø–∫—â–æ —Ñ–∞–π–ª–∞ –Ω–µ–º–∞ ‚Äî —Ç–µ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–µ rel
        allowed = can_edit_vip(rel, user_id, username)
        if not allowed:
            # –ü–æ–∫–∞–∑—É—î–º–æ –ì–ï–ô–¢ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
            context.user_data["addq_gate"] = {
                "target_test": current_test,
                "target_dir": current_dir or TESTS_DIR,
                "rel": rel
            }
            text = (
                "üîí –í–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—å –¥–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.\n\n"
                "‚ñ∂Ô∏è –Ø–∫—â–æ –≤–∏ **–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–µ**, –¥–ª—è –≤–∞—Å –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç –∑ —Ç–∞–∫–æ—é —Å–∞–º–æ—é –Ω–∞–∑–≤–æ—é, "
                "–≤ —Ç—ñ–π —Å–∞–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –∞–ª–µ –∑ –ø—Ä–∏–º—ñ—Ç–∫–æ—é **(custom)**. "
                "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –¥–æ–¥–∞–Ω–æ —Å–∞–º–µ —É —Ü–µ–π –Ω–æ–≤–∏–π —Ç–µ—Å—Ç.\n\n"
                "üì® –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –º–∞—Ç–∏ –∑–º–æ–≥—É **—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç** —Ç–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è —ñ –º–µ–¥—ñ–∞, "
                "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø¬ª ‚Äî –∑–∞–ø–∏—Ç –ø—ñ–¥–µ –≤–ª–∞—Å–Ω–∏–∫—É. "
                "–ö–æ–ª–∏ –≤–ª–∞—Å–Ω–∏–∫ —Å—Ö–≤–∞–ª–∏—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç, –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ —Ü–µ–π —Ç–µ—Å—Ç —É —Ä–æ–∑–¥—ñ–ª—ñ **–ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç ‚Üí –°–ø—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏**.\n\n"
                "‚ùé ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–µ –≤–∞—Å –¥–æ —Ç–µ—Å—Ç—É."
            )
            await update.message.reply_text(text, reply_markup=_addq_gate_kb())
            return

    # –Ø–∫—â–æ —Ü–µ (custom) –ê–ë–û —î –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç ‚Äî –æ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä
    await _start_addq_flow(update, context, target_test=current_test, target_dir=current_dir)
    print(f"[ADD_Q] user={user_id} START for test={current_test} dir={current_dir} (base_edit={not is_custom})")

async def _start_addq_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, *, target_test: str, target_dir: str | None):
    """–ó–∞–ø—É—Å–∫–∞—î –º–∞–π—Å—Ç–µ—Ä –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–µ—Å—Ç (–±–∞–∑–æ–≤–∏–π –∞–±–æ custom)."""
    u = update.effective_user
    context.user_data["add_question"] = {
        "step": "question",
        "data": {
            "answers": [],
            "topics": [],        # –Ω–æ–≤–µ –ø–æ–ª–µ
            "explanation": "",   # –Ω–æ–≤–µ –ø–æ–ª–µ
            "target_test": target_test,
            "target_test_base": _strip_custom_suffix(target_test),
            "target_dir": target_dir or TESTS_DIR,
            # –∞–≤—Ç–æ—Ä –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –¥–ª—è _qowners.json
            "author_id": u.id if u else None,
            "author_username": (u.username if u else "") or "",
        },
    }
    context.user_data["add_question_active"] = True
    await update.message.reply_text(
        f"‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É ¬´{target_test}¬ª (–¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤):",
        reply_markup=_addq_cancel_kb()
    )

# ===== Callback-–∏ –≥–µ–π—Ç—É =====
async def addq_req_continue_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ –∑–∞–ø–∏—Ç—É ‚Äî –æ–¥—Ä–∞–∑—É —Å—Ç–∞—Ä—Ç—É—î–º–æ –º–∞–π—Å—Ç–µ—Ä –¥–ª—è (custom)."""
    query = update.callback_query
    await query.answer()

    gate = context.user_data.pop("addq_gate", None)
    if not gate:
        await query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó.", show_alert=False)
        return

    base_name = gate["target_test"]
    target_dir = gate["target_dir"] or TESTS_DIR
    custom_name = f"{_strip_custom_suffix(base_name)} (custom)"

    # –Ü–º—ñ—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Å—Ç–∞—Ä—Ç
    class _MsgProxy:
        def __init__(self, msg):
            self.chat_id = msg.chat_id
        async def reply_text(self, *args, **kwargs):
            await query.message.reply_text(*args, **kwargs)

    proxy_update = type("ProxyUpdate", (), {"message": _MsgProxy(query.message), "effective_user": query.from_user})()

    await _start_addq_flow(proxy_update, context, target_test=custom_name, target_dir=target_dir)

async def addq_req_send_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø ‚Äî –¥–æ–¥–∞—î–º–æ —É meta.pending —Ü—å–æ–≥–æ —Ç–µ—Å—Ç—É."""
    query = update.callback_query
    await query.answer()

    gate = context.user_data.get("addq_gate")
    if not gate:
        await query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó.", show_alert=False)
        return

    rel = gate["rel"]
    meta = get_meta_for_rel(rel)
    pend = list(meta.get("pending", []))

    u = query.from_user
    req = {
        "user_id": u.id,
        "username": u.username or "",
    }

    # –Ω–µ –¥—É–±–ª—é—î–º–æ, —è–∫—â–æ –≤–∂–µ —î —Ç–∞–∫–∞ –∑–∞—è–≤–∫–∞
    exists = any((r.get("user_id") == req["user_id"]) for r in pend)
    if not exists:
        pend.append(req)
        meta["pending"] = pend
        save_meta_for_rel(rel, meta)

    await query.message.reply_text("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–ª–∞—Å–Ω–∏–∫—É —Ç–µ—Å—Ç—É.\n"
                                   "–ö–æ–ª–∏ –≤–ª–∞—Å–Ω–∏–∫ —Å—Ö–≤–∞–ª–∏—Ç—å –∑–∞–ø–∏—Ç, —Ç–µ—Å—Ç –∑ º—è–≤–∏—Ç—å—Å—è —É ¬´–ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç ‚Üí –°–ø—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏¬ª.")
    # –ü—Ä–∏–±–µ—Ä–µ–º–æ –≥–µ–π—Ç –∑—ñ —Å—Ç–∞–Ω—É
    context.user_data.pop("addq_gate", None)

async def addq_req_cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä–∏—Ç–∏ —ñ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Å—Ç–∞–Ω."""
    query = update.callback_query
    await query.answer()
    context.user_data.pop("addq_gate", None)
    await query.message.reply_text("‚ùé –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–µ—Å—Ç—É.")

# ====== –û—Å–Ω–æ–≤–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä –∫—Ä–æ–∫—ñ–≤ ======
def _parse_topics_line(text: str) -> list[str]:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Ä—è–¥–æ–∫ —Ç–µ–º, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –∫–æ–º–∞–º–∏/–∫—Ä–∞–ø–∫–æ—é –∑ –∫–æ–º–æ—é/—Å–ª–µ—à–µ–º.
    –ü–æ—Ä–æ–∂–Ω—ñ —Ç–∞ –∫—Ä–∞–ø–∫–∏ –≤—ñ–¥–∫–∏–¥–∞—é—Ç—å—Å—è.
    """
    raw = text.strip()
    if not raw or raw in {"-", "‚Äî", "_", "–±–µ–∑ —Ç–µ–º", "–±–µ–∑ —Ç–µ–º—ã", "no", "none", "skip"}:
        return []
    # —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ: –∫–æ–º–∞/–∫—Ä–∞–ø–∫–∞ –∑ –∫–æ–º–æ—é/—Å–ª–µ—à/–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —Ä–∏—Å–∫–∞
    parts = _re.split(r"[;,/|]", raw)
    out = []
    for p in parts:
        v = p.strip()
        if v and v != ".":
            out.append(v)
    return out

async def handle_add_question_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–æ–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è (—Ç–µ–∫—Å—Ç/–≤–∞—Ä—ñ–∞–Ω—Ç–∏/—Ç–µ–º–∏/–ø–æ—è—Å–Ω–µ–Ω–Ω—è/–º–µ–¥—ñ–∞)"""
    # ‚õîÔ∏è –ì–ê–†–î: —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ñ–ª–æ—É ¬´–î–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª¬ª, –Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –Ω—ñ —Ç–µ–∫—Å—Ç, –Ω—ñ –º–µ–¥—ñ–∞
    vip_single = context.user_data.get("vip_single") or {}
    if vip_single.get("await_index") or vip_single.get("await_file"):
        return

    user_id = update.effective_user.id
    flow = context.user_data.get("add_question")
    if not flow:
        return

    step = flow.get("step")
    text = update.message.text if update.message else None
    photo = update.message.photo if update.message else None
    audio = getattr(update.message, "audio", None)
    document = getattr(update.message, "document", None)
    video = getattr(update.message, "video", None)
    voice = getattr(update.message, "voice", None)
    data = flow["data"]

    # –Ü–≥–Ω–æ—Ä—É—î–º–æ ¬´–ù–∞–∑–∞–¥¬ª —è–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∏—Ç–∞–Ω–Ω—è/–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if text and text.strip() in {"üîô –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}:
        await update.message.reply_text("‚ÑπÔ∏è –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à–∏ –∞–±–æ –≤—ñ–¥–ºi–Ω–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è (–Ω–∞—Ç–∏—Å–Ω–∏ ¬´‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –∞–±–æ ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª).",
                                        reply_markup=_addq_cancel_kb())
        return

    # === –ö–†–û–ö 1: –ø–∏—Ç–∞–Ω–Ω—è ===
    if step == "question":
        if not text or len(text) > MAX_TEXT_LEN:
            await update.message.reply_text(f"‚ùå –¢–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.",
                                            reply_markup=_addq_cancel_kb())
            return

        # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∞ + –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó ---
        base_name = data.get("target_test_base") or data.get("target_test") or "Custom"
        target_dir = data.get("target_dir") or TESTS_DIR

        # –í–∏–∑–Ω–∞—á–∏–º–æ, –∫—É–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ–º–æ: —è–∫—â–æ –¥–æ–¥–∞—î–º–æ —É (custom) ‚Üí –ø—Ä–∞—Ü—é—î–º–æ –∑ (custom).json, —ñ–Ω–∞–∫—à–µ ‚Äî –∑ –±–∞–∑–æ–≤–∏–º .json
        target_is_custom = _is_custom_test(data.get("target_test"))
        custom_path = _custom_json_path(base_name, target_dir)
        main_path = _base_json_path(base_name, target_dir)
        json_path_for_saving = custom_path if target_is_custom else main_path

        duplicate_found = None
        duplicate_text = None
        total_existing = 0
        needle_norm = _normalize_q(text)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–æ –º—ñ—Å—Ü—é –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—ñ –ø–æ –¥—Ä—É–≥–æ–º—É —Ñ–∞–π–ª—É —Ç–µ–∂, —â–æ–± –Ω–µ –ø–ª–æ–¥–∏—Ç–∏ –¥—É–±–ª—å)
        paths_to_check = [p for p in [main_path, custom_path] if p]
        seen_norms = set()
        for pth in paths_to_check:
            if os.path.exists(pth):
                try:
                    async with aiofiles.open(pth, "r", encoding="utf-8") as f:
                        content = await f.read()
                        questions = json.loads(content) if content.strip() else []
                        if isinstance(questions, list):
                            total_existing += len(questions)
                            for q in questions:
                                q_text = str(q.get("question", "")).strip()
                                qn = _normalize_q(q_text)
                                if qn in seen_norms:
                                    continue
                                seen_norms.add(qn)
                                if qn == needle_norm:
                                    duplicate_found = "—Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ"
                                    duplicate_text = q_text
                                    break
                except Exception:
                    pass
            if duplicate_found:
                break

        if duplicate_found:
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–∞–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–∂–µ —ñ—Å–Ω—É—î —É {duplicate_found}:\n\n¬´{duplicate_text}¬ª"
            )
            return

        # –ù—É–º–µ—Ä–∞—Ü—ñ—è
        stripped = text.strip()
        will_prefix_number = True
        if _re.match(r"^\s*\d+\.\s", stripped):
            will_prefix_number = False

        # –†–∞—Ö—É—î–º–æ –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–º (–±–∞–∑–∞ + –∫–∞—Å—Ç–æ–º), —â–æ–± –ø–æ—Ä—è–¥–∫–æ–≤—ñ—Å—Ç—å –±—É–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        next_number = total_existing + 1
        if will_prefix_number:
            text = f"{next_number}. {stripped}"

        data["question"] = text
        data["json_save_path"] = json_path_for_saving  # –∑–±–µ—Ä–µ–∂–µ–º–æ, –∫—É–¥–∏ –ø–∏—Å–∞—Ç–∏
        flow["step"] = "answer_1"
        await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ 1 (–¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤):",
                                        reply_markup=_addq_cancel_kb())
        print(f"[ADD_Q] user={user_id} step=question text='{text}' saved question")
        return

    # === –ö–†–û–ö 2‚Äì5: –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ===
    if step.startswith("answer_"):
        idx = int(step.split("_")[1]) - 1
        if not text or len(text) > MAX_TEXT_LEN:
            await update.message.reply_text(f"‚ùå –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.",
                                            reply_markup=_addq_cancel_kb())
            return
        data["answers"].append({"text": text, "correct": False})
        print(f"[ADD_Q] user={user_id} step={step} saved answer {idx+1}: '{text}'")

        if idx < 3:
            flow["step"] = f"answer_{idx+2}"
            await update.message.reply_text(f"‚úçÔ∏è –í–≤–µ–¥–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ {idx+2} (–¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤):",
                                            reply_markup=_addq_cancel_kb())
        else:
            flow["step"] = "correct_answer"
            await update.message.reply_text("‚úÖ –£–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (1‚Äì4):",
                                            reply_markup=_addq_cancel_kb())
        return

    # === –ö–†–û–ö 6: –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å ===
    if step == "correct_answer":
        if not text or text not in ["1", "2", "3", "4"]:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 4.",
                                            reply_markup=_addq_cancel_kb())
            return
        idx = int(text) - 1
        if idx < len(data["answers"]):
            data["answers"][idx]["correct"] = True
            # üîπ –ù–û–í–ï: –ø—ñ—Å–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ‚Äî –ø–∏—Ç–∞—î–º–æ —Ç–µ–º–∏
            flow["step"] = "topics"
            await update.message.reply_text(
                "üè∑ –î–æ–¥–∞–π—Ç–µ —Ç–µ–º–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É), –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å ¬´-¬ª —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.\n"
                "–ù–∞–ø—Ä.: `–Ω–∞—Å–æ—Å–∏, –º–µ—Ö–∞–Ω—ñ–∫–∞, –∑–º–∞—â–µ–Ω–Ω—è`",
                reply_markup=_addq_cancel_kb()
            )
            print(f"[ADD_Q] user={user_id} marked correct={text}")
        return

    # === –ö–†–û–ö 7: TOPICS ===
    if step == "topics":
        topics = _parse_topics_line(text or "")
        data["topics"] = topics
        flow["step"] = "explanation"
        await update.message.reply_text(
            "üìù –í–≤–µ–¥—ñ—Ç—å –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –ø–∏—Ç–∞–Ω–Ω—è (–∞–±–æ ¬´-¬ª —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏).",
            reply_markup=_addq_cancel_kb()
        )
        print(f"[ADD_Q] user={user_id} topics={topics}")
        return

    # === –ö–†–û–ö 8: EXPLANATION ===
    if step == "explanation":
        expl = (text or "").strip() if text else ""
        if expl in {"-", "‚Äî", "_", "–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è", "–±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", "no", "none", "skip"}:
            expl = ""
        if len(expl) > MAX_TEXT_LEN:
            await update.message.reply_text(f"‚ùå –ü–æ—è—Å–Ω–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –¥–æ {MAX_TEXT_LEN} —Å–∏–º–≤–æ–ª—ñ–≤.",
                                            reply_markup=_addq_cancel_kb())
            return
        data["explanation"] = expl
        flow["step"] = "media"
        kb = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–ë–µ–∑ —Ñ–∞–π–ª—É", callback_data="addq_skip")],
                [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="addq_cancel")],
            ]
        )
        await update.message.reply_text(
            "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å **—Ñ–æ—Ç–æ/MP3/MP4/PDF/DOC/DOCX/XLSX** –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏.",
            reply_markup=kb
        )
        print(f"[ADD_Q] user={user_id} explanation_set len={len(expl)}")
        return

    # === –ö–†–û–ö 9: –ú–ï–î–Ü–ê (—Ñ–æ—Ç–æ/–∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∞–±–æ –ø—Ä–æ–ø—É—Å–∫ ===
    if step == "media":
        target_dir = data.get("target_dir") or TESTS_DIR
        target_is_custom = _is_custom_test(data.get("target_test"))
        base_name = data.get("target_test_base") or data.get("target_test") or "Custom"
        media_dir = _custom_media_dir(base_name, target_dir) if target_is_custom else _base_media_dir(base_name, target_dir)
        os.makedirs(media_dir, exist_ok=True)

        # —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
        if text and text.strip().lower() in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "–±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "no image", "skip", "–±–µ–∑ —Ñ–∞–π–ª—É", "–±–µ–∑ —Ñ–∞–π–ª–∞"}:
            print(f"[ADD_Q] user={user_id} skipped media (text)")
            q_index = await _finalize_and_save_question(data, context)  # —ñ–Ω–¥–µ–∫—Å (1-based)
            from handlers.state_sync import reload_current_test_state
            await reload_current_test_state(context)
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –±–µ–∑ —Ñ–∞–π–ª—É.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # –Ω–æ–º–µ—Ä –ø–∏—Ç–∞–Ω–Ω—è -> –Ω–æ–º–µ—Ä –º–µ–¥—ñ–∞
        qnum = _parse_question_number(data.get("question", "") or "") or 1

        # ==== –§–æ—Ç–æ ====
        if photo:
            photo_size = photo[-1] if PIL_AVAILABLE else photo[0]
            file = await context.bot.get_file(photo_size.file_id)
            image_path = os.path.join(media_dir, f"image{qnum}.jpg")

            if PIL_AVAILABLE:
                ok_img = await _compress_and_save_telegram_file(file, image_path, MAX_PHOTO_SIZE)
                if not ok_img:
                    await file.download_to_drive(image_path)
                    print("[ADD_Q] Compress failed, saved original.")
            else:
                await file.download_to_drive(image_path)

            print(f"[ADD_Q] user={user_id} saved IMAGE {image_path}")
            q_index = await _finalize_and_save_question(data, context)
            from handlers.state_sync import reload_current_test_state
            await reload_current_test_state(context)
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ —Ñ–æ—Ç–æ.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # ==== –ê—É–¥—ñ–æ (MP3) ====
        if audio:
            fname = (audio.file_name or "").lower()
            mime = (audio.mime_type or "").lower()
            if not (fname.endswith(".mp3") or "mpeg" in mime or "audio/mp3" in mime):
                await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ **MP3**. –ù–∞–¥—ñ—à–ª—ñ—Ç—å .mp3 —è–∫ —Ñ–∞–π–ª/–∞—É–¥—ñ–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª.")
                return
            file = await context.bot.get_file(audio.file_id)
            audio_path = os.path.join(media_dir, f"audio{qnum}.mp3")
            await file.download_to_drive(audio_path)
            print(f"[ADD_Q] user={user_id} saved AUDIO {audio_path}")
            q_index = await _finalize_and_save_question(data, context)
            from handlers.state_sync import reload_current_test_state
            await reload_current_test_state(context)
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –∞—É–¥—ñ–æ.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # MP3 –∞–±–æ MP4 –º–æ–∂—É—Ç—å –ø—Ä–∏–π—Ç–∏ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if document:
            dfname = (document.file_name or "").lower()
            dmime = (document.mime_type or "").lower()

            # MP3 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            if dfname.endswith(".mp3") or "audio/mpeg" in dmime or "audio/mp3" in dmime:
                file = await context.bot.get_file(document.file_id)
                audio_path = os.path.join(media_dir, f"audio{qnum}.mp3")
                await file.download_to_drive(audio_path)
                print(f"[ADD_Q] user={user_id} saved AUDIO(doc) {audio_path}")
                q_index = await _finalize_and_save_question(data, context)
                from handlers.state_sync import reload_current_test_state
                await reload_current_test_state(context)
                context.user_data.pop("add_question", None)
                context.user_data["add_question_active"] = False
                await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –∞—É–¥—ñ–æ.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return

        # ==== –í—ñ–¥–µ–æ (MP4) ====
        if video:
            fname = (video.file_name or "").lower() if video.file_name else ""
            mime = (video.mime_type or "").lower() if video.mime_type else ""
            if not (fname.endswith(".mp4") or "mp4" in mime):
                await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ **MP4**. –ù–∞–¥—ñ—à–ª—ñ—Ç—å .mp4 –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª.")
                return
            file = await context.bot.get_file(video.file_id)
            video_path = os.path.join(media_dir, f"video{qnum}.mp4")
            await file.download_to_drive(video_path)
            print(f"[ADD_Q] user={user_id} saved VIDEO {video_path}")
            q_index = await _finalize_and_save_question(data, context)
            from handlers.state_sync import reload_current_test_state
            await reload_current_test_state(context)
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –≤—ñ–¥–µ–æ.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # –î–æ–∫—É–º–µ–Ω—Ç (PDF/DOC/DOCX/XLSX) –∞–±–æ MP4 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        if document:
            dfname = (document.file_name or "").lower()
            dmime = (document.mime_type or "").lower()
            if not dfname:
                await update.message.reply_text("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è (.pdf/.doc/.docx/.xlsx/.mp4).")
                return

            # MP4 —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            if dfname.endswith(".mp4") or "video/mp4" in dmime:
                file = await context.bot.get_file(document.file_id)
                video_path = os.path.join(media_dir, f"video{qnum}.mp4")
                await file.download_to_drive(video_path)
                print(f"[ADD_Q] user={user_id} saved VIDEO(doc) {video_path}")
                q_index = await _finalize_and_save_question(data, context)
                from handlers.state_sync import reload_current_test_state
                await reload_current_test_state(context)
                context.user_data.pop("add_question", None)
                context.user_data["add_question_active"] = False
                await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –≤—ñ–¥–µ–æ.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return

            allowed_doc = (dfname.endswith(".pdf") or dfname.endswith(".doc") or
                           dfname.endswith(".docx") or dfname.endswith(".xlsx"))
            if not allowed_doc:
                await update.message.reply_text("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è **PDF/DOC/DOCX/XLSX** –∞–±–æ **MP3/MP4**. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ —Ü–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª.")
                return

            file = await context.bot.get_file(document.file_id)
            ext = os.path.splitext(dfname)[1]
            doc_path = os.path.join(media_dir, f"doc{qnum}{ext}")
            await file.download_to_drive(doc_path)
            print(f"[ADD_Q] user={user_id} saved DOC {doc_path}")
            q_index = await _finalize_and_save_question(data, context)
            from handlers.state_sync import reload_current_test_state
            await reload_current_test_state(context)
            context.user_data.pop("add_question", None)
            context.user_data["add_question_active"] = False
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return

        # ==== Voice (OGG/OPUS) ‚Äî –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —è–∫ –º–µ–¥—ñ–∞ –ø–∏—Ç–∞–Ω–Ω—è ====
        if voice:
            await update.message.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (voice) ‚Äî —Ü–µ OGG/OPUS.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å **MP3-—Ñ–∞–π–ª** (—á–µ—Ä–µ–∑ —Å–∫—Ä—ñ–ø–∫—É) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª.")
            return

        # –Ø–∫—â–æ —Å—é–¥–∏ –¥—ñ–π—à–ª–∏ ‚Äî —Ñ–∞–π–ª—É –Ω–µ –±—É–ª–æ –∞–±–æ —Ü–µ –Ω–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø
        await update.message.reply_text(
            "‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å **—Ñ–æ—Ç–æ/MP3/MP4/PDF/DOC/DOCX/XLSX** –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ë–µ–∑ —Ñ–∞–π–ª—É¬ª.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("–ë–µ–∑ —Ñ–∞–π–ª—É", callback_data="addq_skip")],
                    [InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="addq_cancel")],
                ]
            )
        )

async def skip_image_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ '–ë–µ–∑ —Ñ–∞–π–ª—É' –ø—ñ–¥ —á–∞—Å –∫—Ä–æ–∫—É media."""
    query = update.callback_query
    await query.answer()

    flow = context.user_data.get("add_question")
    if not flow or flow.get("step") != "media":
        await query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è.", show_alert=False)
        return

    data = flow["data"]
    print(f"[ADD_Q] user={query.from_user.id} skipped media (button)")
    q_index = await _finalize_and_save_question(data, context)

    from handlers.state_sync import reload_current_test_state
    await reload_current_test_state(context)

    context.user_data.pop("add_question", None)
    context.user_data["add_question_active"] = False

    await query.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –±–µ–∑ —Ñ–∞–π–ª—É.\nüîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ")

# ===== –ù–æ–≤–µ: —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π cancel –¥–ª—è –º–∞–π—Å—Ç—Ä–∞ =====
async def addq_cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ –∫—Ä–æ–∫—É –º–∞–π—Å—Ç—Ä–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è (inline '‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏')."""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–∏–±–µ—Ä–µ–º–æ –±—É–¥—å-—è–∫–∏–π —Å—Ç–∞–Ω –º–∞–π—Å—Ç—Ä–∞
    context.user_data.pop("add_question", None)
    context.user_data["add_question_active"] = False

    # –°–∫–∞—Å—É—î–º–æ —Ç–∞–∫–æ–∂ –º–æ–∂–ª–∏–≤–∏–π –≥–µ–π—Ç (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ —Ç–∞–º)
    context.user_data.pop("addq_gate", None)

    try:
        await query.edit_message_text("‚ùé –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception:
        await query.message.reply_text("‚ùé –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

# ===== –í–ù–£–¢–†–Ü–®–ù–Ñ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø =====
async def _finalize_and_save_question(data: dict, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —É –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ flow JSON-—Ñ–∞–π–ª.
    –ü–æ–≤–µ—Ä—Ç–∞—î 1-–±–∞–∑–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è (–¥–ª—è –∑–∞–ø–∏—Å—É —É _qowners.json).
    """
    question_text = str(data.get("question", "")).strip()
    answers_list = data.get("answers", [])
    target_dir = data.get("target_dir") or TESTS_DIR
    base_name = data.get("target_test_base") or data.get("target_test") or "Custom"

    # –Ω–æ–≤—ñ –ø–æ–ª—è
    topics_list = data.get("topics") or []
    if not isinstance(topics_list, list):
        topics_list = []
    # —Ñ—ñ–ª—å—Ç—Ä –ø—É—Å—Ç–∏—Ö
    topics_list = [str(x).strip() for x in topics_list if str(x).strip()]

    explanation = str(data.get("explanation", "") or "")
    if len(explanation) > MAX_TEXT_LEN:
        explanation = explanation[:MAX_TEXT_LEN]

    sanitized_answers = [
        {"text": str(a.get("text", "")), "correct": bool(a.get("correct", False))}
        for a in answers_list
    ]

    # ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û: –ù–ï –¥–æ–¥–∞—î–º–æ —É JSON –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –º–µ–¥—ñ–∞ (–∑–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é)
    question_obj = {
        "question": question_text,
        "answers": sanitized_answers,
        "topics": topics_list,
        "explanation": explanation
    }

    # –ö–£–î–ò –ü–ò–®–ï–ú–û:
    json_path = data.get("json_save_path")
    if not json_path:
        # fallback ‚Äî –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏
        target_is_custom = _is_custom_test(data.get("target_test"))
        json_path = _custom_json_path(base_name, target_dir) if target_is_custom else _base_json_path(base_name, target_dir)

    questions = []
    if os.path.exists(json_path):
        try:
            async with aiofiles.open(json_path, "r", encoding="utf-8") as f:
                content = await f.read()
                questions = json.loads(content) if content.strip() else []
                if not isinstance(questions, list):
                    questions = []
        except Exception:
            questions = []

    # –Ü–Ω–¥–µ–∫—Å –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è (1-based) ‚Äî –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±—É–¥–µ —Å–∞–º–µ —Ç–∞–∫–∏–º
    new_q_index_1based = len(questions) + 1

    questions.append(question_obj)

    os.makedirs(os.path.dirname(json_path), exist_ok=True)
    async with aiofiles.open(json_path, "w", encoding="utf-8") as f:
        await f.write(json.dumps(questions, ensure_ascii=False, indent=2))

    print(f"[ADD_Q] saved JSON {json_path}, total={len(questions)}")

    # === –ó–ê–ü–ò–° –£ _qowners.json (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ/–Ω–∞–¥—ñ–π–Ω–æ) ===
    try:
        author_id = data.get("author_id")
        author_username = data.get("author_username") or ""
        if author_id:
            _record_qowner_sync(json_path, new_q_index_1based, int(author_id), author_username)
            print(f"[ADD_Q] qowner recorded: key={_rel_test_key(json_path)} idx={new_q_index_1based} user={author_id}")
        else:
            print("[ADD_Q] author_id missing ‚Äî skip qowner record")
    except Exception as e:
        print(f"[ADD_Q] failed to record qowner: {e}")

    from utils.loader import discover_tests, discover_tests_hierarchy
    try:
        context.bot_data["tests_catalog"] = discover_tests(TESTS_DIR)
        context.bot_data["tests_tree"] = discover_tests_hierarchy(TESTS_DIR)
        print("[ADD_Q] Catalog & tree reloaded after adding question")
    except Exception as e:
        print(f"[ADD_Q] Failed to reload catalog/tree: {e}")

    return new_q_index_1based

# ====== –ö–æ–º–ø—Ä–µ—Å—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ======
def _compress_image_file_to_limit_sync(src_path: str, dest_path: str, limit_bytes: int) -> bool:
    try:
        img = Image.open(src_path)
        if img.mode not in ("RGB", "L"):
            img = img.convert("RGB")

        max_side = max(img.size)
        if max_side > 1000:
            scale = 1000.0 / max_side
            new_size = (max(1, int(img.size[0] * scale)), max(1, int(img.size[1] * scale)))
            img = img.resize(new_size, Image.LANCZOS)

        qualities = [85, 75, 65, 55, 45, 35, 30, 25, 20, 18, 16, 14, 12, 10]
        best_buf = None
        best_size = None
        cur_img = img
        width, height = cur_img.size

        while True:
            for q in qualities:
                buf = io.BytesIO()
                cur_img.save(buf, format="JPEG", quality=q, optimize=True, progressive=True)
                data = buf.getvalue()
                size = len(data)

                if best_size is None or size < best_size:
                    best_size = size
                    best_buf = data

                if size <= limit_bytes:
                    with open(dest_path, "wb") as f:
                        f.write(data)
                    return True

            if width <= 60 or height <= 60:
                break
            width = max(1, int(width * 0.85))
            height = max(1, int(height * 0.85))
            cur_img = cur_img.resize((width, height), Image.LANCZOS)

        if best_buf:
            with open(dest_path, "wb") as f:
                f.write(best_buf)
            return len(best_buf) <= limit_bytes

        return False
    except Exception as e:
        print(f"[ADD_Q] Image compress error: {e}")
        return False

async def _compress_and_save_telegram_file(file_obj, dest_path: str, limit_bytes: int) -> bool:
    tmp_path = dest_path + ".tmp"
    try:
        await file_obj.download_to_drive(tmp_path)
        loop = asyncio.get_event_loop()
        ok = await loop.run_in_executor(
            None, _compress_image_file_to_limit_sync, tmp_path, dest_path, limit_bytes
        )
        return ok
    finally:
        try:
            if os.path.exists(tmp_path):
                os.remove(tmp_path)
        except Exception:
            pass
