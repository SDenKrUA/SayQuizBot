import io
import json
from telegram import Update
from telegram.ext import ContextTypes

def _make_sample_json():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∏–∫–ª–∞–¥ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —É –ù–û–í–û–ú–£ —Ñ–æ—Ä–º–∞—Ç—ñ:
    - –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –º–∞—î –ø–æ–ª—è: question, answers (–º–∞—Å–∏–≤ —ñ–∑ text/correct),
      –∞ —Ç–∞–∫–æ–∂ –î–û–î–ê–¢–ö–û–í–û: topics (–º–∞—Å–∏–≤ —Ö–µ—à—Ç–µ–≥—ñ–≤ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π) —ñ explanation (—Ä—è–¥–æ–∫ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π).
    - –ø—Ä–∏–∫–ª–∞–¥–∏ –æ—Ö–æ–ø–ª—é—é—Ç—å: –∫—ñ–ª—å–∫–∞ —Ö–µ—à—Ç–µ–≥—ñ–≤, –æ–¥–∏–Ω —Ö–µ—à—Ç–µ–≥, –±–µ–∑ —Ö–µ—à—Ç–µ–≥—ñ–≤; –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º —ñ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è.
    """
    return [
        {
            "question": "1. Under ISM, what is a \"non-conformity\"?",
            "answers": [
                {"text": "Official log book entries not being completed correctly", "correct": False},
                {"text": "A safety officer not being nominated for the vessel", "correct": False},
                {"text": "The wearing of non-standard Personal protective equipment", "correct": False},
                {"text": "An observed situation where objective evidence indicates the non-fulfilment of a specified requirement", "correct": True}
            ],
            "topics": ["#ISM", "#Safety", "#Audit"],
            "explanation": "ISM Code defines a non-conformity as an observed situation where objective evidence indicates the non-fulfilment of a specified requirement."
        },
        {
            "question": "2. Every inflatable liferaft, inflatable lifejacket and hydrostatic release units shall be serviced:",
            "answers": [
                {"text": "Every 36 months.", "correct": False},
                {"text": "Every 18 months.", "correct": False},
                {"text": "Every 24 months.", "correct": False},
                {"text": "Every 12 months.", "correct": True}
            ],
            "topics": ["#SOLAS"],  # –æ–¥–∏–Ω —Ö–µ—à—Ç–µ–≥
            "explanation": ""       # –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
        },
        {
            "question": "3. What is the primary purpose of a cargo tank inerting system on a chemical/oil tanker?",
            "answers": [
                {"text": "To reduce oxygen concentration below the flammable limit", "correct": True},
                {"text": "To increase the cargo temperature for faster discharge", "correct": False},
                {"text": "To neutralize toxic vapors by chemical reaction", "correct": False},
                {"text": "To dry the cargo tanks after washing", "correct": False}
            ],
            "topics": [],  # –±–µ–∑ —Ö–µ—à—Ç–µ–≥—ñ–≤
            "explanation": "Inert gas keeps oxygen content typically below 8%, preventing formation of a flammable atmosphere."
        },
        {
            "question": "4. Which action is MOST appropriate if you suspect a small electrical fire in the engine control room?",
            "answers": [
                {"text": "Use a CO‚ÇÇ or dry powder extinguisher after isolating the power", "correct": True},
                {"text": "Spray water directly onto the panel to cool it down", "correct": False},
                {"text": "Open all doors to ventilate the smoke immediately", "correct": False},
                {"text": "Ignore the alarm until the chief engineer arrives", "correct": False}
            ],
            "topics": ["#Firefighting", "#Engine"],  # –∫—ñ–ª—å–∫–∞ —Ö–µ—à—Ç–µ–≥—ñ–≤
            "explanation": ""  # –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
        }
    ]

async def vip_send_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ñ–∞–π–ª-—à–∞–±–ª–æ–Ω <test>.json —É –ù–û–í–û–ú–£ —Ñ–æ—Ä–º–∞—Ç—ñ –∑ –ø–æ–ª—è–º–∏ topics —Ç–∞ explanation.
    """
    query = update.callback_query
    await query.answer()
    payload = json.dumps(_make_sample_json(), ensure_ascii=False, indent=2)
    bio = io.BytesIO(payload.encode("utf-8"))
    bio.name = "<test>.json"
    caption = (
        "üìé –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É —Ç–µ—Å—Ç—É (<test>.json) ‚Äî –ù–û–í–ò–ô —Ñ–æ—Ä–º–∞—Ç —ñ–∑ —Ç–µ–º–∞–º–∏ —Ç–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏.\n"
        "‚Ä¢ JSON-–º–∞—Å–∏–≤ —ñ–∑ 4+ –ø–∏—Ç–∞–Ω—å\n"
        "‚Ä¢ –ü–æ–ª—è: 'question', 'answers' (–∫–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î 'text' —ñ 'correct')\n"
        "‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤–æ: 'topics' ‚Äî –º–∞—Å–∏–≤ —Ö–µ—à—Ç–µ–≥—ñ–≤ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π/1/–¥–µ–∫—ñ–ª—å–∫–∞), "
        "'explanation' ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º)\n"
        "‚Ä¢ –£ –∫–æ–∂–Ω–æ–º—É –ø–∏—Ç–∞–Ω–Ω—ñ —â–æ–Ω–∞–π–º–µ–Ω—à–µ –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ 'correct': true\n"
        "‚Ä¢ –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ñ–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é –≤–∞—à–æ–≥–æ —Ç–µ—Å—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ My Test.json"
    )
    await query.message.reply_document(document=bio, caption=caption)

async def vip_start_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_vip_json"] = True
    await query.message.reply_text(
        "üì§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON (*.json) —É –ù–û–í–û–ú–£ —Ñ–æ—Ä–º–∞—Ç—ñ (–∑ 'topics' —Ç–∞ 'explanation').\n"
        "–ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è –∑–∞–ø–∏—Ç–∞—é, –∫—É–¥–∏ —Å–∞–º–µ –π–æ–≥–æ –¥–æ–¥–∞—Ç–∏."
    )
