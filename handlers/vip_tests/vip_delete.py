import os
import stat
import shutil
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .vip_storage import _load_owners, _save_owners, _refresh_catalogs, _cleanup_empty_dirs
from utils.export_docx import _safe_filename
from utils.loader import IGNORED_JSON_SUFFIXES

def _remove_file(path: str) -> None:
    try:
        if os.path.isfile(path):
            os.remove(path)
    except Exception:
        pass

def _rmtree_force(path: str) -> None:
    """–ë—ñ–ª—å—à –∞–≥—Ä–µ—Å–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ (Windows-friendly)."""
    if not os.path.isdir(path):
        return

    def onerror(func, p, exc_info):
        try:
            # –ó–Ω—ñ–º–∞—î–º–æ read-only —ñ –ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
            os.chmod(p, stat.S_IWRITE)
            func(p)
        except Exception:
            pass

    try:
        shutil.rmtree(path, onerror=onerror)
    except Exception:
        # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞: —è–∫—â–æ —Å–ø–æ—Ä–æ–∂–Ω—ñ–ª–æ ‚Äî –ø—Ä–∏–±–µ—Ä–µ–º–æ
        try:
            if not os.listdir(path):
                os.rmdir(path)
        except Exception:
            pass

def _dir_has_any_test_json(abs_dir: str) -> bool:
    """
    True, —è–∫—â–æ –≤ —Ç–µ—Ü—ñ —î –•–û–ß –û–î–ò–ù .json, —â–æ –ù–ï –º–∞—î —Å–ª—É–∂–±–æ–≤–æ–≥–æ —Å—É—Ñ—ñ–∫—Å–∞ (—Ç–æ–±—Ç–æ —Ü–µ —Ç–µ—Å—Ç).
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–∏—à–µ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–∫—É, –±–µ–∑ –ø—ñ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π.
    """
    try:
        for fname in os.listdir(abs_dir):
            if not fname.lower().endswith(".json"):
                continue
            if any(fname.lower().endswith(suf) for suf in IGNORED_JSON_SUFFIXES):
                continue
            return True
    except Exception:
        pass
    return False

async def vip_delete_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    idx_str = (query.data.split("|", 1)[1] if "|" in query.data else "").strip()
    try:
        idx = int(idx_str)
    except ValueError:
        return
    items = context.user_data.get("vip_mytests") or []
    if not (0 <= idx < len(items)):
        await query.message.reply_text("‚ùå –¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    context.user_data["vip_delete_idx"] = idx
    name = items[idx]["name"]
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="vip_delete_confirm|yes"),
            InlineKeyboardButton("‚ùé –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="vip_delete_confirm|no"),
        ]
    ])
    await query.message.reply_text(f"üóë –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç—É **{name}**?", reply_markup=kb)

async def vip_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    choice = (query.data.split("|", 1)[1] if "|" in query.data else "no").strip()
    idx = context.user_data.pop("vip_delete_idx", None)
    items = context.user_data.get("vip_mytests") or []
    if idx is None or not (0 <= idx < len(items)):
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
        return

    item = items[idx]
    name = item["name"]
    abs_path = item["abs_path"]    # JSON —Ç–µ—Å—Ç—É
    abs_dir  = item["abs_dir"]     # —Ç–µ–∫–∞ —Ä–æ–∑–¥—ñ–ª—É, –¥–µ –ª–µ–∂–∏—Ç—å JSON (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ tests/Test/test1)
    rel      = item["rel"]

    if choice != "yes":
        await query.message.reply_text("‚ùé –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    # 1) –í–∏–¥–∞–ª—è—î–º–æ JSON —Ç–µ—Å—Ç—É
    _remove_file(abs_path)

    # 2) –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª—è—î–º–æ —Ç–µ–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç–µ—Å—Ç—É: <abs_dir>/<name>, #<name>, _<name>
    for img_dir_name in (name, f"#{name}", f"_{name}"):
        _rmtree_force(os.path.join(abs_dir, img_dir_name))

    # 3) –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ DOCX, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
    safe = _safe_filename(name)
    _remove_file(os.path.join(abs_dir, f"{safe}.docx"))
    _remove_file(os.path.join(abs_dir, f"{safe}.docx.meta.json"))

    # 4) –ü—Ä–∏–±–µ—Ä–µ–º–æ –º–æ–∂–ª–∏–≤—ñ —Å–ª—É–∂–±–æ–≤—ñ –ø—ñ–¥—Ç–µ–∫–∏ —Ç–∏–ø—É "<test>.comments"
    _rmtree_force(os.path.join(abs_dir, f"{name}.comments"))

    # 5) –Ø–∫—â–æ –≤ —Ü—ñ–π —Ç–µ—Ü—ñ –ù–ï –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∂–æ–¥–Ω–æ–≥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON ‚Äî –∑–Ω–æ—Å–∏–º–æ —Å–∞–º —Ä–æ–∑–¥—ñ–ª –ø–æ–≤–Ω—ñ—Å—Ç—é
    try:
        if os.path.isdir(abs_dir) and not _dir_has_any_test_json(abs_dir):
            _rmtree_force(abs_dir)
    except Exception:
        pass

    # 6) –û—á–∏—â–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä –≤–ª–∞—Å–Ω–∏–∫—ñ–≤
    owners = _load_owners()
    owners.pop(rel, None)
    _save_owners(owners)

    # 7) –ü–Ü–°–õ–Ø –∂–æ—Ä—Å—Ç–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –ø—ñ–¥—á–∏—â–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤–≥–æ—Ä—É
    #    (—Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–µ—Å—Ç—É, –ø–æ—Ç—ñ–º –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —â–µ –≤—ñ–¥ –π–æ–≥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ)
    _cleanup_empty_dirs(abs_dir)
    _cleanup_empty_dirs(os.path.dirname(abs_dir))

    # 8) –Ü —Ç—ñ–ª—å–∫–∏ –¢–ï–ü–ï–† –æ–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥–∏/–¥–µ—Ä–µ–≤–æ
    _refresh_catalogs(context)

    await query.message.reply_text(f"üóë –¢–µ—Å—Ç **{name}** –≤–∏–¥–∞–ª–µ–Ω–æ.")
