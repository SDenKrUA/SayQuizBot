# handlers/office.py
import os
import json
import logging
from typing import List, Tuple

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from utils.i18n import t
from handlers.start import cmd_start
from handlers.favorites import show_favorites
from handlers.start import cmd_stats
from handlers.vip_tests import office_my_tests_entry, office_shared_tests_entry
from handlers.wrong_answers import wrong_answers_cmd  # ‚úÖ –¥–æ–¥–∞–Ω–æ

from handlers.vip_tests.vip_constants import TESTS_ROOT
from handlers.vip_tests.vip_storage import _load_owners, get_meta_for_rel  # ‚úÖ –¥–æ–ø–æ–≤–Ω–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç

# üëë –í–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞
from utils.auth import is_owner
from handlers.owner_panel import owner_entry

logger = logging.getLogger("test_bot.office")

# –ö–Ω–æ–ø–∫–∏
BTN_STATS = "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
BTN_FAVS = "–ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ"
BTN_MY_TESTS = "–ú–æ—ó —Ç–µ—Å—Ç–∏"
BTN_SHARED_TESTS = "–°–ø—ñ–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏"
BTN_MY_QUESTIONS = "–ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è"
BTN_MY_WRONG = "–ú–æ—ó –ø–æ–º–∏–ª–∫–∏"  # ‚úÖ –¥–æ–¥–∞–Ω–æ
BTN_OWNER = "üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"  # ‚úÖ –Ω–æ–≤–µ (–ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ª–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫—É)
BTN_BACK = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"


def office_keyboard(user_is_owner: bool = False) -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É ¬´–ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç¬ª.
    –Ø–∫—â–æ user_is_owner=True ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫: [üëë –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å, ‚¨ÖÔ∏è –ù–∞–∑–∞–¥]
    –Ø–∫—â–æ False ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫: [‚¨ÖÔ∏è –ù–∞–∑–∞–¥]
    """
    kb = [
        [KeyboardButton(BTN_STATS), KeyboardButton(BTN_FAVS)],
        [KeyboardButton(BTN_MY_TESTS), KeyboardButton(BTN_SHARED_TESTS)],
        [KeyboardButton(BTN_MY_QUESTIONS), KeyboardButton(BTN_MY_WRONG)],
    ]
    if user_is_owner:
        kb.append([KeyboardButton(BTN_OWNER), KeyboardButton(BTN_BACK)])
    else:
        kb.append([KeyboardButton(BTN_BACK)])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)


def _ua_users(n: int) -> str:
    """
    –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞ ¬´–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á¬ª –∑–∞ —á–∏—Å–ª–æ–º n.
    1 ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, 2-4 ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, 5+ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    n_abs = abs(n) % 100
    n1 = n_abs % 10
    if 11 <= n_abs <= 14:
        return "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    if n1 == 1:
        return "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    if 2 <= n1 <= 4:
        return "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"
    return "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"


async def office_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–∫–∏–Ω–µ–º–æ —ñ–Ω—à—ñ –º–∞–π—Å—Ç—Ä–∏/—Ñ–ª–∞–≥–∏, —â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∏
    for k in ("awaiting_search", "search_mode", "awaiting_comment", "add_question_active"):
        context.user_data.pop(k, None)
    context.user_data["in_office"] = True

    # –•—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ —á–∏ –≤—ñ–Ω –≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞
    user_id = update.effective_user.id
    user_is_owner = is_owner(user_id)

    # --- –ù–û–í–ï: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–ø—ñ–ª—å–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–º ---
    owners = _load_owners() or {}

    # –±–µ—Ä–µ–º–æ –ª–∏—à–µ —Ç—ñ –∑–∞–ø–∏—Å–∏, –¥–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –≤–ª–∞—Å–Ω–∏–∫ —Ç–µ—Å—Ç—É
    pending_lines: List[str] = []
    total_pending = 0

    for rel, meta in owners.items():
        if not isinstance(meta, dict):
            continue
        if meta.get("owner_id") != user_id:
            continue

        # —á–∏—Ç–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ get_meta_for_rel (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ —Ñ–æ—Ä–º–∞)
        m = get_meta_for_rel(rel)
        pend = m.get("pending") or []
        cnt = len(pend)
        if cnt <= 0:
            continue

        # –ù–∞–∑–≤–∞ —Ç–µ—Å—Ç—É ‚Äî –∑ —Ñ–∞–π–ª—É (–Ω–∞–∑–≤–∞ JSON –±–µ–∑ ".json")
        test_title = os.path.splitext(os.path.basename(rel))[0]
        pending_lines.append(f"{test_title} ‚Äî {cnt} {_ua_users(cnt)}")
        total_pending += cnt

    if total_pending > 0:
        middle = "–£ –≤–∞—Å —î –∑–∞–ø–∏—Ç –Ω–∞ —Å–ø—ñ–ª—å–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–º"
        middle += "\n" + "\n".join(pending_lines)
    else:
        middle = "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å  –≤—ñ–¥ —Ç–µ—Å—Ç—ñ–≤"  # –∑–±–µ—Ä—ñ–≥–∞—é —Ç–æ—á–Ω—É —Ñ—Ä–∞–∑—É, —è–∫ –≤–∏ –ø—Ä–æ—Å–∏–ª–∏

    text = "üë§ –ú—ñ–π –∫–∞–±—ñ–Ω–µ—Ç\n" + middle + "\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª."

    await update.message.reply_text(text, reply_markup=office_keyboard(user_is_owner=user_is_owner))


async def office_buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (update.message.text or "").strip()
    context.user_data["in_office"] = True

    if text == BTN_STATS:
        await cmd_stats(update, context)
        return

    if text == BTN_FAVS:
        await show_favorites(update, context)
        return

    if text == BTN_MY_TESTS:
        await office_my_tests_entry(update, context)
        return

    if text == BTN_SHARED_TESTS:
        await office_shared_tests_entry(update, context)
        return

    if text == BTN_MY_QUESTIONS:
        await office_my_questions(update, context)
        return

    if text == BTN_MY_WRONG:
        await wrong_answers_cmd(update, context)
        return

    if text == BTN_OWNER:
        if is_owner(update.effective_user.id):
            await owner_entry(update, context)
        else:
            await update.message.reply_text("‚õî –õ–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        return

    if text == BTN_BACK:
        context.user_data["suppress_test_select_once"] = True
        context.user_data["in_office"] = False
        for k in ("awaiting_search", "search_mode"):
            context.user_data.pop(k, None)
        await cmd_start(update, context)
        return

    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=office_keyboard(user_is_owner=is_owner(update.effective_user.id)),
    )


# --------- ¬´–ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è¬ª ---------
def _iter_json_tests(root: str) -> List[Tuple[str, str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (abs_json_path, rel_path_from_tests).
    –í—Ä–∞—Ö–æ–≤—É—î –ª–∏—à–µ *.json —Ñ–∞–π–ª–∏.
    """
    out: List[Tuple[str, str]] = []
    root_abs = os.path.abspath(root)
    for dirpath, _, filenames in os.walk(root_abs):
        for fn in filenames:
            if not fn.lower().endswith(".json"):
                continue
            abs_json = os.path.join(dirpath, fn)
            rel = os.path.relpath(abs_json, root_abs).replace("\\", "/")
            out.append((abs_json, rel))
    return out


def _read_json_list(abs_json: str) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–ø–∏—Ç–∞–Ω—å) —É —Ñ–∞–π–ª—ñ JSON, —è–∫—â–æ —Ü–µ –º–∞—Å–∏–≤.
    –ü–æ–º–∏–ª–∫–∏ ‚Äî 0.
    """
    try:
        with open(abs_json, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, list):
            return len(data)
    except Exception:
        pass
    return 0


async def office_my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—É—î –ø—ñ–¥–±—ñ—Ä–∫—É —Ç–µ—Å—Ç—ñ–≤, —É —è–∫—ñ —Ç–∏ –º—ñ–≥ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:
    1) –¢–µ—Å—Ç–∏, –¥–µ –¢–ò ‚Äî –≤–ª–∞—Å–Ω–∏–∫ (–∑–∞ tests/_owners.json).
    2) –£—Å—ñ —Ç–µ—Å—Ç–∏ –∑ –ø–æ–º—ñ—Ç–∫–æ—é (custom).

    –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –ø–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É JSON.
    """
    user_id = update.effective_user.id
    owners = _load_owners()

    # 1) –¢–µ—Å—Ç–∏, –¥–µ —Ç–∏ –≤–ª–∞—Å–Ω–∏–∫
    owned: List[Tuple[str, str]] = []
    for rel, meta in owners.items():
        if isinstance(meta, dict) and meta.get("owner_id") == user_id:
            owned.append((os.path.join(TESTS_ROOT, rel), rel))

    # 2) –£—Å—ñ (custom) —Ç–µ—Å—Ç–∏
    customs: List[Tuple[str, str]] = []
    for abs_json, rel in _iter_json_tests(TESTS_ROOT):
        base = os.path.basename(abs_json)
        if base.endswith(" (custom).json"):
            customs.append((abs_json, rel))

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
    lines: List[str] = []
    if owned:
        lines.append("–í–∞—à—ñ –≤–ª–∞—Å–Ω—ñ —Ç–µ—Å—Ç–∏ (–¥–µ –≤–∏ –º–æ–≥–ª–∏ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ '(custom)'):")
        for abs_json, rel in sorted(owned, key=lambda x: x[1].lower()):
            name = os.path.splitext(os.path.basename(abs_json))[0]
            count = _read_json_list(abs_json)
            lines.append(f"‚Ä¢ {name}  ‚Äî  /{rel}  ({count} –ø–∏—Ç–∞–Ω—å)")
        lines.append("")

    if customs:
        lines.append("–¢–µ—Å—Ç–∏ (custom), –∫—É–¥–∏ –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
        for abs_json, rel in sorted(customs, key=lambda x: x[1].lower()):
            name = os.path.splitext(os.path.basename(abs_json))[0]
            count = _read_json_list(abs_json)
            lines.append(f"‚Ä¢ {name}  ‚Äî  /{rel}  ({count} –ø–∏—Ç–∞–Ω—å)")
    else:
        if not owned:
            lines.append("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤, –∫—É–¥–∏ –≤–∏ –¥–æ–¥–∞–≤–∞–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è.")

    text = "\n".join(lines) if lines else "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–µ—Å—Ç—ñ–≤, –∫—É–¥–∏ –≤–∏ –¥–æ–¥–∞–≤–∞–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è."
    await update.message.reply_text(text)
